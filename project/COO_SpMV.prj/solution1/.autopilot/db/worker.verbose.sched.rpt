

================================================================
== Vivado HLS Report for 'worker'
================================================================
* Date:           Sun Nov 20 12:38:16 2022

* Version:        2016.2 (Build 1577090 on Thu Jun 02 16:59:10 MDT 2016)
* Project:        COO_SpMV.prj
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      9.09|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-------+-------+-------+-------+---------+
    |    Latency    |    Interval   | Pipeline|
    |  min  |  max  |  min  |  max  |   Type  |
    +-------+-------+-------+-------+---------+
    |  27734|  27734|  27735|  27735|   none  |
    +-------+-------+-------+-------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------------------+-----+-----+----------+-----------+-----------+------+----------+
        |                               |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        |           Loop Name           | min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------------------+-----+-----+----------+-----------+-----------+------+----------+
        |- LOOP_DEST1_PE_LOOP_DEST1_ST  |  100|  100|         2|          1|          1|   100|    yes   |
        +-------------------------------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 2


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 20
* Pipeline: 1
  Pipeline-0: II = 1, D = 2, States = { 18 19 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	20  / (exitcond_flatten)
	19  / (!exitcond_flatten)
19 --> 
	18  / true
20 --> 
* FSM state operations: 

 <State 1>: 2.39ns
ST_1: dest_1_0 [1/1] 0.00ns
.preheader.preheader:2  %dest_1_0 = alloca [25 x float], align 4

ST_1: dest_1_1 [1/1] 0.00ns
.preheader.preheader:3  %dest_1_1 = alloca [25 x float], align 4

ST_1: dest_1_2 [1/1] 0.00ns
.preheader.preheader:4  %dest_1_2 = alloca [25 x float], align 4

ST_1: dest_1_3 [1/1] 0.00ns
.preheader.preheader:5  %dest_1_3 = alloca [25 x float], align 4

ST_1: row_1_0 [1/1] 0.00ns
.preheader.preheader:6  %row_1_0 = alloca [2500 x i5], align 1

ST_1: row_1_1 [1/1] 0.00ns
.preheader.preheader:7  %row_1_1 = alloca [2500 x i5], align 1

ST_1: row_1_2 [1/1] 0.00ns
.preheader.preheader:8  %row_1_2 = alloca [2500 x i5], align 1

ST_1: row_1_3 [1/1] 0.00ns
.preheader.preheader:9  %row_1_3 = alloca [2500 x i5], align 1

ST_1: col_1_0 [1/1] 0.00ns
.preheader.preheader:10  %col_1_0 = alloca [2500 x i7], align 1

ST_1: col_1_1 [1/1] 0.00ns
.preheader.preheader:11  %col_1_1 = alloca [2500 x i7], align 1

ST_1: col_1_2 [1/1] 0.00ns
.preheader.preheader:12  %col_1_2 = alloca [2500 x i7], align 1

ST_1: col_1_3 [1/1] 0.00ns
.preheader.preheader:13  %col_1_3 = alloca [2500 x i7], align 1

ST_1: val_1_0 [1/1] 0.00ns
.preheader.preheader:14  %val_1_0 = alloca [2500 x float], align 4

ST_1: val_1_1 [1/1] 0.00ns
.preheader.preheader:15  %val_1_1 = alloca [2500 x float], align 4

ST_1: val_1_2 [1/1] 0.00ns
.preheader.preheader:16  %val_1_2 = alloca [2500 x float], align 4

ST_1: val_1_3 [1/1] 0.00ns
.preheader.preheader:17  %val_1_3 = alloca [2500 x float], align 4

ST_1: dest_1_0_addr [1/1] 0.00ns
.preheader.preheader:18  %dest_1_0_addr = getelementptr [25 x float]* %dest_1_0, i64 0, i64 0

ST_1: stg_38 [1/1] 2.39ns
.preheader.preheader:19  store float 0.000000e+00, float* %dest_1_0_addr, align 16


 <State 2>: 2.39ns
ST_2: dest_1_0_addr_1 [1/1] 0.00ns
.preheader.preheader:20  %dest_1_0_addr_1 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 1

ST_2: stg_40 [1/1] 2.39ns
.preheader.preheader:21  store float 0.000000e+00, float* %dest_1_0_addr_1, align 4

ST_2: dest_1_0_addr_2 [1/1] 0.00ns
.preheader.preheader:22  %dest_1_0_addr_2 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 2

ST_2: stg_42 [1/1] 2.39ns
.preheader.preheader:23  store float 0.000000e+00, float* %dest_1_0_addr_2, align 8


 <State 3>: 2.39ns
ST_3: dest_1_0_addr_3 [1/1] 0.00ns
.preheader.preheader:24  %dest_1_0_addr_3 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 3

ST_3: stg_44 [1/1] 2.39ns
.preheader.preheader:25  store float 0.000000e+00, float* %dest_1_0_addr_3, align 4

ST_3: dest_1_0_addr_4 [1/1] 0.00ns
.preheader.preheader:26  %dest_1_0_addr_4 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 4

ST_3: stg_46 [1/1] 2.39ns
.preheader.preheader:27  store float 0.000000e+00, float* %dest_1_0_addr_4, align 16

ST_3: dest_1_1_addr [1/1] 0.00ns
.preheader.preheader:70  %dest_1_1_addr = getelementptr [25 x float]* %dest_1_1, i64 0, i64 0

ST_3: stg_48 [1/1] 2.39ns
.preheader.preheader:71  store float 0.000000e+00, float* %dest_1_1_addr, align 4

ST_3: dest_1_2_addr [1/1] 0.00ns
.preheader.preheader:122  %dest_1_2_addr = getelementptr [25 x float]* %dest_1_2, i64 0, i64 0

ST_3: stg_50 [1/1] 2.39ns
.preheader.preheader:123  store float 0.000000e+00, float* %dest_1_2_addr, align 8

ST_3: dest_1_3_addr [1/1] 0.00ns
.preheader.preheader:174  %dest_1_3_addr = getelementptr [25 x float]* %dest_1_3, i64 0, i64 0

ST_3: stg_52 [1/1] 2.39ns
.preheader.preheader:175  store float 0.000000e+00, float* %dest_1_3_addr, align 4


 <State 4>: 2.39ns
ST_4: dest_1_0_addr_5 [1/1] 0.00ns
.preheader.preheader:28  %dest_1_0_addr_5 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 5

ST_4: stg_54 [1/1] 2.39ns
.preheader.preheader:29  store float 0.000000e+00, float* %dest_1_0_addr_5, align 4

ST_4: dest_1_0_addr_6 [1/1] 0.00ns
.preheader.preheader:30  %dest_1_0_addr_6 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 6

ST_4: stg_56 [1/1] 2.39ns
.preheader.preheader:31  store float 0.000000e+00, float* %dest_1_0_addr_6, align 8

ST_4: dest_1_1_addr_1 [1/1] 0.00ns
.preheader.preheader:72  %dest_1_1_addr_1 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 1

ST_4: stg_58 [1/1] 2.39ns
.preheader.preheader:73  store float 0.000000e+00, float* %dest_1_1_addr_1, align 4

ST_4: dest_1_1_addr_2 [1/1] 0.00ns
.preheader.preheader:74  %dest_1_1_addr_2 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 2

ST_4: stg_60 [1/1] 2.39ns
.preheader.preheader:75  store float 0.000000e+00, float* %dest_1_1_addr_2, align 4

ST_4: dest_1_2_addr_1 [1/1] 0.00ns
.preheader.preheader:124  %dest_1_2_addr_1 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 1

ST_4: stg_62 [1/1] 2.39ns
.preheader.preheader:125  store float 0.000000e+00, float* %dest_1_2_addr_1, align 4

ST_4: dest_1_2_addr_2 [1/1] 0.00ns
.preheader.preheader:126  %dest_1_2_addr_2 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 2

ST_4: stg_64 [1/1] 2.39ns
.preheader.preheader:127  store float 0.000000e+00, float* %dest_1_2_addr_2, align 8

ST_4: dest_1_3_addr_1 [1/1] 0.00ns
.preheader.preheader:176  %dest_1_3_addr_1 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 1

ST_4: stg_66 [1/1] 2.39ns
.preheader.preheader:177  store float 0.000000e+00, float* %dest_1_3_addr_1, align 4

ST_4: dest_1_3_addr_2 [1/1] 0.00ns
.preheader.preheader:178  %dest_1_3_addr_2 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 2

ST_4: stg_68 [1/1] 2.39ns
.preheader.preheader:179  store float 0.000000e+00, float* %dest_1_3_addr_2, align 4


 <State 5>: 2.39ns
ST_5: dest_1_0_addr_7 [1/1] 0.00ns
.preheader.preheader:32  %dest_1_0_addr_7 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 7

ST_5: stg_70 [1/1] 2.39ns
.preheader.preheader:33  store float 0.000000e+00, float* %dest_1_0_addr_7, align 4

ST_5: dest_1_0_addr_8 [1/1] 0.00ns
.preheader.preheader:34  %dest_1_0_addr_8 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 8

ST_5: stg_72 [1/1] 2.39ns
.preheader.preheader:35  store float 0.000000e+00, float* %dest_1_0_addr_8, align 16

ST_5: dest_1_1_addr_3 [1/1] 0.00ns
.preheader.preheader:76  %dest_1_1_addr_3 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 3

ST_5: stg_74 [1/1] 2.39ns
.preheader.preheader:77  store float 0.000000e+00, float* %dest_1_1_addr_3, align 4

ST_5: dest_1_1_addr_4 [1/1] 0.00ns
.preheader.preheader:78  %dest_1_1_addr_4 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 4

ST_5: stg_76 [1/1] 2.39ns
.preheader.preheader:79  store float 0.000000e+00, float* %dest_1_1_addr_4, align 4

ST_5: dest_1_2_addr_3 [1/1] 0.00ns
.preheader.preheader:128  %dest_1_2_addr_3 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 3

ST_5: stg_78 [1/1] 2.39ns
.preheader.preheader:129  store float 0.000000e+00, float* %dest_1_2_addr_3, align 4

ST_5: dest_1_2_addr_4 [1/1] 0.00ns
.preheader.preheader:130  %dest_1_2_addr_4 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 4

ST_5: stg_80 [1/1] 2.39ns
.preheader.preheader:131  store float 0.000000e+00, float* %dest_1_2_addr_4, align 8

ST_5: dest_1_3_addr_3 [1/1] 0.00ns
.preheader.preheader:180  %dest_1_3_addr_3 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 3

ST_5: stg_82 [1/1] 2.39ns
.preheader.preheader:181  store float 0.000000e+00, float* %dest_1_3_addr_3, align 4

ST_5: dest_1_3_addr_4 [1/1] 0.00ns
.preheader.preheader:182  %dest_1_3_addr_4 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 4

ST_5: stg_84 [1/1] 2.39ns
.preheader.preheader:183  store float 0.000000e+00, float* %dest_1_3_addr_4, align 4


 <State 6>: 2.39ns
ST_6: dest_1_0_addr_9 [1/1] 0.00ns
.preheader.preheader:36  %dest_1_0_addr_9 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 9

ST_6: stg_86 [1/1] 2.39ns
.preheader.preheader:37  store float 0.000000e+00, float* %dest_1_0_addr_9, align 4

ST_6: dest_1_0_addr_10 [1/1] 0.00ns
.preheader.preheader:38  %dest_1_0_addr_10 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 10

ST_6: stg_88 [1/1] 2.39ns
.preheader.preheader:39  store float 0.000000e+00, float* %dest_1_0_addr_10, align 8

ST_6: dest_1_1_addr_5 [1/1] 0.00ns
.preheader.preheader:80  %dest_1_1_addr_5 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 5

ST_6: stg_90 [1/1] 2.39ns
.preheader.preheader:81  store float 0.000000e+00, float* %dest_1_1_addr_5, align 4

ST_6: dest_1_1_addr_6 [1/1] 0.00ns
.preheader.preheader:82  %dest_1_1_addr_6 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 6

ST_6: stg_92 [1/1] 2.39ns
.preheader.preheader:83  store float 0.000000e+00, float* %dest_1_1_addr_6, align 4

ST_6: dest_1_2_addr_5 [1/1] 0.00ns
.preheader.preheader:132  %dest_1_2_addr_5 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 5

ST_6: stg_94 [1/1] 2.39ns
.preheader.preheader:133  store float 0.000000e+00, float* %dest_1_2_addr_5, align 4

ST_6: dest_1_2_addr_6 [1/1] 0.00ns
.preheader.preheader:134  %dest_1_2_addr_6 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 6

ST_6: stg_96 [1/1] 2.39ns
.preheader.preheader:135  store float 0.000000e+00, float* %dest_1_2_addr_6, align 8

ST_6: dest_1_3_addr_5 [1/1] 0.00ns
.preheader.preheader:184  %dest_1_3_addr_5 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 5

ST_6: stg_98 [1/1] 2.39ns
.preheader.preheader:185  store float 0.000000e+00, float* %dest_1_3_addr_5, align 4

ST_6: dest_1_3_addr_6 [1/1] 0.00ns
.preheader.preheader:186  %dest_1_3_addr_6 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 6

ST_6: stg_100 [1/1] 2.39ns
.preheader.preheader:187  store float 0.000000e+00, float* %dest_1_3_addr_6, align 4


 <State 7>: 2.39ns
ST_7: dest_1_0_addr_11 [1/1] 0.00ns
.preheader.preheader:40  %dest_1_0_addr_11 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 11

ST_7: stg_102 [1/1] 2.39ns
.preheader.preheader:41  store float 0.000000e+00, float* %dest_1_0_addr_11, align 4

ST_7: dest_1_0_addr_12 [1/1] 0.00ns
.preheader.preheader:42  %dest_1_0_addr_12 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 12

ST_7: stg_104 [1/1] 2.39ns
.preheader.preheader:43  store float 0.000000e+00, float* %dest_1_0_addr_12, align 16

ST_7: dest_1_1_addr_7 [1/1] 0.00ns
.preheader.preheader:84  %dest_1_1_addr_7 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 7

ST_7: stg_106 [1/1] 2.39ns
.preheader.preheader:85  store float 0.000000e+00, float* %dest_1_1_addr_7, align 4

ST_7: dest_1_1_addr_8 [1/1] 0.00ns
.preheader.preheader:86  %dest_1_1_addr_8 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 8

ST_7: stg_108 [1/1] 2.39ns
.preheader.preheader:87  store float 0.000000e+00, float* %dest_1_1_addr_8, align 4

ST_7: dest_1_2_addr_7 [1/1] 0.00ns
.preheader.preheader:136  %dest_1_2_addr_7 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 7

ST_7: stg_110 [1/1] 2.39ns
.preheader.preheader:137  store float 0.000000e+00, float* %dest_1_2_addr_7, align 4

ST_7: dest_1_2_addr_8 [1/1] 0.00ns
.preheader.preheader:138  %dest_1_2_addr_8 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 8

ST_7: stg_112 [1/1] 2.39ns
.preheader.preheader:139  store float 0.000000e+00, float* %dest_1_2_addr_8, align 8

ST_7: dest_1_3_addr_7 [1/1] 0.00ns
.preheader.preheader:188  %dest_1_3_addr_7 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 7

ST_7: stg_114 [1/1] 2.39ns
.preheader.preheader:189  store float 0.000000e+00, float* %dest_1_3_addr_7, align 4

ST_7: dest_1_3_addr_8 [1/1] 0.00ns
.preheader.preheader:190  %dest_1_3_addr_8 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 8

ST_7: stg_116 [1/1] 2.39ns
.preheader.preheader:191  store float 0.000000e+00, float* %dest_1_3_addr_8, align 4


 <State 8>: 2.39ns
ST_8: dest_1_0_addr_13 [1/1] 0.00ns
.preheader.preheader:44  %dest_1_0_addr_13 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 13

ST_8: stg_118 [1/1] 2.39ns
.preheader.preheader:45  store float 0.000000e+00, float* %dest_1_0_addr_13, align 4

ST_8: dest_1_0_addr_14 [1/1] 0.00ns
.preheader.preheader:46  %dest_1_0_addr_14 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 14

ST_8: stg_120 [1/1] 2.39ns
.preheader.preheader:47  store float 0.000000e+00, float* %dest_1_0_addr_14, align 8

ST_8: dest_1_1_addr_9 [1/1] 0.00ns
.preheader.preheader:88  %dest_1_1_addr_9 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 9

ST_8: stg_122 [1/1] 2.39ns
.preheader.preheader:89  store float 0.000000e+00, float* %dest_1_1_addr_9, align 4

ST_8: dest_1_1_addr_10 [1/1] 0.00ns
.preheader.preheader:90  %dest_1_1_addr_10 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 10

ST_8: stg_124 [1/1] 2.39ns
.preheader.preheader:91  store float 0.000000e+00, float* %dest_1_1_addr_10, align 4

ST_8: dest_1_2_addr_9 [1/1] 0.00ns
.preheader.preheader:140  %dest_1_2_addr_9 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 9

ST_8: stg_126 [1/1] 2.39ns
.preheader.preheader:141  store float 0.000000e+00, float* %dest_1_2_addr_9, align 4

ST_8: dest_1_2_addr_10 [1/1] 0.00ns
.preheader.preheader:142  %dest_1_2_addr_10 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 10

ST_8: stg_128 [1/1] 2.39ns
.preheader.preheader:143  store float 0.000000e+00, float* %dest_1_2_addr_10, align 8

ST_8: dest_1_3_addr_9 [1/1] 0.00ns
.preheader.preheader:192  %dest_1_3_addr_9 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 9

ST_8: stg_130 [1/1] 2.39ns
.preheader.preheader:193  store float 0.000000e+00, float* %dest_1_3_addr_9, align 4

ST_8: dest_1_3_addr_10 [1/1] 0.00ns
.preheader.preheader:194  %dest_1_3_addr_10 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 10

ST_8: stg_132 [1/1] 2.39ns
.preheader.preheader:195  store float 0.000000e+00, float* %dest_1_3_addr_10, align 4


 <State 9>: 2.39ns
ST_9: dest_1_0_addr_15 [1/1] 0.00ns
.preheader.preheader:48  %dest_1_0_addr_15 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 15

ST_9: stg_134 [1/1] 2.39ns
.preheader.preheader:49  store float 0.000000e+00, float* %dest_1_0_addr_15, align 4

ST_9: dest_1_0_addr_16 [1/1] 0.00ns
.preheader.preheader:50  %dest_1_0_addr_16 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 16

ST_9: stg_136 [1/1] 2.39ns
.preheader.preheader:51  store float 0.000000e+00, float* %dest_1_0_addr_16, align 16

ST_9: dest_1_1_addr_11 [1/1] 0.00ns
.preheader.preheader:92  %dest_1_1_addr_11 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 11

ST_9: stg_138 [1/1] 2.39ns
.preheader.preheader:93  store float 0.000000e+00, float* %dest_1_1_addr_11, align 4

ST_9: dest_1_1_addr_12 [1/1] 0.00ns
.preheader.preheader:94  %dest_1_1_addr_12 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 12

ST_9: stg_140 [1/1] 2.39ns
.preheader.preheader:95  store float 0.000000e+00, float* %dest_1_1_addr_12, align 4

ST_9: dest_1_2_addr_11 [1/1] 0.00ns
.preheader.preheader:144  %dest_1_2_addr_11 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 11

ST_9: stg_142 [1/1] 2.39ns
.preheader.preheader:145  store float 0.000000e+00, float* %dest_1_2_addr_11, align 4

ST_9: dest_1_2_addr_12 [1/1] 0.00ns
.preheader.preheader:146  %dest_1_2_addr_12 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 12

ST_9: stg_144 [1/1] 2.39ns
.preheader.preheader:147  store float 0.000000e+00, float* %dest_1_2_addr_12, align 8

ST_9: dest_1_3_addr_11 [1/1] 0.00ns
.preheader.preheader:196  %dest_1_3_addr_11 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 11

ST_9: stg_146 [1/1] 2.39ns
.preheader.preheader:197  store float 0.000000e+00, float* %dest_1_3_addr_11, align 4

ST_9: dest_1_3_addr_12 [1/1] 0.00ns
.preheader.preheader:198  %dest_1_3_addr_12 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 12

ST_9: stg_148 [1/1] 2.39ns
.preheader.preheader:199  store float 0.000000e+00, float* %dest_1_3_addr_12, align 4


 <State 10>: 2.39ns
ST_10: dest_1_0_addr_17 [1/1] 0.00ns
.preheader.preheader:52  %dest_1_0_addr_17 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 17

ST_10: stg_150 [1/1] 2.39ns
.preheader.preheader:53  store float 0.000000e+00, float* %dest_1_0_addr_17, align 4

ST_10: dest_1_0_addr_18 [1/1] 0.00ns
.preheader.preheader:54  %dest_1_0_addr_18 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 18

ST_10: stg_152 [1/1] 2.39ns
.preheader.preheader:55  store float 0.000000e+00, float* %dest_1_0_addr_18, align 8

ST_10: dest_1_1_addr_13 [1/1] 0.00ns
.preheader.preheader:96  %dest_1_1_addr_13 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 13

ST_10: stg_154 [1/1] 2.39ns
.preheader.preheader:97  store float 0.000000e+00, float* %dest_1_1_addr_13, align 4

ST_10: dest_1_1_addr_14 [1/1] 0.00ns
.preheader.preheader:98  %dest_1_1_addr_14 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 14

ST_10: stg_156 [1/1] 2.39ns
.preheader.preheader:99  store float 0.000000e+00, float* %dest_1_1_addr_14, align 4

ST_10: dest_1_2_addr_13 [1/1] 0.00ns
.preheader.preheader:148  %dest_1_2_addr_13 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 13

ST_10: stg_158 [1/1] 2.39ns
.preheader.preheader:149  store float 0.000000e+00, float* %dest_1_2_addr_13, align 4

ST_10: dest_1_2_addr_14 [1/1] 0.00ns
.preheader.preheader:150  %dest_1_2_addr_14 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 14

ST_10: stg_160 [1/1] 2.39ns
.preheader.preheader:151  store float 0.000000e+00, float* %dest_1_2_addr_14, align 8

ST_10: dest_1_3_addr_13 [1/1] 0.00ns
.preheader.preheader:200  %dest_1_3_addr_13 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 13

ST_10: stg_162 [1/1] 2.39ns
.preheader.preheader:201  store float 0.000000e+00, float* %dest_1_3_addr_13, align 4

ST_10: dest_1_3_addr_14 [1/1] 0.00ns
.preheader.preheader:202  %dest_1_3_addr_14 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 14

ST_10: stg_164 [1/1] 2.39ns
.preheader.preheader:203  store float 0.000000e+00, float* %dest_1_3_addr_14, align 4


 <State 11>: 2.39ns
ST_11: dest_1_0_addr_19 [1/1] 0.00ns
.preheader.preheader:56  %dest_1_0_addr_19 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 19

ST_11: stg_166 [1/1] 2.39ns
.preheader.preheader:57  store float 0.000000e+00, float* %dest_1_0_addr_19, align 4

ST_11: dest_1_0_addr_20 [1/1] 0.00ns
.preheader.preheader:58  %dest_1_0_addr_20 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 20

ST_11: stg_168 [1/1] 2.39ns
.preheader.preheader:59  store float 0.000000e+00, float* %dest_1_0_addr_20, align 16

ST_11: dest_1_1_addr_15 [1/1] 0.00ns
.preheader.preheader:100  %dest_1_1_addr_15 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 15

ST_11: stg_170 [1/1] 2.39ns
.preheader.preheader:101  store float 0.000000e+00, float* %dest_1_1_addr_15, align 4

ST_11: dest_1_1_addr_16 [1/1] 0.00ns
.preheader.preheader:102  %dest_1_1_addr_16 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 16

ST_11: stg_172 [1/1] 2.39ns
.preheader.preheader:103  store float 0.000000e+00, float* %dest_1_1_addr_16, align 4

ST_11: dest_1_2_addr_15 [1/1] 0.00ns
.preheader.preheader:152  %dest_1_2_addr_15 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 15

ST_11: stg_174 [1/1] 2.39ns
.preheader.preheader:153  store float 0.000000e+00, float* %dest_1_2_addr_15, align 4

ST_11: dest_1_2_addr_16 [1/1] 0.00ns
.preheader.preheader:154  %dest_1_2_addr_16 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 16

ST_11: stg_176 [1/1] 2.39ns
.preheader.preheader:155  store float 0.000000e+00, float* %dest_1_2_addr_16, align 8

ST_11: dest_1_3_addr_15 [1/1] 0.00ns
.preheader.preheader:204  %dest_1_3_addr_15 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 15

ST_11: stg_178 [1/1] 2.39ns
.preheader.preheader:205  store float 0.000000e+00, float* %dest_1_3_addr_15, align 4

ST_11: dest_1_3_addr_16 [1/1] 0.00ns
.preheader.preheader:206  %dest_1_3_addr_16 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 16

ST_11: stg_180 [1/1] 2.39ns
.preheader.preheader:207  store float 0.000000e+00, float* %dest_1_3_addr_16, align 4


 <State 12>: 2.39ns
ST_12: dest_1_0_addr_21 [1/1] 0.00ns
.preheader.preheader:60  %dest_1_0_addr_21 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 21

ST_12: stg_182 [1/1] 2.39ns
.preheader.preheader:61  store float 0.000000e+00, float* %dest_1_0_addr_21, align 4

ST_12: dest_1_0_addr_22 [1/1] 0.00ns
.preheader.preheader:62  %dest_1_0_addr_22 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 22

ST_12: stg_184 [1/1] 2.39ns
.preheader.preheader:63  store float 0.000000e+00, float* %dest_1_0_addr_22, align 8

ST_12: tmp_4 [2/2] 0.00ns
.preheader.preheader:68  %tmp_4 = call fastcc i32 @worker_create_COO([2500 x float]* @matrix_1_0, [2500 x i5]* %row_1_0, [2500 x i7]* %col_1_0, [2500 x float]* %val_1_0) nounwind

ST_12: dest_1_1_addr_17 [1/1] 0.00ns
.preheader.preheader:104  %dest_1_1_addr_17 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 17

ST_12: stg_187 [1/1] 2.39ns
.preheader.preheader:105  store float 0.000000e+00, float* %dest_1_1_addr_17, align 4

ST_12: dest_1_1_addr_18 [1/1] 0.00ns
.preheader.preheader:106  %dest_1_1_addr_18 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 18

ST_12: stg_189 [1/1] 2.39ns
.preheader.preheader:107  store float 0.000000e+00, float* %dest_1_1_addr_18, align 4

ST_12: dest_1_2_addr_17 [1/1] 0.00ns
.preheader.preheader:156  %dest_1_2_addr_17 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 17

ST_12: stg_191 [1/1] 2.39ns
.preheader.preheader:157  store float 0.000000e+00, float* %dest_1_2_addr_17, align 4

ST_12: dest_1_2_addr_18 [1/1] 0.00ns
.preheader.preheader:158  %dest_1_2_addr_18 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 18

ST_12: stg_193 [1/1] 2.39ns
.preheader.preheader:159  store float 0.000000e+00, float* %dest_1_2_addr_18, align 8

ST_12: dest_1_3_addr_17 [1/1] 0.00ns
.preheader.preheader:208  %dest_1_3_addr_17 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 17

ST_12: stg_195 [1/1] 2.39ns
.preheader.preheader:209  store float 0.000000e+00, float* %dest_1_3_addr_17, align 4

ST_12: dest_1_3_addr_18 [1/1] 0.00ns
.preheader.preheader:210  %dest_1_3_addr_18 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 18

ST_12: stg_197 [1/1] 2.39ns
.preheader.preheader:211  store float 0.000000e+00, float* %dest_1_3_addr_18, align 4


 <State 13>: 2.39ns
ST_13: dest_1_0_addr_23 [1/1] 0.00ns
.preheader.preheader:64  %dest_1_0_addr_23 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 23

ST_13: stg_199 [1/1] 2.39ns
.preheader.preheader:65  store float 0.000000e+00, float* %dest_1_0_addr_23, align 4

ST_13: dest_1_0_addr_24 [1/1] 0.00ns
.preheader.preheader:66  %dest_1_0_addr_24 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 24

ST_13: stg_201 [1/1] 2.39ns
.preheader.preheader:67  store float 0.000000e+00, float* %dest_1_0_addr_24, align 16

ST_13: tmp_4 [1/2] 0.00ns
.preheader.preheader:68  %tmp_4 = call fastcc i32 @worker_create_COO([2500 x float]* @matrix_1_0, [2500 x i5]* %row_1_0, [2500 x i7]* %col_1_0, [2500 x float]* %val_1_0) nounwind

ST_13: dest_1_1_addr_19 [1/1] 0.00ns
.preheader.preheader:108  %dest_1_1_addr_19 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 19

ST_13: stg_204 [1/1] 2.39ns
.preheader.preheader:109  store float 0.000000e+00, float* %dest_1_1_addr_19, align 4

ST_13: dest_1_1_addr_20 [1/1] 0.00ns
.preheader.preheader:110  %dest_1_1_addr_20 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 20

ST_13: stg_206 [1/1] 2.39ns
.preheader.preheader:111  store float 0.000000e+00, float* %dest_1_1_addr_20, align 4

ST_13: dest_1_2_addr_19 [1/1] 0.00ns
.preheader.preheader:160  %dest_1_2_addr_19 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 19

ST_13: stg_208 [1/1] 2.39ns
.preheader.preheader:161  store float 0.000000e+00, float* %dest_1_2_addr_19, align 4

ST_13: dest_1_2_addr_20 [1/1] 0.00ns
.preheader.preheader:162  %dest_1_2_addr_20 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 20

ST_13: stg_210 [1/1] 2.39ns
.preheader.preheader:163  store float 0.000000e+00, float* %dest_1_2_addr_20, align 8

ST_13: dest_1_3_addr_19 [1/1] 0.00ns
.preheader.preheader:212  %dest_1_3_addr_19 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 19

ST_13: stg_212 [1/1] 2.39ns
.preheader.preheader:213  store float 0.000000e+00, float* %dest_1_3_addr_19, align 4

ST_13: dest_1_3_addr_20 [1/1] 0.00ns
.preheader.preheader:214  %dest_1_3_addr_20 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 20

ST_13: stg_214 [1/1] 2.39ns
.preheader.preheader:215  store float 0.000000e+00, float* %dest_1_3_addr_20, align 4


 <State 14>: 2.39ns
ST_14: stg_215 [2/2] 1.04ns
.preheader.preheader:69  call fastcc void @worker_COO_SpMV([2500 x i5]* %row_1_0, [2500 x i7]* %col_1_0, [2500 x float]* %val_1_0, [25 x float]* %dest_1_0, i32 %tmp_4) nounwind

ST_14: dest_1_1_addr_21 [1/1] 0.00ns
.preheader.preheader:112  %dest_1_1_addr_21 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 21

ST_14: stg_217 [1/1] 2.39ns
.preheader.preheader:113  store float 0.000000e+00, float* %dest_1_1_addr_21, align 4

ST_14: dest_1_1_addr_22 [1/1] 0.00ns
.preheader.preheader:114  %dest_1_1_addr_22 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 22

ST_14: stg_219 [1/1] 2.39ns
.preheader.preheader:115  store float 0.000000e+00, float* %dest_1_1_addr_22, align 4

ST_14: tmp_s [2/2] 0.00ns
.preheader.preheader:120  %tmp_s = call fastcc i32 @worker_create_COO([2500 x float]* @matrix_1_1, [2500 x i5]* %row_1_1, [2500 x i7]* %col_1_1, [2500 x float]* %val_1_1) nounwind

ST_14: dest_1_2_addr_21 [1/1] 0.00ns
.preheader.preheader:164  %dest_1_2_addr_21 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 21

ST_14: stg_222 [1/1] 2.39ns
.preheader.preheader:165  store float 0.000000e+00, float* %dest_1_2_addr_21, align 4

ST_14: dest_1_2_addr_22 [1/1] 0.00ns
.preheader.preheader:166  %dest_1_2_addr_22 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 22

ST_14: stg_224 [1/1] 2.39ns
.preheader.preheader:167  store float 0.000000e+00, float* %dest_1_2_addr_22, align 8

ST_14: tmp_1 [2/2] 0.00ns
.preheader.preheader:172  %tmp_1 = call fastcc i32 @worker_create_COO([2500 x float]* @matrix_1_2, [2500 x i5]* %row_1_2, [2500 x i7]* %col_1_2, [2500 x float]* %val_1_2) nounwind

ST_14: dest_1_3_addr_21 [1/1] 0.00ns
.preheader.preheader:216  %dest_1_3_addr_21 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 21

ST_14: stg_227 [1/1] 2.39ns
.preheader.preheader:217  store float 0.000000e+00, float* %dest_1_3_addr_21, align 4

ST_14: dest_1_3_addr_22 [1/1] 0.00ns
.preheader.preheader:218  %dest_1_3_addr_22 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 22

ST_14: stg_229 [1/1] 2.39ns
.preheader.preheader:219  store float 0.000000e+00, float* %dest_1_3_addr_22, align 4

ST_14: tmp_2 [2/2] 0.00ns
.preheader.preheader:224  %tmp_2 = call fastcc i32 @worker_create_COO([2500 x float]* @matrix_1_3, [2500 x i5]* %row_1_3, [2500 x i7]* %col_1_3, [2500 x float]* %val_1_3) nounwind


 <State 15>: 2.39ns
ST_15: stg_231 [1/2] 0.00ns
.preheader.preheader:69  call fastcc void @worker_COO_SpMV([2500 x i5]* %row_1_0, [2500 x i7]* %col_1_0, [2500 x float]* %val_1_0, [25 x float]* %dest_1_0, i32 %tmp_4) nounwind

ST_15: dest_1_1_addr_23 [1/1] 0.00ns
.preheader.preheader:116  %dest_1_1_addr_23 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 23

ST_15: stg_233 [1/1] 2.39ns
.preheader.preheader:117  store float 0.000000e+00, float* %dest_1_1_addr_23, align 4

ST_15: dest_1_1_addr_24 [1/1] 0.00ns
.preheader.preheader:118  %dest_1_1_addr_24 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 24

ST_15: stg_235 [1/1] 2.39ns
.preheader.preheader:119  store float 0.000000e+00, float* %dest_1_1_addr_24, align 4

ST_15: tmp_s [1/2] 0.00ns
.preheader.preheader:120  %tmp_s = call fastcc i32 @worker_create_COO([2500 x float]* @matrix_1_1, [2500 x i5]* %row_1_1, [2500 x i7]* %col_1_1, [2500 x float]* %val_1_1) nounwind

ST_15: dest_1_2_addr_23 [1/1] 0.00ns
.preheader.preheader:168  %dest_1_2_addr_23 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 23

ST_15: stg_238 [1/1] 2.39ns
.preheader.preheader:169  store float 0.000000e+00, float* %dest_1_2_addr_23, align 4

ST_15: dest_1_2_addr_24 [1/1] 0.00ns
.preheader.preheader:170  %dest_1_2_addr_24 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 24

ST_15: stg_240 [1/1] 2.39ns
.preheader.preheader:171  store float 0.000000e+00, float* %dest_1_2_addr_24, align 8

ST_15: tmp_1 [1/2] 0.00ns
.preheader.preheader:172  %tmp_1 = call fastcc i32 @worker_create_COO([2500 x float]* @matrix_1_2, [2500 x i5]* %row_1_2, [2500 x i7]* %col_1_2, [2500 x float]* %val_1_2) nounwind

ST_15: dest_1_3_addr_23 [1/1] 0.00ns
.preheader.preheader:220  %dest_1_3_addr_23 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 23

ST_15: stg_243 [1/1] 2.39ns
.preheader.preheader:221  store float 0.000000e+00, float* %dest_1_3_addr_23, align 4

ST_15: dest_1_3_addr_24 [1/1] 0.00ns
.preheader.preheader:222  %dest_1_3_addr_24 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 24

ST_15: stg_245 [1/1] 2.39ns
.preheader.preheader:223  store float 0.000000e+00, float* %dest_1_3_addr_24, align 4

ST_15: tmp_2 [1/2] 0.00ns
.preheader.preheader:224  %tmp_2 = call fastcc i32 @worker_create_COO([2500 x float]* @matrix_1_3, [2500 x i5]* %row_1_3, [2500 x i7]* %col_1_3, [2500 x float]* %val_1_3) nounwind


 <State 16>: 1.04ns
ST_16: stg_247 [2/2] 1.04ns
.preheader.preheader:121  call fastcc void @worker_COO_SpMV([2500 x i5]* %row_1_1, [2500 x i7]* %col_1_1, [2500 x float]* %val_1_1, [25 x float]* %dest_1_1, i32 %tmp_s) nounwind

ST_16: stg_248 [2/2] 1.04ns
.preheader.preheader:173  call fastcc void @worker_COO_SpMV([2500 x i5]* %row_1_2, [2500 x i7]* %col_1_2, [2500 x float]* %val_1_2, [25 x float]* %dest_1_2, i32 %tmp_1) nounwind

ST_16: stg_249 [2/2] 1.04ns
.preheader.preheader:225  call fastcc void @worker_COO_SpMV([2500 x i5]* %row_1_3, [2500 x i7]* %col_1_3, [2500 x float]* %val_1_3, [25 x float]* %dest_1_3, i32 %tmp_2) nounwind


 <State 17>: 1.57ns
ST_17: stg_250 [1/1] 0.00ns
.preheader.preheader:0  call void (...)* @_ssdm_op_SpecBitsMap([100 x float]* %dest) nounwind, !map !36

ST_17: stg_251 [1/1] 0.00ns
.preheader.preheader:1  call void (...)* @_ssdm_op_SpecTopModule([7 x i8]* @worker_str) nounwind

ST_17: stg_252 [1/2] 0.00ns
.preheader.preheader:121  call fastcc void @worker_COO_SpMV([2500 x i5]* %row_1_1, [2500 x i7]* %col_1_1, [2500 x float]* %val_1_1, [25 x float]* %dest_1_1, i32 %tmp_s) nounwind

ST_17: stg_253 [1/2] 0.00ns
.preheader.preheader:173  call fastcc void @worker_COO_SpMV([2500 x i5]* %row_1_2, [2500 x i7]* %col_1_2, [2500 x float]* %val_1_2, [25 x float]* %dest_1_2, i32 %tmp_1) nounwind

ST_17: stg_254 [1/2] 0.00ns
.preheader.preheader:225  call fastcc void @worker_COO_SpMV([2500 x i5]* %row_1_3, [2500 x i7]* %col_1_3, [2500 x float]* %val_1_3, [25 x float]* %dest_1_3, i32 %tmp_2) nounwind

ST_17: stg_255 [1/1] 1.57ns
.preheader.preheader:226  br label %0


 <State 18>: 5.67ns
ST_18: indvar_flatten [1/1] 0.00ns
:0  %indvar_flatten = phi i7 [ 0, %.preheader.preheader ], [ %indvar_flatten_next, %.preheader ]

ST_18: i1 [1/1] 0.00ns
:1  %i1 = phi i3 [ 0, %.preheader.preheader ], [ %start_mid2_v_v, %.preheader ]

ST_18: j2 [1/1] 0.00ns
:2  %j2 = phi i5 [ 0, %.preheader.preheader ], [ %j, %.preheader ]

ST_18: exitcond_flatten [1/1] 1.97ns
:3  %exitcond_flatten = icmp eq i7 %indvar_flatten, -28

ST_18: indvar_flatten_next [1/1] 1.72ns
:4  %indvar_flatten_next = add i7 %indvar_flatten, 1

ST_18: stg_261 [1/1] 0.00ns
:5  br i1 %exitcond_flatten, label %1, label %.preheader

ST_18: i [1/1] 0.80ns
.preheader:0  %i = add i3 1, %i1

ST_18: exitcond [1/1] 1.91ns
.preheader:3  %exitcond = icmp eq i5 %j2, -7

ST_18: j2_mid2 [1/1] 1.37ns
.preheader:4  %j2_mid2 = select i1 %exitcond, i5 0, i5 %j2

ST_18: start_mid2_v_v [1/1] 1.37ns
.preheader:5  %start_mid2_v_v = select i1 %exitcond, i3 %i, i3 %i1

ST_18: tmp_3 [1/1] 0.00ns
.preheader:8  %tmp_3 = trunc i3 %start_mid2_v_v to i2

ST_18: tmp_6 [1/1] 0.00ns
.preheader:13  %tmp_6 = zext i5 %j2_mid2 to i64

ST_18: dest_1_0_addr_25 [1/1] 0.00ns
.preheader:14  %dest_1_0_addr_25 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 %tmp_6

ST_18: dest_1_0_load [2/2] 2.39ns
.preheader:15  %dest_1_0_load = load float* %dest_1_0_addr_25, align 4

ST_18: dest_1_1_addr_25 [1/1] 0.00ns
.preheader:16  %dest_1_1_addr_25 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 %tmp_6

ST_18: dest_1_1_load [2/2] 2.39ns
.preheader:17  %dest_1_1_load = load float* %dest_1_1_addr_25, align 4

ST_18: dest_1_2_addr_25 [1/1] 0.00ns
.preheader:18  %dest_1_2_addr_25 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 %tmp_6

ST_18: dest_1_2_load [2/2] 2.39ns
.preheader:19  %dest_1_2_load = load float* %dest_1_2_addr_25, align 4

ST_18: dest_1_3_addr_25 [1/1] 0.00ns
.preheader:20  %dest_1_3_addr_25 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 %tmp_6

ST_18: dest_1_3_load [2/2] 2.39ns
.preheader:21  %dest_1_3_load = load float* %dest_1_3_addr_25, align 4

ST_18: j [1/1] 1.72ns
.preheader:28  %j = add i5 1, %j2_mid2


 <State 19>: 9.09ns
ST_19: stg_277 [1/1] 0.00ns
.preheader:1  call void (...)* @_ssdm_op_SpecLoopName([28 x i8]* @LOOP_DEST1_PE_LOOP_DEST1_ST_st)

ST_19: empty [1/1] 0.00ns
.preheader:2  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 100, i64 100, i64 100) nounwind

ST_19: start_mid2_v [1/1] 0.00ns
.preheader:6  %start_mid2_v = zext i3 %start_mid2_v_v to i7

ST_19: start_mid2 [1/1] 3.36ns
.preheader:7  %start_mid2 = mul i7 25, %start_mid2_v

ST_19: j2_cast2 [1/1] 0.00ns
.preheader:9  %j2_cast2 = zext i5 %j2_mid2 to i7

ST_19: stg_282 [1/1] 0.00ns
.preheader:10  call void (...)* @_ssdm_op_SpecLoopName([14 x i8]* @p_str6) nounwind

ST_19: tmp_5 [1/1] 0.00ns
.preheader:11  %tmp_5 = call i32 (...)* @_ssdm_op_SpecRegionBegin([14 x i8]* @p_str6) nounwind

ST_19: stg_284 [1/1] 0.00ns
.preheader:12  call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind

ST_19: dest_1_0_load [1/2] 2.39ns
.preheader:15  %dest_1_0_load = load float* %dest_1_0_addr_25, align 4

ST_19: dest_1_1_load [1/2] 2.39ns
.preheader:17  %dest_1_1_load = load float* %dest_1_1_addr_25, align 4

ST_19: dest_1_2_load [1/2] 2.39ns
.preheader:19  %dest_1_2_load = load float* %dest_1_2_addr_25, align 4

ST_19: dest_1_3_load [1/2] 2.39ns
.preheader:21  %dest_1_3_load = load float* %dest_1_3_addr_25, align 4

ST_19: tmp [1/1] 1.57ns
.preheader:22  %tmp = call float @_ssdm_op_Mux.ap_auto.4float.i2(float %dest_1_0_load, float %dest_1_1_load, float %dest_1_2_load, float %dest_1_3_load, i2 %tmp_3) nounwind

ST_19: tmp_7 [1/1] 3.02ns
.preheader:23  %tmp_7 = add i7 %start_mid2, %j2_cast2

ST_19: tmp_8 [1/1] 0.00ns
.preheader:24  %tmp_8 = zext i7 %tmp_7 to i64

ST_19: dest_addr [1/1] 0.00ns
.preheader:25  %dest_addr = getelementptr [100 x float]* %dest, i64 0, i64 %tmp_8

ST_19: stg_293 [1/1] 2.71ns
.preheader:26  store float %tmp, float* %dest_addr, align 4

ST_19: empty_5 [1/1] 0.00ns
.preheader:27  %empty_5 = call i32 (...)* @_ssdm_op_SpecRegionEnd([14 x i8]* @p_str6, i32 %tmp_5) nounwind

ST_19: stg_295 [1/1] 0.00ns
.preheader:29  br label %0


 <State 20>: 0.00ns
ST_20: stg_296 [1/1] 0.00ns
:0  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 19>: 9.09ns
The critical path consists of the following:
	'mul' operation ('start_mid2', COO_SpMV.cpp:163) (3.36 ns)
	'add' operation ('tmp_7', COO_SpMV.cpp:165) (3.02 ns)
	'getelementptr' operation ('dest_addr', COO_SpMV.cpp:165) (0 ns)
	'store' operation (COO_SpMV.cpp:165) of variable 'tmp', COO_SpMV.cpp:165 on array 'dest' (2.71 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
