

================================================================
== Vivado HLS Report for 'worker'
================================================================
* Date:           Sun Nov 20 12:28:56 2022

* Version:        2016.2 (Build 1577090 on Thu Jun 02 16:59:10 MDT 2016)
* Project:        COO_SpMV.prj
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.16|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-------+-------+-------+-------+---------+
    |    Latency    |    Interval   | Pipeline|
    |  min  |  max  |  min  |  max  |   Type  |
    +-------+-------+-------+-------+---------+
    |  27942|  27942|  27943|  27943|   none  |
    +-------+-------+-------+-------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------+-----+-----+----------+-----------+-----------+------+----------+
        |             |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        |  Loop Name  | min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------+-----+-----+----------+-----------+-----------+------+----------+
        |- Loop 1     |  100|  100|         1|          -|          -|   100|    no    |
        |- Loop 2     |  208|  208|        52|          -|          -|     4|    no    |
        | + Loop 2.1  |   50|   50|         2|          -|          -|    25|    no    |
        +-------------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 21
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (exitcond4)
	2  / (!exitcond4)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / (!exitcond1)
20 --> 
	19  / (exitcond)
	21  / (!exitcond)
21 --> 
	20  / true
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: stg_22 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecBitsMap([100 x float]* %dest) nounwind, !map !36

ST_1: stg_23 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecTopModule([7 x i8]* @worker_str) nounwind

ST_1: dest_1_0 [1/1] 0.00ns
:2  %dest_1_0 = alloca [25 x float], align 4

ST_1: dest_1_1 [1/1] 0.00ns
:3  %dest_1_1 = alloca [25 x float], align 4

ST_1: dest_1_2 [1/1] 0.00ns
:4  %dest_1_2 = alloca [25 x float], align 4

ST_1: dest_1_3 [1/1] 0.00ns
:5  %dest_1_3 = alloca [25 x float], align 4

ST_1: row_1_0 [1/1] 0.00ns
:6  %row_1_0 = alloca [2500 x i5], align 1

ST_1: row_1_1 [1/1] 0.00ns
:7  %row_1_1 = alloca [2500 x i5], align 1

ST_1: row_1_2 [1/1] 0.00ns
:8  %row_1_2 = alloca [2500 x i5], align 1

ST_1: row_1_3 [1/1] 0.00ns
:9  %row_1_3 = alloca [2500 x i5], align 1

ST_1: col_1_0 [1/1] 0.00ns
:10  %col_1_0 = alloca [2500 x i7], align 1

ST_1: col_1_1 [1/1] 0.00ns
:11  %col_1_1 = alloca [2500 x i7], align 1

ST_1: col_1_2 [1/1] 0.00ns
:12  %col_1_2 = alloca [2500 x i7], align 1

ST_1: col_1_3 [1/1] 0.00ns
:13  %col_1_3 = alloca [2500 x i7], align 1

ST_1: val_1_0 [1/1] 0.00ns
:14  %val_1_0 = alloca [2500 x float], align 4

ST_1: val_1_1 [1/1] 0.00ns
:15  %val_1_1 = alloca [2500 x float], align 4

ST_1: val_1_2 [1/1] 0.00ns
:16  %val_1_2 = alloca [2500 x float], align 4

ST_1: val_1_3 [1/1] 0.00ns
:17  %val_1_3 = alloca [2500 x float], align 4

ST_1: stg_40 [1/1] 1.57ns
:18  br label %1


 <State 2>: 2.71ns
ST_2: i [1/1] 0.00ns
:0  %i = phi i7 [ 0, %0 ], [ %i_1, %2 ]

ST_2: exitcond4 [1/1] 1.97ns
:1  %exitcond4 = icmp eq i7 %i, -28

ST_2: empty [1/1] 0.00ns
:2  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 100, i64 100, i64 100) nounwind

ST_2: i_1 [1/1] 1.72ns
:3  %i_1 = add i7 %i, 1

ST_2: stg_45 [1/1] 0.00ns
:4  br i1 %exitcond4, label %.preheader.preheader, label %2

ST_2: tmp [1/1] 0.00ns
:0  %tmp = zext i7 %i to i64

ST_2: dest_addr [1/1] 0.00ns
:1  %dest_addr = getelementptr [100 x float]* %dest, i64 0, i64 %tmp

ST_2: stg_48 [1/1] 2.71ns
:2  store float 0.000000e+00, float* %dest_addr, align 4

ST_2: stg_49 [1/1] 0.00ns
:3  br label %1

ST_2: dest_1_0_addr [1/1] 0.00ns
.preheader.preheader:0  %dest_1_0_addr = getelementptr [25 x float]* %dest_1_0, i64 0, i64 0

ST_2: stg_51 [1/1] 2.39ns
.preheader.preheader:1  store float 0.000000e+00, float* %dest_1_0_addr, align 16


 <State 3>: 2.39ns
ST_3: dest_1_0_addr_1 [1/1] 0.00ns
.preheader.preheader:2  %dest_1_0_addr_1 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 1

ST_3: stg_53 [1/1] 2.39ns
.preheader.preheader:3  store float 0.000000e+00, float* %dest_1_0_addr_1, align 4

ST_3: dest_1_0_addr_2 [1/1] 0.00ns
.preheader.preheader:4  %dest_1_0_addr_2 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 2

ST_3: stg_55 [1/1] 2.39ns
.preheader.preheader:5  store float 0.000000e+00, float* %dest_1_0_addr_2, align 8


 <State 4>: 2.39ns
ST_4: dest_1_0_addr_3 [1/1] 0.00ns
.preheader.preheader:6  %dest_1_0_addr_3 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 3

ST_4: stg_57 [1/1] 2.39ns
.preheader.preheader:7  store float 0.000000e+00, float* %dest_1_0_addr_3, align 4

ST_4: dest_1_0_addr_4 [1/1] 0.00ns
.preheader.preheader:8  %dest_1_0_addr_4 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 4

ST_4: stg_59 [1/1] 2.39ns
.preheader.preheader:9  store float 0.000000e+00, float* %dest_1_0_addr_4, align 16

ST_4: dest_1_1_addr [1/1] 0.00ns
.preheader.preheader:52  %dest_1_1_addr = getelementptr [25 x float]* %dest_1_1, i64 0, i64 0

ST_4: stg_61 [1/1] 2.39ns
.preheader.preheader:53  store float 0.000000e+00, float* %dest_1_1_addr, align 4

ST_4: dest_1_2_addr [1/1] 0.00ns
.preheader.preheader:104  %dest_1_2_addr = getelementptr [25 x float]* %dest_1_2, i64 0, i64 0

ST_4: stg_63 [1/1] 2.39ns
.preheader.preheader:105  store float 0.000000e+00, float* %dest_1_2_addr, align 8

ST_4: dest_1_3_addr [1/1] 0.00ns
.preheader.preheader:156  %dest_1_3_addr = getelementptr [25 x float]* %dest_1_3, i64 0, i64 0

ST_4: stg_65 [1/1] 2.39ns
.preheader.preheader:157  store float 0.000000e+00, float* %dest_1_3_addr, align 4


 <State 5>: 2.39ns
ST_5: dest_1_0_addr_5 [1/1] 0.00ns
.preheader.preheader:10  %dest_1_0_addr_5 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 5

ST_5: stg_67 [1/1] 2.39ns
.preheader.preheader:11  store float 0.000000e+00, float* %dest_1_0_addr_5, align 4

ST_5: dest_1_0_addr_6 [1/1] 0.00ns
.preheader.preheader:12  %dest_1_0_addr_6 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 6

ST_5: stg_69 [1/1] 2.39ns
.preheader.preheader:13  store float 0.000000e+00, float* %dest_1_0_addr_6, align 8

ST_5: dest_1_1_addr_1 [1/1] 0.00ns
.preheader.preheader:54  %dest_1_1_addr_1 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 1

ST_5: stg_71 [1/1] 2.39ns
.preheader.preheader:55  store float 0.000000e+00, float* %dest_1_1_addr_1, align 4

ST_5: dest_1_1_addr_2 [1/1] 0.00ns
.preheader.preheader:56  %dest_1_1_addr_2 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 2

ST_5: stg_73 [1/1] 2.39ns
.preheader.preheader:57  store float 0.000000e+00, float* %dest_1_1_addr_2, align 4

ST_5: dest_1_2_addr_1 [1/1] 0.00ns
.preheader.preheader:106  %dest_1_2_addr_1 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 1

ST_5: stg_75 [1/1] 2.39ns
.preheader.preheader:107  store float 0.000000e+00, float* %dest_1_2_addr_1, align 4

ST_5: dest_1_2_addr_2 [1/1] 0.00ns
.preheader.preheader:108  %dest_1_2_addr_2 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 2

ST_5: stg_77 [1/1] 2.39ns
.preheader.preheader:109  store float 0.000000e+00, float* %dest_1_2_addr_2, align 8

ST_5: dest_1_3_addr_1 [1/1] 0.00ns
.preheader.preheader:158  %dest_1_3_addr_1 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 1

ST_5: stg_79 [1/1] 2.39ns
.preheader.preheader:159  store float 0.000000e+00, float* %dest_1_3_addr_1, align 4

ST_5: dest_1_3_addr_2 [1/1] 0.00ns
.preheader.preheader:160  %dest_1_3_addr_2 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 2

ST_5: stg_81 [1/1] 2.39ns
.preheader.preheader:161  store float 0.000000e+00, float* %dest_1_3_addr_2, align 4


 <State 6>: 2.39ns
ST_6: dest_1_0_addr_7 [1/1] 0.00ns
.preheader.preheader:14  %dest_1_0_addr_7 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 7

ST_6: stg_83 [1/1] 2.39ns
.preheader.preheader:15  store float 0.000000e+00, float* %dest_1_0_addr_7, align 4

ST_6: dest_1_0_addr_8 [1/1] 0.00ns
.preheader.preheader:16  %dest_1_0_addr_8 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 8

ST_6: stg_85 [1/1] 2.39ns
.preheader.preheader:17  store float 0.000000e+00, float* %dest_1_0_addr_8, align 16

ST_6: dest_1_1_addr_3 [1/1] 0.00ns
.preheader.preheader:58  %dest_1_1_addr_3 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 3

ST_6: stg_87 [1/1] 2.39ns
.preheader.preheader:59  store float 0.000000e+00, float* %dest_1_1_addr_3, align 4

ST_6: dest_1_1_addr_4 [1/1] 0.00ns
.preheader.preheader:60  %dest_1_1_addr_4 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 4

ST_6: stg_89 [1/1] 2.39ns
.preheader.preheader:61  store float 0.000000e+00, float* %dest_1_1_addr_4, align 4

ST_6: dest_1_2_addr_3 [1/1] 0.00ns
.preheader.preheader:110  %dest_1_2_addr_3 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 3

ST_6: stg_91 [1/1] 2.39ns
.preheader.preheader:111  store float 0.000000e+00, float* %dest_1_2_addr_3, align 4

ST_6: dest_1_2_addr_4 [1/1] 0.00ns
.preheader.preheader:112  %dest_1_2_addr_4 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 4

ST_6: stg_93 [1/1] 2.39ns
.preheader.preheader:113  store float 0.000000e+00, float* %dest_1_2_addr_4, align 8

ST_6: dest_1_3_addr_3 [1/1] 0.00ns
.preheader.preheader:162  %dest_1_3_addr_3 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 3

ST_6: stg_95 [1/1] 2.39ns
.preheader.preheader:163  store float 0.000000e+00, float* %dest_1_3_addr_3, align 4

ST_6: dest_1_3_addr_4 [1/1] 0.00ns
.preheader.preheader:164  %dest_1_3_addr_4 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 4

ST_6: stg_97 [1/1] 2.39ns
.preheader.preheader:165  store float 0.000000e+00, float* %dest_1_3_addr_4, align 4


 <State 7>: 2.39ns
ST_7: dest_1_0_addr_9 [1/1] 0.00ns
.preheader.preheader:18  %dest_1_0_addr_9 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 9

ST_7: stg_99 [1/1] 2.39ns
.preheader.preheader:19  store float 0.000000e+00, float* %dest_1_0_addr_9, align 4

ST_7: dest_1_0_addr_10 [1/1] 0.00ns
.preheader.preheader:20  %dest_1_0_addr_10 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 10

ST_7: stg_101 [1/1] 2.39ns
.preheader.preheader:21  store float 0.000000e+00, float* %dest_1_0_addr_10, align 8

ST_7: dest_1_1_addr_5 [1/1] 0.00ns
.preheader.preheader:62  %dest_1_1_addr_5 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 5

ST_7: stg_103 [1/1] 2.39ns
.preheader.preheader:63  store float 0.000000e+00, float* %dest_1_1_addr_5, align 4

ST_7: dest_1_1_addr_6 [1/1] 0.00ns
.preheader.preheader:64  %dest_1_1_addr_6 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 6

ST_7: stg_105 [1/1] 2.39ns
.preheader.preheader:65  store float 0.000000e+00, float* %dest_1_1_addr_6, align 4

ST_7: dest_1_2_addr_5 [1/1] 0.00ns
.preheader.preheader:114  %dest_1_2_addr_5 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 5

ST_7: stg_107 [1/1] 2.39ns
.preheader.preheader:115  store float 0.000000e+00, float* %dest_1_2_addr_5, align 4

ST_7: dest_1_2_addr_6 [1/1] 0.00ns
.preheader.preheader:116  %dest_1_2_addr_6 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 6

ST_7: stg_109 [1/1] 2.39ns
.preheader.preheader:117  store float 0.000000e+00, float* %dest_1_2_addr_6, align 8

ST_7: dest_1_3_addr_5 [1/1] 0.00ns
.preheader.preheader:166  %dest_1_3_addr_5 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 5

ST_7: stg_111 [1/1] 2.39ns
.preheader.preheader:167  store float 0.000000e+00, float* %dest_1_3_addr_5, align 4

ST_7: dest_1_3_addr_6 [1/1] 0.00ns
.preheader.preheader:168  %dest_1_3_addr_6 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 6

ST_7: stg_113 [1/1] 2.39ns
.preheader.preheader:169  store float 0.000000e+00, float* %dest_1_3_addr_6, align 4


 <State 8>: 2.39ns
ST_8: dest_1_0_addr_11 [1/1] 0.00ns
.preheader.preheader:22  %dest_1_0_addr_11 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 11

ST_8: stg_115 [1/1] 2.39ns
.preheader.preheader:23  store float 0.000000e+00, float* %dest_1_0_addr_11, align 4

ST_8: dest_1_0_addr_12 [1/1] 0.00ns
.preheader.preheader:24  %dest_1_0_addr_12 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 12

ST_8: stg_117 [1/1] 2.39ns
.preheader.preheader:25  store float 0.000000e+00, float* %dest_1_0_addr_12, align 16

ST_8: dest_1_1_addr_7 [1/1] 0.00ns
.preheader.preheader:66  %dest_1_1_addr_7 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 7

ST_8: stg_119 [1/1] 2.39ns
.preheader.preheader:67  store float 0.000000e+00, float* %dest_1_1_addr_7, align 4

ST_8: dest_1_1_addr_8 [1/1] 0.00ns
.preheader.preheader:68  %dest_1_1_addr_8 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 8

ST_8: stg_121 [1/1] 2.39ns
.preheader.preheader:69  store float 0.000000e+00, float* %dest_1_1_addr_8, align 4

ST_8: dest_1_2_addr_7 [1/1] 0.00ns
.preheader.preheader:118  %dest_1_2_addr_7 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 7

ST_8: stg_123 [1/1] 2.39ns
.preheader.preheader:119  store float 0.000000e+00, float* %dest_1_2_addr_7, align 4

ST_8: dest_1_2_addr_8 [1/1] 0.00ns
.preheader.preheader:120  %dest_1_2_addr_8 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 8

ST_8: stg_125 [1/1] 2.39ns
.preheader.preheader:121  store float 0.000000e+00, float* %dest_1_2_addr_8, align 8

ST_8: dest_1_3_addr_7 [1/1] 0.00ns
.preheader.preheader:170  %dest_1_3_addr_7 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 7

ST_8: stg_127 [1/1] 2.39ns
.preheader.preheader:171  store float 0.000000e+00, float* %dest_1_3_addr_7, align 4

ST_8: dest_1_3_addr_8 [1/1] 0.00ns
.preheader.preheader:172  %dest_1_3_addr_8 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 8

ST_8: stg_129 [1/1] 2.39ns
.preheader.preheader:173  store float 0.000000e+00, float* %dest_1_3_addr_8, align 4


 <State 9>: 2.39ns
ST_9: dest_1_0_addr_13 [1/1] 0.00ns
.preheader.preheader:26  %dest_1_0_addr_13 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 13

ST_9: stg_131 [1/1] 2.39ns
.preheader.preheader:27  store float 0.000000e+00, float* %dest_1_0_addr_13, align 4

ST_9: dest_1_0_addr_14 [1/1] 0.00ns
.preheader.preheader:28  %dest_1_0_addr_14 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 14

ST_9: stg_133 [1/1] 2.39ns
.preheader.preheader:29  store float 0.000000e+00, float* %dest_1_0_addr_14, align 8

ST_9: dest_1_1_addr_9 [1/1] 0.00ns
.preheader.preheader:70  %dest_1_1_addr_9 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 9

ST_9: stg_135 [1/1] 2.39ns
.preheader.preheader:71  store float 0.000000e+00, float* %dest_1_1_addr_9, align 4

ST_9: dest_1_1_addr_10 [1/1] 0.00ns
.preheader.preheader:72  %dest_1_1_addr_10 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 10

ST_9: stg_137 [1/1] 2.39ns
.preheader.preheader:73  store float 0.000000e+00, float* %dest_1_1_addr_10, align 4

ST_9: dest_1_2_addr_9 [1/1] 0.00ns
.preheader.preheader:122  %dest_1_2_addr_9 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 9

ST_9: stg_139 [1/1] 2.39ns
.preheader.preheader:123  store float 0.000000e+00, float* %dest_1_2_addr_9, align 4

ST_9: dest_1_2_addr_10 [1/1] 0.00ns
.preheader.preheader:124  %dest_1_2_addr_10 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 10

ST_9: stg_141 [1/1] 2.39ns
.preheader.preheader:125  store float 0.000000e+00, float* %dest_1_2_addr_10, align 8

ST_9: dest_1_3_addr_9 [1/1] 0.00ns
.preheader.preheader:174  %dest_1_3_addr_9 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 9

ST_9: stg_143 [1/1] 2.39ns
.preheader.preheader:175  store float 0.000000e+00, float* %dest_1_3_addr_9, align 4

ST_9: dest_1_3_addr_10 [1/1] 0.00ns
.preheader.preheader:176  %dest_1_3_addr_10 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 10

ST_9: stg_145 [1/1] 2.39ns
.preheader.preheader:177  store float 0.000000e+00, float* %dest_1_3_addr_10, align 4


 <State 10>: 2.39ns
ST_10: dest_1_0_addr_15 [1/1] 0.00ns
.preheader.preheader:30  %dest_1_0_addr_15 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 15

ST_10: stg_147 [1/1] 2.39ns
.preheader.preheader:31  store float 0.000000e+00, float* %dest_1_0_addr_15, align 4

ST_10: dest_1_0_addr_16 [1/1] 0.00ns
.preheader.preheader:32  %dest_1_0_addr_16 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 16

ST_10: stg_149 [1/1] 2.39ns
.preheader.preheader:33  store float 0.000000e+00, float* %dest_1_0_addr_16, align 16

ST_10: dest_1_1_addr_11 [1/1] 0.00ns
.preheader.preheader:74  %dest_1_1_addr_11 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 11

ST_10: stg_151 [1/1] 2.39ns
.preheader.preheader:75  store float 0.000000e+00, float* %dest_1_1_addr_11, align 4

ST_10: dest_1_1_addr_12 [1/1] 0.00ns
.preheader.preheader:76  %dest_1_1_addr_12 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 12

ST_10: stg_153 [1/1] 2.39ns
.preheader.preheader:77  store float 0.000000e+00, float* %dest_1_1_addr_12, align 4

ST_10: dest_1_2_addr_11 [1/1] 0.00ns
.preheader.preheader:126  %dest_1_2_addr_11 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 11

ST_10: stg_155 [1/1] 2.39ns
.preheader.preheader:127  store float 0.000000e+00, float* %dest_1_2_addr_11, align 4

ST_10: dest_1_2_addr_12 [1/1] 0.00ns
.preheader.preheader:128  %dest_1_2_addr_12 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 12

ST_10: stg_157 [1/1] 2.39ns
.preheader.preheader:129  store float 0.000000e+00, float* %dest_1_2_addr_12, align 8

ST_10: dest_1_3_addr_11 [1/1] 0.00ns
.preheader.preheader:178  %dest_1_3_addr_11 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 11

ST_10: stg_159 [1/1] 2.39ns
.preheader.preheader:179  store float 0.000000e+00, float* %dest_1_3_addr_11, align 4

ST_10: dest_1_3_addr_12 [1/1] 0.00ns
.preheader.preheader:180  %dest_1_3_addr_12 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 12

ST_10: stg_161 [1/1] 2.39ns
.preheader.preheader:181  store float 0.000000e+00, float* %dest_1_3_addr_12, align 4


 <State 11>: 2.39ns
ST_11: dest_1_0_addr_17 [1/1] 0.00ns
.preheader.preheader:34  %dest_1_0_addr_17 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 17

ST_11: stg_163 [1/1] 2.39ns
.preheader.preheader:35  store float 0.000000e+00, float* %dest_1_0_addr_17, align 4

ST_11: dest_1_0_addr_18 [1/1] 0.00ns
.preheader.preheader:36  %dest_1_0_addr_18 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 18

ST_11: stg_165 [1/1] 2.39ns
.preheader.preheader:37  store float 0.000000e+00, float* %dest_1_0_addr_18, align 8

ST_11: dest_1_1_addr_13 [1/1] 0.00ns
.preheader.preheader:78  %dest_1_1_addr_13 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 13

ST_11: stg_167 [1/1] 2.39ns
.preheader.preheader:79  store float 0.000000e+00, float* %dest_1_1_addr_13, align 4

ST_11: dest_1_1_addr_14 [1/1] 0.00ns
.preheader.preheader:80  %dest_1_1_addr_14 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 14

ST_11: stg_169 [1/1] 2.39ns
.preheader.preheader:81  store float 0.000000e+00, float* %dest_1_1_addr_14, align 4

ST_11: dest_1_2_addr_13 [1/1] 0.00ns
.preheader.preheader:130  %dest_1_2_addr_13 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 13

ST_11: stg_171 [1/1] 2.39ns
.preheader.preheader:131  store float 0.000000e+00, float* %dest_1_2_addr_13, align 4

ST_11: dest_1_2_addr_14 [1/1] 0.00ns
.preheader.preheader:132  %dest_1_2_addr_14 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 14

ST_11: stg_173 [1/1] 2.39ns
.preheader.preheader:133  store float 0.000000e+00, float* %dest_1_2_addr_14, align 8

ST_11: dest_1_3_addr_13 [1/1] 0.00ns
.preheader.preheader:182  %dest_1_3_addr_13 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 13

ST_11: stg_175 [1/1] 2.39ns
.preheader.preheader:183  store float 0.000000e+00, float* %dest_1_3_addr_13, align 4

ST_11: dest_1_3_addr_14 [1/1] 0.00ns
.preheader.preheader:184  %dest_1_3_addr_14 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 14

ST_11: stg_177 [1/1] 2.39ns
.preheader.preheader:185  store float 0.000000e+00, float* %dest_1_3_addr_14, align 4


 <State 12>: 2.39ns
ST_12: dest_1_0_addr_19 [1/1] 0.00ns
.preheader.preheader:38  %dest_1_0_addr_19 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 19

ST_12: stg_179 [1/1] 2.39ns
.preheader.preheader:39  store float 0.000000e+00, float* %dest_1_0_addr_19, align 4

ST_12: dest_1_0_addr_20 [1/1] 0.00ns
.preheader.preheader:40  %dest_1_0_addr_20 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 20

ST_12: stg_181 [1/1] 2.39ns
.preheader.preheader:41  store float 0.000000e+00, float* %dest_1_0_addr_20, align 16

ST_12: dest_1_1_addr_15 [1/1] 0.00ns
.preheader.preheader:82  %dest_1_1_addr_15 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 15

ST_12: stg_183 [1/1] 2.39ns
.preheader.preheader:83  store float 0.000000e+00, float* %dest_1_1_addr_15, align 4

ST_12: dest_1_1_addr_16 [1/1] 0.00ns
.preheader.preheader:84  %dest_1_1_addr_16 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 16

ST_12: stg_185 [1/1] 2.39ns
.preheader.preheader:85  store float 0.000000e+00, float* %dest_1_1_addr_16, align 4

ST_12: dest_1_2_addr_15 [1/1] 0.00ns
.preheader.preheader:134  %dest_1_2_addr_15 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 15

ST_12: stg_187 [1/1] 2.39ns
.preheader.preheader:135  store float 0.000000e+00, float* %dest_1_2_addr_15, align 4

ST_12: dest_1_2_addr_16 [1/1] 0.00ns
.preheader.preheader:136  %dest_1_2_addr_16 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 16

ST_12: stg_189 [1/1] 2.39ns
.preheader.preheader:137  store float 0.000000e+00, float* %dest_1_2_addr_16, align 8

ST_12: dest_1_3_addr_15 [1/1] 0.00ns
.preheader.preheader:186  %dest_1_3_addr_15 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 15

ST_12: stg_191 [1/1] 2.39ns
.preheader.preheader:187  store float 0.000000e+00, float* %dest_1_3_addr_15, align 4

ST_12: dest_1_3_addr_16 [1/1] 0.00ns
.preheader.preheader:188  %dest_1_3_addr_16 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 16

ST_12: stg_193 [1/1] 2.39ns
.preheader.preheader:189  store float 0.000000e+00, float* %dest_1_3_addr_16, align 4


 <State 13>: 2.39ns
ST_13: dest_1_0_addr_21 [1/1] 0.00ns
.preheader.preheader:42  %dest_1_0_addr_21 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 21

ST_13: stg_195 [1/1] 2.39ns
.preheader.preheader:43  store float 0.000000e+00, float* %dest_1_0_addr_21, align 4

ST_13: dest_1_0_addr_22 [1/1] 0.00ns
.preheader.preheader:44  %dest_1_0_addr_22 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 22

ST_13: stg_197 [1/1] 2.39ns
.preheader.preheader:45  store float 0.000000e+00, float* %dest_1_0_addr_22, align 8

ST_13: tmp_1 [2/2] 0.00ns
.preheader.preheader:50  %tmp_1 = call fastcc i32 @worker_create_COO([2500 x float]* @matrix_1_0, [2500 x i5]* %row_1_0, [2500 x i7]* %col_1_0, [2500 x float]* %val_1_0) nounwind

ST_13: dest_1_1_addr_17 [1/1] 0.00ns
.preheader.preheader:86  %dest_1_1_addr_17 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 17

ST_13: stg_200 [1/1] 2.39ns
.preheader.preheader:87  store float 0.000000e+00, float* %dest_1_1_addr_17, align 4

ST_13: dest_1_1_addr_18 [1/1] 0.00ns
.preheader.preheader:88  %dest_1_1_addr_18 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 18

ST_13: stg_202 [1/1] 2.39ns
.preheader.preheader:89  store float 0.000000e+00, float* %dest_1_1_addr_18, align 4

ST_13: dest_1_2_addr_17 [1/1] 0.00ns
.preheader.preheader:138  %dest_1_2_addr_17 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 17

ST_13: stg_204 [1/1] 2.39ns
.preheader.preheader:139  store float 0.000000e+00, float* %dest_1_2_addr_17, align 4

ST_13: dest_1_2_addr_18 [1/1] 0.00ns
.preheader.preheader:140  %dest_1_2_addr_18 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 18

ST_13: stg_206 [1/1] 2.39ns
.preheader.preheader:141  store float 0.000000e+00, float* %dest_1_2_addr_18, align 8

ST_13: dest_1_3_addr_17 [1/1] 0.00ns
.preheader.preheader:190  %dest_1_3_addr_17 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 17

ST_13: stg_208 [1/1] 2.39ns
.preheader.preheader:191  store float 0.000000e+00, float* %dest_1_3_addr_17, align 4

ST_13: dest_1_3_addr_18 [1/1] 0.00ns
.preheader.preheader:192  %dest_1_3_addr_18 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 18

ST_13: stg_210 [1/1] 2.39ns
.preheader.preheader:193  store float 0.000000e+00, float* %dest_1_3_addr_18, align 4


 <State 14>: 2.39ns
ST_14: dest_1_0_addr_23 [1/1] 0.00ns
.preheader.preheader:46  %dest_1_0_addr_23 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 23

ST_14: stg_212 [1/1] 2.39ns
.preheader.preheader:47  store float 0.000000e+00, float* %dest_1_0_addr_23, align 4

ST_14: dest_1_0_addr_24 [1/1] 0.00ns
.preheader.preheader:48  %dest_1_0_addr_24 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 24

ST_14: stg_214 [1/1] 2.39ns
.preheader.preheader:49  store float 0.000000e+00, float* %dest_1_0_addr_24, align 16

ST_14: tmp_1 [1/2] 0.00ns
.preheader.preheader:50  %tmp_1 = call fastcc i32 @worker_create_COO([2500 x float]* @matrix_1_0, [2500 x i5]* %row_1_0, [2500 x i7]* %col_1_0, [2500 x float]* %val_1_0) nounwind

ST_14: dest_1_1_addr_19 [1/1] 0.00ns
.preheader.preheader:90  %dest_1_1_addr_19 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 19

ST_14: stg_217 [1/1] 2.39ns
.preheader.preheader:91  store float 0.000000e+00, float* %dest_1_1_addr_19, align 4

ST_14: dest_1_1_addr_20 [1/1] 0.00ns
.preheader.preheader:92  %dest_1_1_addr_20 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 20

ST_14: stg_219 [1/1] 2.39ns
.preheader.preheader:93  store float 0.000000e+00, float* %dest_1_1_addr_20, align 4

ST_14: dest_1_2_addr_19 [1/1] 0.00ns
.preheader.preheader:142  %dest_1_2_addr_19 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 19

ST_14: stg_221 [1/1] 2.39ns
.preheader.preheader:143  store float 0.000000e+00, float* %dest_1_2_addr_19, align 4

ST_14: dest_1_2_addr_20 [1/1] 0.00ns
.preheader.preheader:144  %dest_1_2_addr_20 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 20

ST_14: stg_223 [1/1] 2.39ns
.preheader.preheader:145  store float 0.000000e+00, float* %dest_1_2_addr_20, align 8

ST_14: dest_1_3_addr_19 [1/1] 0.00ns
.preheader.preheader:194  %dest_1_3_addr_19 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 19

ST_14: stg_225 [1/1] 2.39ns
.preheader.preheader:195  store float 0.000000e+00, float* %dest_1_3_addr_19, align 4

ST_14: dest_1_3_addr_20 [1/1] 0.00ns
.preheader.preheader:196  %dest_1_3_addr_20 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 20

ST_14: stg_227 [1/1] 2.39ns
.preheader.preheader:197  store float 0.000000e+00, float* %dest_1_3_addr_20, align 4


 <State 15>: 2.39ns
ST_15: stg_228 [2/2] 1.04ns
.preheader.preheader:51  call fastcc void @worker_COO_SpMV([2500 x i5]* %row_1_0, [2500 x i7]* %col_1_0, [2500 x float]* %val_1_0, [25 x float]* %dest_1_0, i32 %tmp_1) nounwind

ST_15: dest_1_1_addr_21 [1/1] 0.00ns
.preheader.preheader:94  %dest_1_1_addr_21 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 21

ST_15: stg_230 [1/1] 2.39ns
.preheader.preheader:95  store float 0.000000e+00, float* %dest_1_1_addr_21, align 4

ST_15: dest_1_1_addr_22 [1/1] 0.00ns
.preheader.preheader:96  %dest_1_1_addr_22 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 22

ST_15: stg_232 [1/1] 2.39ns
.preheader.preheader:97  store float 0.000000e+00, float* %dest_1_1_addr_22, align 4

ST_15: tmp_2 [2/2] 0.00ns
.preheader.preheader:102  %tmp_2 = call fastcc i32 @worker_create_COO([2500 x float]* @matrix_1_1, [2500 x i5]* %row_1_1, [2500 x i7]* %col_1_1, [2500 x float]* %val_1_1) nounwind

ST_15: dest_1_2_addr_21 [1/1] 0.00ns
.preheader.preheader:146  %dest_1_2_addr_21 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 21

ST_15: stg_235 [1/1] 2.39ns
.preheader.preheader:147  store float 0.000000e+00, float* %dest_1_2_addr_21, align 4

ST_15: dest_1_2_addr_22 [1/1] 0.00ns
.preheader.preheader:148  %dest_1_2_addr_22 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 22

ST_15: stg_237 [1/1] 2.39ns
.preheader.preheader:149  store float 0.000000e+00, float* %dest_1_2_addr_22, align 8

ST_15: tmp_3 [2/2] 0.00ns
.preheader.preheader:154  %tmp_3 = call fastcc i32 @worker_create_COO([2500 x float]* @matrix_1_2, [2500 x i5]* %row_1_2, [2500 x i7]* %col_1_2, [2500 x float]* %val_1_2) nounwind

ST_15: dest_1_3_addr_21 [1/1] 0.00ns
.preheader.preheader:198  %dest_1_3_addr_21 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 21

ST_15: stg_240 [1/1] 2.39ns
.preheader.preheader:199  store float 0.000000e+00, float* %dest_1_3_addr_21, align 4

ST_15: dest_1_3_addr_22 [1/1] 0.00ns
.preheader.preheader:200  %dest_1_3_addr_22 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 22

ST_15: stg_242 [1/1] 2.39ns
.preheader.preheader:201  store float 0.000000e+00, float* %dest_1_3_addr_22, align 4

ST_15: tmp_4 [2/2] 0.00ns
.preheader.preheader:206  %tmp_4 = call fastcc i32 @worker_create_COO([2500 x float]* @matrix_1_3, [2500 x i5]* %row_1_3, [2500 x i7]* %col_1_3, [2500 x float]* %val_1_3) nounwind


 <State 16>: 2.39ns
ST_16: stg_244 [1/2] 0.00ns
.preheader.preheader:51  call fastcc void @worker_COO_SpMV([2500 x i5]* %row_1_0, [2500 x i7]* %col_1_0, [2500 x float]* %val_1_0, [25 x float]* %dest_1_0, i32 %tmp_1) nounwind

ST_16: dest_1_1_addr_23 [1/1] 0.00ns
.preheader.preheader:98  %dest_1_1_addr_23 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 23

ST_16: stg_246 [1/1] 2.39ns
.preheader.preheader:99  store float 0.000000e+00, float* %dest_1_1_addr_23, align 4

ST_16: dest_1_1_addr_24 [1/1] 0.00ns
.preheader.preheader:100  %dest_1_1_addr_24 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 24

ST_16: stg_248 [1/1] 2.39ns
.preheader.preheader:101  store float 0.000000e+00, float* %dest_1_1_addr_24, align 4

ST_16: tmp_2 [1/2] 0.00ns
.preheader.preheader:102  %tmp_2 = call fastcc i32 @worker_create_COO([2500 x float]* @matrix_1_1, [2500 x i5]* %row_1_1, [2500 x i7]* %col_1_1, [2500 x float]* %val_1_1) nounwind

ST_16: dest_1_2_addr_23 [1/1] 0.00ns
.preheader.preheader:150  %dest_1_2_addr_23 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 23

ST_16: stg_251 [1/1] 2.39ns
.preheader.preheader:151  store float 0.000000e+00, float* %dest_1_2_addr_23, align 4

ST_16: dest_1_2_addr_24 [1/1] 0.00ns
.preheader.preheader:152  %dest_1_2_addr_24 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 24

ST_16: stg_253 [1/1] 2.39ns
.preheader.preheader:153  store float 0.000000e+00, float* %dest_1_2_addr_24, align 8

ST_16: tmp_3 [1/2] 0.00ns
.preheader.preheader:154  %tmp_3 = call fastcc i32 @worker_create_COO([2500 x float]* @matrix_1_2, [2500 x i5]* %row_1_2, [2500 x i7]* %col_1_2, [2500 x float]* %val_1_2) nounwind

ST_16: dest_1_3_addr_23 [1/1] 0.00ns
.preheader.preheader:202  %dest_1_3_addr_23 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 23

ST_16: stg_256 [1/1] 2.39ns
.preheader.preheader:203  store float 0.000000e+00, float* %dest_1_3_addr_23, align 4

ST_16: dest_1_3_addr_24 [1/1] 0.00ns
.preheader.preheader:204  %dest_1_3_addr_24 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 24

ST_16: stg_258 [1/1] 2.39ns
.preheader.preheader:205  store float 0.000000e+00, float* %dest_1_3_addr_24, align 4

ST_16: tmp_4 [1/2] 0.00ns
.preheader.preheader:206  %tmp_4 = call fastcc i32 @worker_create_COO([2500 x float]* @matrix_1_3, [2500 x i5]* %row_1_3, [2500 x i7]* %col_1_3, [2500 x float]* %val_1_3) nounwind


 <State 17>: 1.04ns
ST_17: stg_260 [2/2] 1.04ns
.preheader.preheader:103  call fastcc void @worker_COO_SpMV([2500 x i5]* %row_1_1, [2500 x i7]* %col_1_1, [2500 x float]* %val_1_1, [25 x float]* %dest_1_1, i32 %tmp_2) nounwind

ST_17: stg_261 [2/2] 1.04ns
.preheader.preheader:155  call fastcc void @worker_COO_SpMV([2500 x i5]* %row_1_2, [2500 x i7]* %col_1_2, [2500 x float]* %val_1_2, [25 x float]* %dest_1_2, i32 %tmp_3) nounwind

ST_17: stg_262 [2/2] 1.04ns
.preheader.preheader:207  call fastcc void @worker_COO_SpMV([2500 x i5]* %row_1_3, [2500 x i7]* %col_1_3, [2500 x float]* %val_1_3, [25 x float]* %dest_1_3, i32 %tmp_4) nounwind


 <State 18>: 1.57ns
ST_18: stg_263 [1/2] 0.00ns
.preheader.preheader:103  call fastcc void @worker_COO_SpMV([2500 x i5]* %row_1_1, [2500 x i7]* %col_1_1, [2500 x float]* %val_1_1, [25 x float]* %dest_1_1, i32 %tmp_2) nounwind

ST_18: stg_264 [1/2] 0.00ns
.preheader.preheader:155  call fastcc void @worker_COO_SpMV([2500 x i5]* %row_1_2, [2500 x i7]* %col_1_2, [2500 x float]* %val_1_2, [25 x float]* %dest_1_2, i32 %tmp_3) nounwind

ST_18: stg_265 [1/2] 0.00ns
.preheader.preheader:207  call fastcc void @worker_COO_SpMV([2500 x i5]* %row_1_3, [2500 x i7]* %col_1_3, [2500 x float]* %val_1_3, [25 x float]* %dest_1_3, i32 %tmp_4) nounwind

ST_18: stg_266 [1/1] 1.57ns
.preheader.preheader:208  br label %.preheader


 <State 19>: 1.72ns
ST_19: i2 [1/1] 0.00ns
.preheader:0  %i2 = phi i3 [ 0, %.preheader.preheader ], [ %i_2, %4 ]

ST_19: phi_mul [1/1] 0.00ns
.preheader:1  %phi_mul = phi i7 [ 0, %.preheader.preheader ], [ %next_mul, %4 ]

ST_19: next_mul [1/1] 1.72ns
.preheader:2  %next_mul = add i7 %phi_mul, 25

ST_19: exitcond1 [1/1] 1.62ns
.preheader:3  %exitcond1 = icmp eq i3 %i2, -4

ST_19: empty_5 [1/1] 0.00ns
.preheader:4  %empty_5 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4) nounwind

ST_19: i_2 [1/1] 0.80ns
.preheader:5  %i_2 = add i3 %i2, 1

ST_19: stg_273 [1/1] 0.00ns
.preheader:6  br i1 %exitcond1, label %6, label %3

ST_19: tmp_6 [1/1] 0.00ns
:0  %tmp_6 = trunc i3 %i2 to i2

ST_19: stg_275 [1/1] 1.57ns
:1  br label %4

ST_19: stg_276 [1/1] 0.00ns
:0  ret void


 <State 20>: 2.39ns
ST_20: j3 [1/1] 0.00ns
:0  %j3 = phi i5 [ 0, %3 ], [ %j, %5 ]

ST_20: j3_cast2 [1/1] 0.00ns
:1  %j3_cast2 = zext i5 %j3 to i7

ST_20: exitcond [1/1] 1.91ns
:2  %exitcond = icmp eq i5 %j3, -7

ST_20: empty_6 [1/1] 0.00ns
:3  %empty_6 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 25, i64 25, i64 25) nounwind

ST_20: j [1/1] 1.72ns
:4  %j = add i5 %j3, 1

ST_20: stg_282 [1/1] 0.00ns
:5  br i1 %exitcond, label %.preheader, label %5

ST_20: tmp_8 [1/1] 0.00ns
:0  %tmp_8 = zext i5 %j3 to i64

ST_20: dest_1_0_addr_25 [1/1] 0.00ns
:1  %dest_1_0_addr_25 = getelementptr [25 x float]* %dest_1_0, i64 0, i64 %tmp_8

ST_20: dest_1_0_load [2/2] 2.39ns
:2  %dest_1_0_load = load float* %dest_1_0_addr_25, align 4

ST_20: dest_1_1_addr_25 [1/1] 0.00ns
:3  %dest_1_1_addr_25 = getelementptr [25 x float]* %dest_1_1, i64 0, i64 %tmp_8

ST_20: dest_1_1_load [2/2] 2.39ns
:4  %dest_1_1_load = load float* %dest_1_1_addr_25, align 4

ST_20: dest_1_2_addr_25 [1/1] 0.00ns
:5  %dest_1_2_addr_25 = getelementptr [25 x float]* %dest_1_2, i64 0, i64 %tmp_8

ST_20: dest_1_2_load [2/2] 2.39ns
:6  %dest_1_2_load = load float* %dest_1_2_addr_25, align 4

ST_20: dest_1_3_addr_25 [1/1] 0.00ns
:7  %dest_1_3_addr_25 = getelementptr [25 x float]* %dest_1_3, i64 0, i64 %tmp_8

ST_20: dest_1_3_load [2/2] 2.39ns
:8  %dest_1_3_load = load float* %dest_1_3_addr_25, align 4

ST_20: tmp_9 [1/1] 1.72ns
:10  %tmp_9 = add i7 %phi_mul, %j3_cast2


 <State 21>: 6.67ns
ST_21: dest_1_0_load [1/2] 2.39ns
:2  %dest_1_0_load = load float* %dest_1_0_addr_25, align 4

ST_21: dest_1_1_load [1/2] 2.39ns
:4  %dest_1_1_load = load float* %dest_1_1_addr_25, align 4

ST_21: dest_1_2_load [1/2] 2.39ns
:6  %dest_1_2_load = load float* %dest_1_2_addr_25, align 4

ST_21: dest_1_3_load [1/2] 2.39ns
:8  %dest_1_3_load = load float* %dest_1_3_addr_25, align 4

ST_21: tmp_5 [1/1] 1.57ns
:9  %tmp_5 = call float @_ssdm_op_Mux.ap_auto.4float.i2(float %dest_1_0_load, float %dest_1_1_load, float %dest_1_2_load, float %dest_1_3_load, i2 %tmp_6) nounwind

ST_21: tmp_s [1/1] 0.00ns
:11  %tmp_s = zext i7 %tmp_9 to i64

ST_21: dest_addr_1 [1/1] 0.00ns
:12  %dest_addr_1 = getelementptr [100 x float]* %dest, i64 0, i64 %tmp_s

ST_21: stg_300 [1/1] 2.71ns
:13  store float %tmp_5, float* %dest_addr_1, align 4

ST_21: stg_301 [1/1] 0.00ns
:14  br label %4



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 No timing violations. 


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
