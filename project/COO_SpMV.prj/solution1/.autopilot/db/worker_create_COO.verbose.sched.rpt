

================================================================
== Vivado HLS Report for 'worker_create_COO'
================================================================
* Date:           Mon Nov 21 17:02:19 2022

* Version:        2016.2 (Build 1577090 on Thu Jun 02 16:59:10 MDT 2016)
* Project:        COO_SpMV.prj
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.16|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +------+-------+------+-------+---------+
    |    Latency   |   Interval   | Pipeline|
    |  min |  max  |  min |  max  |   Type  |
    +------+-------+------+-------+---------+
    |  2628|  10128|  2628|  10128|   none  |
    +------+-------+------+-------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------+------+------+----------+-----------+-----------+------+----------+
        |             |   Latency   | Iteration|  Initiation Interval  | Trip |          |
        |  Loop Name  |  min |  max |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------+------+------+----------+-----------+-----------+------+----------+
        |- Loop 1     |    50|    50|         2|          -|          -|    25|    no    |
        |- Loop 2     |  2500|  2500|         1|          -|          -|  2500|    no    |
        |- Loop 3     |    75|  7575|  3 ~ 303 |          -|          -|    25|    no    |
        | + Loop 3.1  |   300|   300|         3|          -|          -|   100|    no    |
        +-------------+------+------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 9
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!exitcond3)
	4  / (exitcond3)
3 --> 
	2  / true
4 --> 
	4  / (!exitcond2)
	5  / (exitcond2)
5 --> 
	6  / (!exitcond1)
6 --> 
	7  / true
7 --> 
	8  / (tmp_9 & !exitcond)
	5  / (!tmp_9) | (exitcond)
8 --> 
	9  / true
9 --> 
	7  / true
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: stg_10 [1/1] 1.57ns
:0  br label %1


 <State 2>: 3.48ns
ST_2: i [1/1] 0.00ns
:0  %i = phi i5 [ 0, %0 ], [ %i_1, %branch8 ]

ST_2: sep [1/1] 0.00ns
:1  %sep = phi i32 [ 0, %0 ], [ %p_sep, %branch8 ]

ST_2: exitcond3 [1/1] 1.91ns
:2  %exitcond3 = icmp eq i5 %i, -7

ST_2: empty [1/1] 0.00ns
:3  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 25, i64 25, i64 25)

ST_2: i_1 [1/1] 1.72ns
:4  %i_1 = add i5 %i, 1

ST_2: stg_16 [1/1] 1.57ns
:5  br i1 %exitcond3, label %.preheader5, label %branch8

ST_2: tmp [1/1] 0.00ns
branch8:0  %tmp = zext i5 %i to i64

ST_2: nnz_addr [1/1] 0.00ns
branch8:1  %nnz_addr = getelementptr [25 x i32]* %nnz, i64 0, i64 %tmp

ST_2: nnz_load [2/2] 2.39ns
branch8:2  %nnz_load = load i32* %nnz_addr, align 4


 <State 3>: 6.28ns
ST_3: nnz_load [1/2] 2.39ns
branch8:2  %nnz_load = load i32* %nnz_addr, align 4

ST_3: tmp_s [1/1] 2.52ns
branch8:3  %tmp_s = icmp sgt i32 %nnz_load, 0

ST_3: sep_1 [1/1] 2.44ns
branch8:4  %sep_1 = add nsw i32 %sep, 1

ST_3: p_sep [1/1] 1.37ns
branch8:5  %p_sep = select i1 %tmp_s, i32 %sep_1, i32 %sep

ST_3: stg_24 [1/1] 0.00ns
branch8:6  br label %1


 <State 4>: 2.71ns
ST_4: i1 [1/1] 0.00ns
.preheader5:0  %i1 = phi i12 [ %i_2, %branch2 ], [ 0, %1 ]

ST_4: exitcond2 [1/1] 2.14ns
.preheader5:1  %exitcond2 = icmp eq i12 %i1, -1596

ST_4: empty_14 [1/1] 0.00ns
.preheader5:2  %empty_14 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2500, i64 2500, i64 2500)

ST_4: i_2 [1/1] 1.84ns
.preheader5:3  %i_2 = add i12 %i1, 1

ST_4: stg_29 [1/1] 0.00ns
.preheader5:4  br i1 %exitcond2, label %.preheader4.preheader, label %branch2

ST_4: tmp_6 [1/1] 0.00ns
branch2:0  %tmp_6 = zext i12 %i1 to i64

ST_4: row_addr [1/1] 0.00ns
branch2:1  %row_addr = getelementptr [2500 x i6]* %row, i64 0, i64 %tmp_6

ST_4: stg_32 [1/1] 2.71ns
branch2:2  store i6 -1, i6* %row_addr, align 1

ST_4: col_addr [1/1] 0.00ns
branch2:3  %col_addr = getelementptr [2500 x i8]* %col, i64 0, i64 %tmp_6

ST_4: stg_34 [1/1] 2.71ns
branch2:4  store i8 -1, i8* %col_addr, align 1

ST_4: val_addr [1/1] 0.00ns
branch2:5  %val_addr = getelementptr [2500 x float]* %val_r, i64 0, i64 %tmp_6

ST_4: stg_36 [1/1] 2.71ns
branch2:6  store float 0.000000e+00, float* %val_addr, align 4

ST_4: stg_37 [1/1] 0.00ns
branch2:7  br label %.preheader5

ST_4: cur_ind [1/1] 0.00ns
.preheader4.preheader:0  %cur_ind = alloca i32

ST_4: max_ind [1/1] 0.00ns
.preheader4.preheader:1  %max_ind = alloca i32

ST_4: stg_40 [1/1] 1.57ns
.preheader4.preheader:2  store i32 0, i32* %max_ind

ST_4: stg_41 [1/1] 1.57ns
.preheader4.preheader:3  store i32 0, i32* %cur_ind

ST_4: stg_42 [1/1] 1.57ns
.preheader4.preheader:4  br label %.preheader4


 <State 5>: 2.44ns
ST_5: i2 [1/1] 0.00ns
.preheader4:0  %i2 = phi i5 [ 0, %.preheader4.preheader ], [ %i_3, %.preheader4.backedge ]

ST_5: phi_mul [1/1] 0.00ns
.preheader4:1  %phi_mul = phi i12 [ 0, %.preheader4.preheader ], [ %next_mul, %.preheader4.backedge ]

ST_5: cur_ind_1 [1/1] 0.00ns
.preheader4:2  %cur_ind_1 = load i32* %cur_ind

ST_5: next_mul [1/1] 1.84ns
.preheader4:3  %next_mul = add i12 %phi_mul, 100

ST_5: exitcond1 [1/1] 1.91ns
.preheader4:4  %exitcond1 = icmp eq i5 %i2, -7

ST_5: empty_15 [1/1] 0.00ns
.preheader4:5  %empty_15 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 25, i64 25, i64 25)

ST_5: i_3 [1/1] 1.72ns
.preheader4:6  %i_3 = add i5 %i2, 1

ST_5: stg_50 [1/1] 0.00ns
.preheader4:7  br i1 %exitcond1, label %3, label %branch7

ST_5: tmp_8 [1/1] 0.00ns
branch7:0  %tmp_8 = zext i5 %i2 to i64

ST_5: nnz_addr_1 [1/1] 0.00ns
branch7:1  %nnz_addr_1 = getelementptr [25 x i32]* %nnz, i64 0, i64 %tmp_8

ST_5: nnz_load_1 [2/2] 2.39ns
branch7:2  %nnz_load_1 = load i32* %nnz_addr_1, align 4

ST_5: max_ind_load [1/1] 0.00ns
:0  %max_ind_load = load i32* %max_ind

ST_5: tmp_7 [1/1] 2.44ns
:1  %tmp_7 = add nsw i32 %max_ind_load, 1

ST_5: stg_56 [1/1] 0.00ns
:2  ret i32 %tmp_7


 <State 6>: 4.91ns
ST_6: nnz_load_1 [1/2] 2.39ns
branch7:2  %nnz_load_1 = load i32* %nnz_addr_1, align 4

ST_6: tmp_9 [1/1] 2.52ns
branch7:3  %tmp_9 = icmp sgt i32 %nnz_load_1, 0

ST_6: stg_59 [1/1] 0.00ns
branch7:4  br i1 %tmp_9, label %.preheader.preheader, label %.preheader4.backedge

ST_6: i2_cast2_cast [1/1] 0.00ns
.preheader.preheader:0  %i2_cast2_cast = zext i5 %i2 to i6

ST_6: stg_61 [1/1] 1.57ns
.preheader.preheader:1  br label %.preheader


 <State 7>: 4.55ns
ST_7: max_ind_1 [1/1] 0.00ns
.preheader:0  %max_ind_1 = phi i32 [ %cur_ind_1, %.preheader.preheader ], [ %cur_ind_2, %branch1 ], [ %max_ind_1, %branch0 ]

ST_7: j [1/1] 0.00ns
.preheader:1  %j = phi i7 [ 0, %.preheader.preheader ], [ %j_4, %branch1 ], [ %j_4, %branch0 ]

ST_7: exitcond [1/1] 1.97ns
.preheader:2  %exitcond = icmp eq i7 %j, -28

ST_7: empty_16 [1/1] 0.00ns
.preheader:3  %empty_16 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 100, i64 100, i64 100)

ST_7: j_4 [1/1] 1.72ns
.preheader:4  %j_4 = add i7 %j, 1

ST_7: stg_67 [1/1] 0.00ns
.preheader:5  br i1 %exitcond, label %2, label %branch0

ST_7: tmp_1_cast [1/1] 0.00ns
branch0:0  %tmp_1_cast = zext i7 %j to i12

ST_7: tmp_5 [1/1] 1.84ns
branch0:1  %tmp_5 = add i12 %phi_mul, %tmp_1_cast

ST_7: tmp_5_cast [1/1] 0.00ns
branch0:2  %tmp_5_cast = zext i12 %tmp_5 to i64

ST_7: input_addr [1/1] 0.00ns
branch0:3  %input_addr = getelementptr [2500 x float]* %input_r, i64 0, i64 %tmp_5_cast

ST_7: input_load [2/2] 2.71ns
branch0:4  %input_load = load float* %input_addr, align 4

ST_7: start [1/1] 2.44ns
:0  %start = add nsw i32 %cur_ind_1, 1

ST_7: stg_74 [1/1] 1.57ns
:1  store i32 %start, i32* %cur_ind

ST_7: stg_75 [1/1] 0.00ns
:2  br label %.preheader4.backedge

ST_7: stg_76 [1/1] 0.00ns
.preheader4.backedge:0  br label %.preheader4


 <State 8>: 2.71ns
ST_8: input_load [1/2] 2.71ns
branch0:4  %input_load = load float* %input_addr, align 4


 <State 9>: 8.16ns
ST_9: input_load_to_int [1/1] 0.00ns
branch0:5  %input_load_to_int = bitcast float %input_load to i32

ST_9: tmp_12 [1/1] 0.00ns
branch0:6  %tmp_12 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %input_load_to_int, i32 23, i32 30)

ST_9: tmp_11 [1/1] 0.00ns
branch0:7  %tmp_11 = trunc i32 %input_load_to_int to i23

ST_9: notlhs [1/1] 2.00ns
branch0:8  %notlhs = icmp ne i8 %tmp_12, -1

ST_9: notrhs [1/1] 2.39ns
branch0:9  %notrhs = icmp eq i23 %tmp_11, 0

ST_9: tmp_13 [1/1] 0.00ns (grouped into LUT with out node tmp_15)
branch0:10  %tmp_13 = or i1 %notrhs, %notlhs

ST_9: tmp_14 [1/1] 6.79ns
branch0:11  %tmp_14 = fcmp oeq float %input_load, 0.000000e+00

ST_9: tmp_15 [1/1] 1.37ns (out node of the LUT)
branch0:12  %tmp_15 = and i1 %tmp_13, %tmp_14

ST_9: stg_86 [1/1] 0.00ns
branch0:13  br i1 %tmp_15, label %.preheader, label %branch1

ST_9: max_ind_load_1 [1/1] 0.00ns
branch1:0  %max_ind_load_1 = load i32* %max_ind

ST_9: tmp_3 [1/1] 0.00ns
branch1:1  %tmp_3 = sext i32 %max_ind_1 to i64

ST_9: row_addr_1 [1/1] 0.00ns
branch1:2  %row_addr_1 = getelementptr [2500 x i6]* %row, i64 0, i64 %tmp_3

ST_9: stg_90 [1/1] 2.71ns
branch1:3  store i6 %i2_cast2_cast, i6* %row_addr_1, align 1

ST_9: col_addr_1 [1/1] 0.00ns
branch1:4  %col_addr_1 = getelementptr [2500 x i8]* %col, i64 0, i64 %tmp_3

ST_9: j_cast1_cast [1/1] 0.00ns
branch1:5  %j_cast1_cast = zext i7 %j to i8

ST_9: stg_93 [1/1] 2.71ns
branch1:6  store i8 %j_cast1_cast, i8* %col_addr_1, align 1

ST_9: val_addr_1 [1/1] 0.00ns
branch1:7  %val_addr_1 = getelementptr [2500 x float]* %val_r, i64 0, i64 %tmp_3

ST_9: stg_95 [1/1] 2.71ns
branch1:8  store float %input_load, float* %val_addr_1, align 4

ST_9: tmp_4 [1/1] 2.52ns
branch1:9  %tmp_4 = icmp sgt i32 %max_ind_1, %max_ind_load_1

ST_9: cur_ind_0_max_ind_1 [1/1] 1.37ns
branch1:10  %cur_ind_0_max_ind_1 = select i1 %tmp_4, i32 %max_ind_1, i32 %max_ind_load_1

ST_9: cur_ind_2 [1/1] 2.44ns
branch1:11  %cur_ind_2 = add nsw i32 %max_ind_1, %sep

ST_9: stg_99 [1/1] 1.57ns
branch1:12  store i32 %cur_ind_0_max_ind_1, i32* %max_ind

ST_9: stg_100 [1/1] 0.00ns
branch1:13  br label %.preheader



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 No timing violations. 


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
