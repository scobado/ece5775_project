

================================================================
== Vivado HLS Report for 'worker_create_COO'
================================================================
* Date:           Sun Nov 20 12:38:16 2022

* Version:        2016.2 (Build 1577090 on Thu Jun 02 16:59:10 MDT 2016)
* Project:        COO_SpMV.prj
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.16|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-------+-------+-------+-------+---------+
    |    Latency    |    Interval   | Pipeline|
    |  min  |  max  |  min  |  max  |   Type  |
    +-------+-------+-------+-------+---------+
    |  12552|  12552|  12552|  12552|   none  |
    +-------+-------+-------+-------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------+------+------+----------+-----------+-----------+------+----------+
        |             |   Latency   | Iteration|  Initiation Interval  | Trip |          |
        |  Loop Name  |  min |  max |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------+------+------+----------+-----------+-----------+------+----------+
        |- Loop 1     |  7550|  7550|       302|          -|          -|    25|    no    |
        | + Loop 1.1  |   300|   300|         3|          -|          -|   100|    no    |
        |- Loop 2     |  5000|  5000|         2|          -|          -|  2500|    no    |
        +-------------+------+------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 7
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!exitcond2)
	6  / (exitcond2)
3 --> 
	2  / (exitcond1)
	4  / (!exitcond1)
4 --> 
	5  / true
5 --> 
	3  / true
6 --> 
	7  / (!exitcond)
7 --> 
	6  / true
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: counter [1/1] 0.00ns
:0  %counter = alloca i32

ST_1: temp_row [1/1] 0.00ns
:1  %temp_row = alloca [2500 x i5], align 1

ST_1: temp_col [1/1] 0.00ns
:2  %temp_col = alloca [2500 x i7], align 1

ST_1: temp_val [1/1] 0.00ns
:3  %temp_val = alloca [2500 x float], align 16

ST_1: stg_12 [1/1] 1.57ns
:4  store i32 0, i32* %counter

ST_1: stg_13 [1/1] 1.57ns
:5  br label %.loopexit


 <State 2>: 3.48ns
ST_2: i [1/1] 0.00ns
.loopexit:0  %i = phi i5 [ 0, %0 ], [ %i_2, %.preheader3 ]

ST_2: phi_mul [1/1] 0.00ns
.loopexit:1  %phi_mul = phi i12 [ 0, %0 ], [ %next_mul, %.preheader3 ]

ST_2: next_mul [1/1] 1.84ns
.loopexit:2  %next_mul = add i12 %phi_mul, 100

ST_2: exitcond2 [1/1] 1.91ns
.loopexit:3  %exitcond2 = icmp eq i5 %i, -7

ST_2: empty [1/1] 0.00ns
.loopexit:4  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 25, i64 25, i64 25)

ST_2: i_2 [1/1] 1.72ns
.loopexit:5  %i_2 = add i5 %i, 1

ST_2: stg_20 [1/1] 1.57ns
.loopexit:6  br i1 %exitcond2, label %.preheader.preheader, label %.preheader3

ST_2: cur_ind_1 [1/1] 0.00ns
.preheader.preheader:0  %cur_ind_1 = alloca i32

ST_2: cur_ind [1/1] 0.00ns
.preheader.preheader:1  %cur_ind = alloca i32

ST_2: stg_23 [1/1] 1.57ns
.preheader.preheader:2  store i32 0, i32* %cur_ind

ST_2: stg_24 [1/1] 1.57ns
.preheader.preheader:3  store i32 1, i32* %cur_ind_1

ST_2: stg_25 [1/1] 1.57ns
.preheader.preheader:4  br label %.preheader


 <State 3>: 4.55ns
ST_3: j [1/1] 0.00ns
.preheader3:0  %j = phi i7 [ %j_1, %.preheader3.backedge ], [ 0, %.loopexit ]

ST_3: exitcond1 [1/1] 1.97ns
.preheader3:1  %exitcond1 = icmp eq i7 %j, -28

ST_3: empty_6 [1/1] 0.00ns
.preheader3:2  %empty_6 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 100, i64 100, i64 100)

ST_3: j_1 [1/1] 1.72ns
.preheader3:3  %j_1 = add i7 %j, 1

ST_3: stg_30 [1/1] 0.00ns
.preheader3:4  br i1 %exitcond1, label %.loopexit, label %branch0

ST_3: tmp_1_cast [1/1] 0.00ns
branch0:0  %tmp_1_cast = zext i7 %j to i12

ST_3: tmp_1 [1/1] 1.84ns
branch0:1  %tmp_1 = add i12 %phi_mul, %tmp_1_cast

ST_3: tmp_11_cast [1/1] 0.00ns
branch0:2  %tmp_11_cast = zext i12 %tmp_1 to i64

ST_3: input_addr [1/1] 0.00ns
branch0:3  %input_addr = getelementptr [2500 x float]* %input_r, i64 0, i64 %tmp_11_cast

ST_3: input_load [2/2] 2.71ns
branch0:4  %input_load = load float* %input_addr, align 4


 <State 4>: 2.71ns
ST_4: input_load [1/2] 2.71ns
branch0:4  %input_load = load float* %input_addr, align 4


 <State 5>: 8.16ns
ST_5: input_load_to_int [1/1] 0.00ns
branch0:5  %input_load_to_int = bitcast float %input_load to i32

ST_5: tmp [1/1] 0.00ns
branch0:6  %tmp = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %input_load_to_int, i32 23, i32 30)

ST_5: tmp_10 [1/1] 0.00ns
branch0:7  %tmp_10 = trunc i32 %input_load_to_int to i23

ST_5: notlhs [1/1] 2.00ns
branch0:8  %notlhs = icmp ne i8 %tmp, -1

ST_5: notrhs [1/1] 2.39ns
branch0:9  %notrhs = icmp eq i23 %tmp_10, 0

ST_5: tmp_7 [1/1] 0.00ns (grouped into LUT with out node tmp_9)
branch0:10  %tmp_7 = or i1 %notrhs, %notlhs

ST_5: tmp_8 [1/1] 6.79ns
branch0:11  %tmp_8 = fcmp oeq float %input_load, 0.000000e+00

ST_5: tmp_9 [1/1] 1.37ns (out node of the LUT)
branch0:12  %tmp_9 = and i1 %tmp_7, %tmp_8

ST_5: stg_45 [1/1] 0.00ns
branch0:13  br i1 %tmp_9, label %.preheader3.backedge, label %1

ST_5: counter_load_2 [1/1] 0.00ns
:0  %counter_load_2 = load i32* %counter

ST_5: tmp_6 [1/1] 0.00ns
:1  %tmp_6 = sext i32 %counter_load_2 to i64

ST_5: temp_row_addr_1 [1/1] 0.00ns
:2  %temp_row_addr_1 = getelementptr [2500 x i5]* %temp_row, i64 0, i64 %tmp_6

ST_5: stg_49 [1/1] 2.71ns
:3  store i5 %i, i5* %temp_row_addr_1, align 1

ST_5: temp_col_addr_1 [1/1] 0.00ns
:4  %temp_col_addr_1 = getelementptr [2500 x i7]* %temp_col, i64 0, i64 %tmp_6

ST_5: stg_51 [1/1] 2.71ns
:5  store i7 %j, i7* %temp_col_addr_1, align 1

ST_5: temp_val_addr_1 [1/1] 0.00ns
:6  %temp_val_addr_1 = getelementptr inbounds [2500 x float]* %temp_val, i64 0, i64 %tmp_6

ST_5: stg_53 [1/1] 2.71ns
:7  store float %input_load, float* %temp_val_addr_1, align 4

ST_5: counter_1 [1/1] 2.44ns
:8  %counter_1 = add nsw i32 %counter_load_2, 1

ST_5: stg_55 [1/1] 1.57ns
:9  store i32 %counter_1, i32* %counter

ST_5: stg_56 [1/1] 0.00ns
:10  br label %.preheader3.backedge

ST_5: stg_57 [1/1] 0.00ns
.preheader3.backedge:0  br label %.preheader3


 <State 6>: 2.71ns
ST_6: i1 [1/1] 0.00ns
.preheader:0  %i1 = phi i12 [ 0, %.preheader.preheader ], [ %i_1, %.preheader.backedge ]

ST_6: i1_cast1 [1/1] 0.00ns
.preheader:1  %i1_cast1 = zext i12 %i1 to i32

ST_6: exitcond [1/1] 2.14ns
.preheader:2  %exitcond = icmp eq i12 %i1, -1596

ST_6: empty_7 [1/1] 0.00ns
.preheader:3  %empty_7 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2500, i64 2500, i64 2500)

ST_6: i_1 [1/1] 1.84ns
.preheader:4  %i_1 = add i12 %i1, 1

ST_6: stg_63 [1/1] 0.00ns
.preheader:5  br i1 %exitcond, label %3, label %2

ST_6: counter_load [1/1] 0.00ns
:0  %counter_load = load i32* %counter

ST_6: tmp_s [1/1] 2.52ns
:1  %tmp_s = icmp slt i32 %i1_cast1, %counter_load

ST_6: stg_66 [1/1] 0.00ns
:2  br i1 %tmp_s, label %branch1, label %.preheader.backedge

ST_6: tmp_3 [1/1] 0.00ns
branch1:2  %tmp_3 = zext i12 %i1 to i64

ST_6: temp_row_addr [1/1] 0.00ns
branch1:3  %temp_row_addr = getelementptr [2500 x i5]* %temp_row, i64 0, i64 %tmp_3

ST_6: temp_row_load [2/2] 2.71ns
branch1:4  %temp_row_load = load i5* %temp_row_addr, align 1

ST_6: temp_col_addr [1/1] 0.00ns
branch1:8  %temp_col_addr = getelementptr [2500 x i7]* %temp_col, i64 0, i64 %tmp_3

ST_6: temp_col_load [2/2] 2.71ns
branch1:9  %temp_col_load = load i7* %temp_col_addr, align 1

ST_6: temp_val_addr [1/1] 0.00ns
branch1:12  %temp_val_addr = getelementptr inbounds [2500 x float]* %temp_val, i64 0, i64 %tmp_3

ST_6: temp_val_load [2/2] 2.71ns
branch1:13  %temp_val_load = load float* %temp_val_addr, align 4

ST_6: counter_load_1 [1/1] 0.00ns
:0  %counter_load_1 = load i32* %counter

ST_6: stg_75 [1/1] 0.00ns
:1  ret i32 %counter_load_1


 <State 7>: 7.90ns
ST_7: cur_ind_1_load [1/1] 0.00ns
branch1:0  %cur_ind_1_load = load i32* %cur_ind_1

ST_7: cur_ind_load [1/1] 0.00ns
branch1:1  %cur_ind_load = load i32* %cur_ind

ST_7: temp_row_load [1/2] 2.71ns
branch1:4  %temp_row_load = load i5* %temp_row_addr, align 1

ST_7: tmp_4 [1/1] 0.00ns
branch1:5  %tmp_4 = sext i32 %cur_ind_load to i64

ST_7: row_addr [1/1] 0.00ns
branch1:6  %row_addr = getelementptr [2500 x i5]* %row, i64 0, i64 %tmp_4

ST_7: stg_81 [1/1] 2.71ns
branch1:7  store i5 %temp_row_load, i5* %row_addr, align 1

ST_7: temp_col_load [1/2] 2.71ns
branch1:9  %temp_col_load = load i7* %temp_col_addr, align 1

ST_7: col_addr [1/1] 0.00ns
branch1:10  %col_addr = getelementptr [2500 x i7]* %col, i64 0, i64 %tmp_4

ST_7: stg_84 [1/1] 2.71ns
branch1:11  store i7 %temp_col_load, i7* %col_addr, align 1

ST_7: temp_val_load [1/2] 2.71ns
branch1:13  %temp_val_load = load float* %temp_val_addr, align 4

ST_7: val_addr [1/1] 0.00ns
branch1:14  %val_addr = getelementptr [2500 x float]* %val_r, i64 0, i64 %tmp_4

ST_7: stg_87 [1/1] 2.71ns
branch1:15  store float %temp_val_load, float* %val_addr, align 4

ST_7: cur_ind_2 [1/1] 2.44ns
branch1:16  %cur_ind_2 = add nsw i32 %cur_ind_load, 8

ST_7: tmp_5 [1/1] 2.52ns
branch1:17  %tmp_5 = icmp slt i32 %cur_ind_2, %counter_load

ST_7: start [1/1] 2.44ns
branch1:18  %start = add nsw i32 %cur_ind_1_load, 1

ST_7: p_start [1/1] 1.37ns
branch1:19  %p_start = select i1 %tmp_5, i32 %cur_ind_2, i32 %cur_ind_1_load

ST_7: start_0_s [1/1] 1.37ns
branch1:20  %start_0_s = select i1 %tmp_5, i32 %cur_ind_1_load, i32 %start

ST_7: stg_93 [1/1] 1.57ns
branch1:21  store i32 %p_start, i32* %cur_ind

ST_7: stg_94 [1/1] 1.57ns
branch1:22  store i32 %start_0_s, i32* %cur_ind_1

ST_7: stg_95 [1/1] 0.00ns
branch1:23  br label %.preheader.backedge

ST_7: stg_96 [1/1] 0.00ns
.preheader.backedge:0  br label %.preheader



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 No timing violations. 


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
