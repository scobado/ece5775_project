// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      COO_SpMV
`define AUTOTB_DUT_INST AESL_inst_COO_SpMV
`define AUTOTB_TOP      apatb_COO_SpMV_top
`define AUTOTB_LAT_RESULT_FILE "COO_SpMV.result.lat.rb"
`define AUTOTB_PER_RESULT_TRANS_FILE "COO_SpMV.performance.result.transaction.xml"
`define AUTOTB_TOP_INST AESL_inst_apatb_COO_SpMV_top
`define AUTOTB_MAX_ALLOW_LATENCY  15000000
`define AUTOTB_CLOCK_PERIOD_DIV2 5.00

`define AESL_MEM_row AESL_automem_row
`define AESL_MEM_INST_row mem_inst_row
`define AESL_MEM_col AESL_automem_col
`define AESL_MEM_INST_col mem_inst_col
`define AESL_MEM_val_r AESL_automem_val_r
`define AESL_MEM_INST_val_r mem_inst_val_r
`define AESL_MEM_vector AESL_automem_vector
`define AESL_MEM_INST_vector mem_inst_vector
`define AESL_MEM_output_r AESL_automem_output_r
`define AESL_MEM_INST_output_r mem_inst_output_r
`define AESL_DEPTH_nnz 1
`define AUTOTB_TVIN_row  "../tv/cdatafile/c.COO_SpMV.autotvin_row.dat"
`define AUTOTB_TVIN_col  "../tv/cdatafile/c.COO_SpMV.autotvin_col.dat"
`define AUTOTB_TVIN_val_r  "../tv/cdatafile/c.COO_SpMV.autotvin_val_r.dat"
`define AUTOTB_TVIN_vector  "../tv/cdatafile/c.COO_SpMV.autotvin_vector.dat"
`define AUTOTB_TVIN_output_r  "../tv/cdatafile/c.COO_SpMV.autotvin_output_r.dat"
`define AUTOTB_TVIN_nnz  "../tv/cdatafile/c.COO_SpMV.autotvin_nnz.dat"
`define AUTOTB_TVIN_row_out_wrapc  "../tv/rtldatafile/rtl.COO_SpMV.autotvin_row.dat"
`define AUTOTB_TVIN_col_out_wrapc  "../tv/rtldatafile/rtl.COO_SpMV.autotvin_col.dat"
`define AUTOTB_TVIN_val_r_out_wrapc  "../tv/rtldatafile/rtl.COO_SpMV.autotvin_val_r.dat"
`define AUTOTB_TVIN_vector_out_wrapc  "../tv/rtldatafile/rtl.COO_SpMV.autotvin_vector.dat"
`define AUTOTB_TVIN_output_r_out_wrapc  "../tv/rtldatafile/rtl.COO_SpMV.autotvin_output_r.dat"
`define AUTOTB_TVIN_nnz_out_wrapc  "../tv/rtldatafile/rtl.COO_SpMV.autotvin_nnz.dat"
`define AUTOTB_TVOUT_output_r  "../tv/cdatafile/c.COO_SpMV.autotvout_output_r.dat"
`define AUTOTB_TVOUT_output_r_out_wrapc  "../tv/rtldatafile/rtl.COO_SpMV.autotvout_output_r.dat"
module `AUTOTB_TOP;

parameter AUTOTB_TRANSACTION_NUM = 10;
parameter PROGRESS_TIMEOUT = 10000000;
parameter LATENCY_ESTIMATION = 10113;
parameter LENGTH_row = 10000;
parameter LENGTH_col = 10000;
parameter LENGTH_val_r = 10000;
parameter LENGTH_vector = 100;
parameter LENGTH_output_r = 100;
parameter LENGTH_nnz = 1;

task read_token;
    input integer fp;
    output reg [159 : 0] token;
    integer ret;
    begin
        token = "";
        ret = 0;
        ret = $fscanf(fp,"%s",token);
    end
endtask

reg AESL_clock;
reg rst;
reg start;
reg ce;
reg continue;
wire AESL_start;
wire AESL_reset;
wire AESL_ce;
wire AESL_ready;
wire AESL_idle;
wire AESL_continue;
wire AESL_done;
reg AESL_done_delay = 0;
reg AESL_done_delay2 = 0;
reg AESL_ready_delay = 0;
wire ready;
wire ready_wire;
wire ap_start;
wire ap_done;
wire ap_idle;
wire ap_ready;
wire [13 : 0] row_address0;
wire  row_ce0;
wire [31 : 0] row_q0;
wire [13 : 0] col_address0;
wire  col_ce0;
wire [31 : 0] col_q0;
wire [13 : 0] val_r_address0;
wire  val_r_ce0;
wire [31 : 0] val_r_q0;
wire [6 : 0] vector_address0;
wire  vector_ce0;
wire [31 : 0] vector_q0;
wire [6 : 0] output_r_address0;
wire  output_r_ce0;
wire  output_r_we0;
wire [31 : 0] output_r_d0;
wire [31 : 0] output_r_q0;
wire [6 : 0] output_r_address1;
wire  output_r_ce1;
wire  output_r_we1;
wire [31 : 0] output_r_d1;
wire [31 : 0] nnz;
integer done_cnt = 0;
integer AESL_ready_cnt = 0;
integer ready_cnt = 0;
reg ready_initial;
reg ready_initial_n;
reg ready_last_n;
reg ready_delay_last_n;
reg done_delay_last_n;
reg interface_done = 0;

`AUTOTB_DUT `AUTOTB_DUT_INST(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_ready(ap_ready),
    .row_address0(row_address0),
    .row_ce0(row_ce0),
    .row_q0(row_q0),
    .col_address0(col_address0),
    .col_ce0(col_ce0),
    .col_q0(col_q0),
    .val_r_address0(val_r_address0),
    .val_r_ce0(val_r_ce0),
    .val_r_q0(val_r_q0),
    .vector_address0(vector_address0),
    .vector_ce0(vector_ce0),
    .vector_q0(vector_q0),
    .output_r_address0(output_r_address0),
    .output_r_ce0(output_r_ce0),
    .output_r_we0(output_r_we0),
    .output_r_d0(output_r_d0),
    .output_r_q0(output_r_q0),
    .output_r_address1(output_r_address1),
    .output_r_ce1(output_r_ce1),
    .output_r_we1(output_r_we1),
    .output_r_d1(output_r_d1),
    .nnz(nnz));

// Assignment for control signal
assign ap_clk = AESL_clock;
assign ap_rst = AESL_reset;
assign ap_rst_n = ~AESL_reset;
assign AESL_reset = rst;
assign ap_start = AESL_start;
assign AESL_start = start;
assign AESL_done = ap_done;
assign AESL_idle = ap_idle;
assign AESL_ready = ap_ready;
assign AESL_ce = ce;
assign AESL_continue = continue;
    always @(posedge AESL_clock) begin
        if (AESL_reset) begin
        end else begin
            if (AESL_done !== 1 && AESL_done !== 0) begin
                $display("ERROR: Control signal AESL_done is invalid!");
                $finish;
            end
        end
    end
    always @(posedge AESL_clock) begin
        if (AESL_reset) begin
        end else begin
            if (AESL_ready !== 1 && AESL_ready !== 0) begin
                $display("ERROR: Control signal AESL_ready is invalid!");
                $finish;
            end
        end
    end
//------------------------arrayrow Instantiation--------------

// The input and output of arrayrow
wire    arrayrow_ce0, arrayrow_ce1;
wire    arrayrow_we0, arrayrow_we1;
wire    [13 : 0]    arrayrow_address0, arrayrow_address1;
wire    [31 : 0]    arrayrow_din0, arrayrow_din1;
wire    [31 : 0]    arrayrow_dout0, arrayrow_dout1;
wire    arrayrow_ready;
wire    arrayrow_done;

`AESL_MEM_row `AESL_MEM_INST_row(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayrow_ce0),
    .we0        (arrayrow_we0),
    .address0   (arrayrow_address0),
    .din0       (arrayrow_din0),
    .dout0      (arrayrow_dout0),
    .ce1        (arrayrow_ce1),
    .we1        (arrayrow_we1),
    .address1   (arrayrow_address1),
    .din1       (arrayrow_din1),
    .dout1      (arrayrow_dout1),
    .ready      (arrayrow_ready),
    .done    (arrayrow_done)
);

// Assignment between dut and arrayrow
assign arrayrow_address0 = row_address0;
assign arrayrow_ce0 = row_ce0;
assign row_q0 = arrayrow_dout0;
assign arrayrow_we0 = 0;
assign arrayrow_din0 = 0;
assign arrayrow_we1 = 0;
assign arrayrow_din1 = 0;
assign arrayrow_ready=    ready;
assign arrayrow_done = 0;


//------------------------arraycol Instantiation--------------

// The input and output of arraycol
wire    arraycol_ce0, arraycol_ce1;
wire    arraycol_we0, arraycol_we1;
wire    [13 : 0]    arraycol_address0, arraycol_address1;
wire    [31 : 0]    arraycol_din0, arraycol_din1;
wire    [31 : 0]    arraycol_dout0, arraycol_dout1;
wire    arraycol_ready;
wire    arraycol_done;

`AESL_MEM_col `AESL_MEM_INST_col(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraycol_ce0),
    .we0        (arraycol_we0),
    .address0   (arraycol_address0),
    .din0       (arraycol_din0),
    .dout0      (arraycol_dout0),
    .ce1        (arraycol_ce1),
    .we1        (arraycol_we1),
    .address1   (arraycol_address1),
    .din1       (arraycol_din1),
    .dout1      (arraycol_dout1),
    .ready      (arraycol_ready),
    .done    (arraycol_done)
);

// Assignment between dut and arraycol
assign arraycol_address0 = col_address0;
assign arraycol_ce0 = col_ce0;
assign col_q0 = arraycol_dout0;
assign arraycol_we0 = 0;
assign arraycol_din0 = 0;
assign arraycol_we1 = 0;
assign arraycol_din1 = 0;
assign arraycol_ready=    ready;
assign arraycol_done = 0;


//------------------------arrayval_r Instantiation--------------

// The input and output of arrayval_r
wire    arrayval_r_ce0, arrayval_r_ce1;
wire    arrayval_r_we0, arrayval_r_we1;
wire    [13 : 0]    arrayval_r_address0, arrayval_r_address1;
wire    [31 : 0]    arrayval_r_din0, arrayval_r_din1;
wire    [31 : 0]    arrayval_r_dout0, arrayval_r_dout1;
wire    arrayval_r_ready;
wire    arrayval_r_done;

`AESL_MEM_val_r `AESL_MEM_INST_val_r(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayval_r_ce0),
    .we0        (arrayval_r_we0),
    .address0   (arrayval_r_address0),
    .din0       (arrayval_r_din0),
    .dout0      (arrayval_r_dout0),
    .ce1        (arrayval_r_ce1),
    .we1        (arrayval_r_we1),
    .address1   (arrayval_r_address1),
    .din1       (arrayval_r_din1),
    .dout1      (arrayval_r_dout1),
    .ready      (arrayval_r_ready),
    .done    (arrayval_r_done)
);

// Assignment between dut and arrayval_r
assign arrayval_r_address0 = val_r_address0;
assign arrayval_r_ce0 = val_r_ce0;
assign val_r_q0 = arrayval_r_dout0;
assign arrayval_r_we0 = 0;
assign arrayval_r_din0 = 0;
assign arrayval_r_we1 = 0;
assign arrayval_r_din1 = 0;
assign arrayval_r_ready=    ready;
assign arrayval_r_done = 0;


//------------------------arrayvector Instantiation--------------

// The input and output of arrayvector
wire    arrayvector_ce0, arrayvector_ce1;
wire    arrayvector_we0, arrayvector_we1;
wire    [6 : 0]    arrayvector_address0, arrayvector_address1;
wire    [31 : 0]    arrayvector_din0, arrayvector_din1;
wire    [31 : 0]    arrayvector_dout0, arrayvector_dout1;
wire    arrayvector_ready;
wire    arrayvector_done;

`AESL_MEM_vector `AESL_MEM_INST_vector(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayvector_ce0),
    .we0        (arrayvector_we0),
    .address0   (arrayvector_address0),
    .din0       (arrayvector_din0),
    .dout0      (arrayvector_dout0),
    .ce1        (arrayvector_ce1),
    .we1        (arrayvector_we1),
    .address1   (arrayvector_address1),
    .din1       (arrayvector_din1),
    .dout1      (arrayvector_dout1),
    .ready      (arrayvector_ready),
    .done    (arrayvector_done)
);

// Assignment between dut and arrayvector
assign arrayvector_address0 = vector_address0;
assign arrayvector_ce0 = vector_ce0;
assign vector_q0 = arrayvector_dout0;
assign arrayvector_we0 = 0;
assign arrayvector_din0 = 0;
assign arrayvector_we1 = 0;
assign arrayvector_din1 = 0;
assign arrayvector_ready=    ready;
assign arrayvector_done = 0;


//------------------------arrayoutput_r Instantiation--------------

// The input and output of arrayoutput_r
wire    arrayoutput_r_ce0, arrayoutput_r_ce1;
wire    arrayoutput_r_we0, arrayoutput_r_we1;
wire    [6 : 0]    arrayoutput_r_address0, arrayoutput_r_address1;
wire    [31 : 0]    arrayoutput_r_din0, arrayoutput_r_din1;
wire    [31 : 0]    arrayoutput_r_dout0, arrayoutput_r_dout1;
wire    arrayoutput_r_ready;
wire    arrayoutput_r_done;

`AESL_MEM_output_r `AESL_MEM_INST_output_r(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayoutput_r_ce0),
    .we0        (arrayoutput_r_we0),
    .address0   (arrayoutput_r_address0),
    .din0       (arrayoutput_r_din0),
    .dout0      (arrayoutput_r_dout0),
    .ce1        (arrayoutput_r_ce1),
    .we1        (arrayoutput_r_we1),
    .address1   (arrayoutput_r_address1),
    .din1       (arrayoutput_r_din1),
    .dout1      (arrayoutput_r_dout1),
    .ready      (arrayoutput_r_ready),
    .done    (arrayoutput_r_done)
);

// Assignment between dut and arrayoutput_r
assign arrayoutput_r_address0 = output_r_address0;
assign arrayoutput_r_ce0 = output_r_ce0;
assign output_r_q0 = arrayoutput_r_dout0;
assign arrayoutput_r_we0 = output_r_we0;
assign arrayoutput_r_din0 = output_r_d0;
assign arrayoutput_r_address1 = output_r_address1;
assign arrayoutput_r_ce1 = output_r_ce1;
assign arrayoutput_r_we1 = output_r_we1;
assign arrayoutput_r_din1 = output_r_d1;
assign arrayoutput_r_ready= ready;
assign arrayoutput_r_done = interface_done;


// The signal of port nnz
reg [31: 0] AESL_REG_nnz = 0;
assign nnz = AESL_REG_nnz;
initial begin : read_file_process_nnz
    integer fp;
    integer err;
    integer ret;
    integer rand;
    reg [159  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_nnz,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_nnz);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_nnz);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


initial begin : generate_AESL_ready_cnt_proc
    AESL_ready_cnt = 0;
    wait(AESL_reset === 0);
    while(AESL_ready_cnt != AUTOTB_TRANSACTION_NUM) begin
        while(AESL_ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        AESL_ready_cnt = AESL_ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

    event next_trigger_ready_cnt;
    
    initial begin : gen_ready_cnt
        ready_cnt = 0;
        wait (AESL_reset === 0);
        forever begin
            @ (posedge AESL_clock);
            if (ready == 1) begin
                if (ready_cnt < AUTOTB_TRANSACTION_NUM) begin
                    ready_cnt = ready_cnt + 1;
                end
            end
            -> next_trigger_ready_cnt;
        end
    end
    
    wire all_finish = (done_cnt == AUTOTB_TRANSACTION_NUM);
    
    // done_cnt
    always @ (posedge AESL_clock) begin
        if (AESL_reset) begin
            done_cnt <= 0;
        end else begin
            if (AESL_done == 1) begin
                if (done_cnt < AUTOTB_TRANSACTION_NUM) begin
                    done_cnt <= done_cnt + 1;
                end
            end
        end
    end
    
    initial begin : finish_simulation
        wait (all_finish == 1);
        // last transaction is saved at negedge right after last done
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        $finish;
    end
    
initial begin
    AESL_clock = 0;
    forever #`AUTOTB_CLOCK_PERIOD_DIV2 AESL_clock = ~AESL_clock;
end


reg end_row;
reg [31:0] size_row;
reg [31:0] size_row_backup;
reg end_col;
reg [31:0] size_col;
reg [31:0] size_col_backup;
reg end_val_r;
reg [31:0] size_val_r;
reg [31:0] size_val_r_backup;
reg end_vector;
reg [31:0] size_vector;
reg [31:0] size_vector_backup;
reg end_output_r;
reg [31:0] size_output_r;
reg [31:0] size_output_r_backup;
reg end_nnz;
reg [31:0] size_nnz;
reg [31:0] size_nnz_backup;

initial begin : initial_process
    integer rand;
    rst = 1;
    # 100;
    repeat(3) @ (posedge AESL_clock);
    rst = 0;
end
initial begin : start_process
    integer rand;
    reg [31:0] start_cnt;
    ce = 1;
    start = 0;
    start_cnt = 0;
    wait (AESL_reset === 0);
    @ (posedge AESL_clock);
    #0 start = 1;
    start_cnt = start_cnt + 1;
    forever begin
        @ (posedge AESL_clock);
        if (start_cnt >= AUTOTB_TRANSACTION_NUM) begin
            // keep pushing garbage in
            #0 start = 1;
        end
        if (AESL_ready) begin
            start_cnt = start_cnt + 1;
        end
    end
end

always @(AESL_done)
begin
    continue = AESL_done;
end

initial begin : ready_initial_process
    ready_initial = 0;
    wait (AESL_start === 1);
    ready_initial = 1;
    @(posedge AESL_clock);
    ready_initial = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
      AESL_ready_delay = 0;
  else
      AESL_ready_delay = AESL_ready;
end
initial begin : ready_last_n_process
  ready_last_n = 1;
  wait(ready_cnt == AUTOTB_TRANSACTION_NUM)
  @(posedge AESL_clock);
  ready_last_n <= 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
      ready_delay_last_n = 0;
  else
      ready_delay_last_n <= ready_last_n;
end
assign ready = (ready_initial | AESL_ready_delay);
assign ready_wire = ready_initial | AESL_ready_delay;
initial begin : done_delay_last_n_process
  done_delay_last_n = 1;
  while(done_cnt < AUTOTB_TRANSACTION_NUM)
      @(posedge AESL_clock);
  # 0.1;
  done_delay_last_n = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
  begin
      AESL_done_delay <= 0;
      AESL_done_delay2 <= 0;
  end
  else begin
      AESL_done_delay <= AESL_done & done_delay_last_n;
      AESL_done_delay2 <= AESL_done_delay;
  end
end
always @(posedge AESL_clock)
begin
    if(AESL_reset)
      interface_done = 0;
  else begin
      # 0.01;
      if(ready === 1 && ready_cnt > 0 && ready_cnt < AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else if(AESL_done_delay === 1 && done_cnt == AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else
          interface_done = 0;
  end
end

reg dump_tvout_finish_output_r;

initial begin : dump_tvout_runtime_sign_output_r
    integer fp;
    dump_tvout_finish_output_r = 0;
    fp = $fopen(`AUTOTB_TVOUT_output_r_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_output_r_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_output_r_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_output_r_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_output_r = 1;
end


////////////////////////////////////////////
// progress and performance
////////////////////////////////////////////

task wait_start();
    while (~AESL_start) begin
        @ (posedge AESL_clock);
    end
endtask

reg [31:0] clk_cnt = 0;
reg AESL_ready_p1;

always @ (posedge AESL_clock) begin
    clk_cnt <= clk_cnt + 1;
    AESL_ready_p1 <= AESL_ready;
end

reg [31:0] start_timestamp [0:AUTOTB_TRANSACTION_NUM - 1];
reg [31:0] start_cnt;
reg [31:0] finish_timestamp [0:AUTOTB_TRANSACTION_NUM - 1];
reg [31:0] finish_cnt;
event report_progress;

initial begin
    start_cnt = 0;
    finish_cnt = 0;
    wait (AESL_reset == 0);
    wait_start();
    start_timestamp[start_cnt] = clk_cnt;
    start_cnt = start_cnt + 1;
    if (AESL_done) begin
        finish_timestamp[finish_cnt] = clk_cnt;
        finish_cnt = finish_cnt + 1;
    end
    -> report_progress;
    forever begin
        @ (posedge AESL_clock);
        if (start_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_start && AESL_ready_p1) begin
                start_timestamp[start_cnt] = clk_cnt;
                start_cnt = start_cnt + 1;
            end
        end
        if (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_done) begin
                finish_timestamp[finish_cnt] = clk_cnt;
                finish_cnt = finish_cnt + 1;
            end
        end
        -> report_progress;
    end
end

reg [31:0] progress_timeout;

initial begin
    wait (AESL_reset == 0);
    progress_timeout = PROGRESS_TIMEOUT;
    $display("////////////////////////////////////////////////////////////////////////////////////");
    $display("// Inter-Transaction Progress: Completed Transaction / Total Transaction");
    $display("// Intra-Transaction Progress: Measured Latency / Latency Estimation * 100%%");
    $display("////////////////////////////////////////////////////////////////////////////////////");
    print_progress();
    while (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
        @ (report_progress);
        if (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
                if (progress_timeout == 0) begin
                    print_progress();
                    progress_timeout = PROGRESS_TIMEOUT;
                end else begin
                    progress_timeout = progress_timeout - 1;
                end
        end
    end
    print_progress();
    $display("////////////////////////////////////////////////////////////////////////////////////");
    calculate_performance();
end

task print_progress();
    real intra_progress;
    begin
        if (LATENCY_ESTIMATION > 0) begin
            if (start_cnt > finish_cnt) begin
                intra_progress = clk_cnt - start_timestamp[finish_cnt];
            end else begin
                intra_progress = 0;
            end
            intra_progress = intra_progress / LATENCY_ESTIMATION * 100;
            $display("// RTL Simulation : %0d / %0d [%2.2f%%] @ \"%0t\"", finish_cnt, AUTOTB_TRANSACTION_NUM, intra_progress, $time);
        end else begin
            $display("// RTL Simulation : %0d / %0d [N/A] @ \"%0t\"", finish_cnt, AUTOTB_TRANSACTION_NUM, $time);
        end
    end
endtask

task calculate_performance();
    integer i;
    integer fp;
    reg [31:0] latency [0:AUTOTB_TRANSACTION_NUM - 1];
    reg [31:0] latency_min;
    reg [31:0] latency_max;
    reg [31:0] latency_total;
    reg [31:0] latency_average;
    reg [31:0] interval [0:AUTOTB_TRANSACTION_NUM - 2];
    reg [31:0] interval_min;
    reg [31:0] interval_max;
    reg [31:0] interval_total;
    reg [31:0] interval_average;
    begin
        latency_min = -1;
        latency_max = 0;
        latency_total = 0;
        interval_min = -1;
        interval_max = 0;
        interval_total = 0;

        for (i = 0; i < AUTOTB_TRANSACTION_NUM; i = i + 1) begin
            // calculate latency
            latency[i] = finish_timestamp[i] - start_timestamp[i];
            if (latency[i] > latency_max) latency_max = latency[i];
            if (latency[i] < latency_min) latency_min = latency[i];
            latency_total = latency_total + latency[i];
            // calculate interval
            if (AUTOTB_TRANSACTION_NUM == 1) begin
                interval[i] = 0;
                interval_max = 0;
                interval_min = 0;
                interval_total = 0;
            end else if (i < AUTOTB_TRANSACTION_NUM - 1) begin
                interval[i] = start_timestamp[i + 1] - start_timestamp[i];
                if (interval[i] > interval_max) interval_max = interval[i];
                if (interval[i] < interval_min) interval_min = interval[i];
                interval_total = interval_total + interval[i];
            end
        end

        latency_average = latency_total / AUTOTB_TRANSACTION_NUM;
        interval_average = interval_total / (AUTOTB_TRANSACTION_NUM - 1);

        fp = $fopen(`AUTOTB_LAT_RESULT_FILE, "w");

        $fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latency_max);
        $fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latency_min);
        $fdisplay(fp, "$AVER_LATENCY = \"%0d\"", latency_average);
        $fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", interval_max);
        $fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", interval_min);
        $fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", interval_average);

        $fclose(fp);

        fp = $fopen(`AUTOTB_PER_RESULT_TRANS_FILE, "w");

        $fdisplay(fp, "%20s%16s%16s", "", "latency", "interval");
        if (AUTOTB_TRANSACTION_NUM == 1) begin
            i = 0;
            $fdisplay(fp, "transaction%8d:%16d%16d", i, latency[i], interval[i]);
        end else begin
            for (i = 0; i < AUTOTB_TRANSACTION_NUM; i = i + 1) begin
                if (i < AUTOTB_TRANSACTION_NUM - 1) begin
                    $fdisplay(fp, "transaction%8d:%16d%16d", i, latency[i], interval[i]);
                end else begin
                    $fdisplay(fp, "transaction%8d:%16d               x", i, latency[i]);
                end
            end
        end

        $fclose(fp);
    end
endtask


endmodule
