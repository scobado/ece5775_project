// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="COO_SpMV,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.412000,HLS_SYN_LAT=10113,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=521,HLS_SYN_LUT=789}" *)

module COO_SpMV (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        row_address0,
        row_ce0,
        row_q0,
        col_address0,
        col_ce0,
        col_q0,
        val_r_address0,
        val_r_ce0,
        val_r_q0,
        vector_address0,
        vector_ce0,
        vector_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        output_r_address1,
        output_r_ce1,
        output_r_we1,
        output_r_d1,
        nnz
);

parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_st2_fsm_1 = 4'b10;
parameter    ap_ST_pp0_stg0_fsm_2 = 4'b100;
parameter    ap_ST_st15_fsm_3 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv14_0 = 14'b00000000000000;
parameter    ap_const_lv7_64 = 7'b1100100;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv14_2710 = 14'b10011100010000;
parameter    ap_const_lv14_1 = 14'b1;
parameter    ap_const_lv32_3 = 32'b11;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] row_address0;
output   row_ce0;
input  [31:0] row_q0;
output  [13:0] col_address0;
output   col_ce0;
input  [31:0] col_q0;
output  [13:0] val_r_address0;
output   val_r_ce0;
input  [31:0] val_r_q0;
output  [6:0] vector_address0;
output   vector_ce0;
input  [31:0] vector_q0;
output  [6:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
output  [6:0] output_r_address1;
output   output_r_ce1;
output   output_r_we1;
output  [31:0] output_r_d1;
input  [31:0] nnz;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg row_ce0;
reg col_ce0;
reg val_r_ce0;
reg vector_ce0;
reg[6:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg output_r_ce1;
reg output_r_we1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_19;
reg   [13:0] i1_reg_150;
wire   [0:0] exitcond1_fu_170_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_77;
wire   [6:0] i_1_fu_176_p2;
wire   [0:0] exitcond_fu_187_p2;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_2;
reg    ap_sig_88;
reg    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it1;
reg    ap_reg_ppiten_pp0_it2;
reg    ap_reg_ppiten_pp0_it3;
reg    ap_reg_ppiten_pp0_it4;
reg    ap_reg_ppiten_pp0_it5;
reg    ap_reg_ppiten_pp0_it6;
reg    ap_reg_ppiten_pp0_it7;
reg    ap_reg_ppiten_pp0_it8;
reg    ap_reg_ppiten_pp0_it9;
reg    ap_reg_ppiten_pp0_it10;
reg    ap_reg_ppiten_pp0_it11;
wire   [13:0] i_2_fu_193_p2;
wire   [0:0] tmp_2_fu_203_p2;
reg   [0:0] tmp_2_reg_248;
reg   [0:0] ap_reg_ppstg_tmp_2_reg_248_pp0_iter1;
reg   [0:0] ap_reg_ppstg_tmp_2_reg_248_pp0_iter2;
reg   [0:0] ap_reg_ppstg_tmp_2_reg_248_pp0_iter3;
reg   [0:0] ap_reg_ppstg_tmp_2_reg_248_pp0_iter4;
reg   [0:0] ap_reg_ppstg_tmp_2_reg_248_pp0_iter5;
reg   [0:0] ap_reg_ppstg_tmp_2_reg_248_pp0_iter6;
reg   [0:0] ap_reg_ppstg_tmp_2_reg_248_pp0_iter7;
reg   [0:0] ap_reg_ppstg_tmp_2_reg_248_pp0_iter8;
reg   [0:0] ap_reg_ppstg_tmp_2_reg_248_pp0_iter9;
reg   [0:0] ap_reg_ppstg_tmp_2_reg_248_pp0_iter10;
reg   [31:0] val_load_reg_267;
reg   [6:0] output_addr_1_reg_277;
reg   [6:0] ap_reg_ppstg_output_addr_1_reg_277_pp0_iter2;
reg   [6:0] ap_reg_ppstg_output_addr_1_reg_277_pp0_iter3;
reg   [6:0] ap_reg_ppstg_output_addr_1_reg_277_pp0_iter4;
reg   [6:0] ap_reg_ppstg_output_addr_1_reg_277_pp0_iter5;
reg   [6:0] ap_reg_ppstg_output_addr_1_reg_277_pp0_iter6;
reg   [6:0] ap_reg_ppstg_output_addr_1_reg_277_pp0_iter7;
reg   [6:0] ap_reg_ppstg_output_addr_1_reg_277_pp0_iter8;
reg   [6:0] ap_reg_ppstg_output_addr_1_reg_277_pp0_iter9;
reg   [6:0] ap_reg_ppstg_output_addr_1_reg_277_pp0_iter10;
wire   [31:0] grp_fu_165_p2;
reg   [31:0] tmp_5_reg_288;
reg   [31:0] output_load_reg_293;
wire   [31:0] grp_fu_161_p2;
reg   [31:0] tmp_7_reg_298;
reg   [6:0] i_reg_139;
wire   [63:0] tmp_fu_182_p1;
wire   [63:0] tmp_3_fu_208_p1;
wire  signed [63:0] tmp_4_fu_215_p1;
wire  signed [63:0] tmp_6_fu_220_p1;
wire   [31:0] i1_cast1_fu_199_p1;
reg    ap_sig_cseq_ST_st15_fsm_3;
reg    ap_sig_274;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'b1;
#0 ap_reg_ppiten_pp0_it0 = 1'b0;
#0 ap_reg_ppiten_pp0_it1 = 1'b0;
#0 ap_reg_ppiten_pp0_it2 = 1'b0;
#0 ap_reg_ppiten_pp0_it3 = 1'b0;
#0 ap_reg_ppiten_pp0_it4 = 1'b0;
#0 ap_reg_ppiten_pp0_it5 = 1'b0;
#0 ap_reg_ppiten_pp0_it6 = 1'b0;
#0 ap_reg_ppiten_pp0_it7 = 1'b0;
#0 ap_reg_ppiten_pp0_it8 = 1'b0;
#0 ap_reg_ppiten_pp0_it9 = 1'b0;
#0 ap_reg_ppiten_pp0_it10 = 1'b0;
#0 ap_reg_ppiten_pp0_it11 = 1'b0;
end

COO_SpMV_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
COO_SpMV_fadd_32ns_32ns_32_5_full_dsp_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(output_load_reg_293),
    .din1(tmp_5_reg_288),
    .ce(1'b1),
    .dout(grp_fu_161_p2)
);

COO_SpMV_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
COO_SpMV_fmul_32ns_32ns_32_4_max_dsp_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(val_load_reg_267),
    .din1(vector_q0),
    .ce(1'b1),
    .dout(grp_fu_165_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(exitcond_fu_187_p2 == 1'b0))) begin
            ap_reg_ppiten_pp0_it0 <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_170_p2 == 1'b0))) begin
            ap_reg_ppiten_pp0_it0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_fu_187_p2 == 1'b0))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b1;
        end else if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_170_p2 == 1'b0)) | ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(exitcond_fu_187_p2 == 1'b0)))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it10 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it11 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it4 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it5 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it6 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it7 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it8 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it9 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_170_p2 == 1'b0))) begin
        i1_reg_150 <= ap_const_lv14_0;
    end else if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it0) & (exitcond_fu_187_p2 == 1'b0))) begin
        i1_reg_150 <= i_2_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_170_p2 == 1'b0))) begin
        i_reg_139 <= i_1_fu_176_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_139 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == 1'b1)) begin
        ap_reg_ppstg_output_addr_1_reg_277_pp0_iter10 <= ap_reg_ppstg_output_addr_1_reg_277_pp0_iter9;
        ap_reg_ppstg_output_addr_1_reg_277_pp0_iter2 <= output_addr_1_reg_277;
        ap_reg_ppstg_output_addr_1_reg_277_pp0_iter3 <= ap_reg_ppstg_output_addr_1_reg_277_pp0_iter2;
        ap_reg_ppstg_output_addr_1_reg_277_pp0_iter4 <= ap_reg_ppstg_output_addr_1_reg_277_pp0_iter3;
        ap_reg_ppstg_output_addr_1_reg_277_pp0_iter5 <= ap_reg_ppstg_output_addr_1_reg_277_pp0_iter4;
        ap_reg_ppstg_output_addr_1_reg_277_pp0_iter6 <= ap_reg_ppstg_output_addr_1_reg_277_pp0_iter5;
        ap_reg_ppstg_output_addr_1_reg_277_pp0_iter7 <= ap_reg_ppstg_output_addr_1_reg_277_pp0_iter6;
        ap_reg_ppstg_output_addr_1_reg_277_pp0_iter8 <= ap_reg_ppstg_output_addr_1_reg_277_pp0_iter7;
        ap_reg_ppstg_output_addr_1_reg_277_pp0_iter9 <= ap_reg_ppstg_output_addr_1_reg_277_pp0_iter8;
        ap_reg_ppstg_tmp_2_reg_248_pp0_iter10 <= ap_reg_ppstg_tmp_2_reg_248_pp0_iter9;
        ap_reg_ppstg_tmp_2_reg_248_pp0_iter2 <= ap_reg_ppstg_tmp_2_reg_248_pp0_iter1;
        ap_reg_ppstg_tmp_2_reg_248_pp0_iter3 <= ap_reg_ppstg_tmp_2_reg_248_pp0_iter2;
        ap_reg_ppstg_tmp_2_reg_248_pp0_iter4 <= ap_reg_ppstg_tmp_2_reg_248_pp0_iter3;
        ap_reg_ppstg_tmp_2_reg_248_pp0_iter5 <= ap_reg_ppstg_tmp_2_reg_248_pp0_iter4;
        ap_reg_ppstg_tmp_2_reg_248_pp0_iter6 <= ap_reg_ppstg_tmp_2_reg_248_pp0_iter5;
        ap_reg_ppstg_tmp_2_reg_248_pp0_iter7 <= ap_reg_ppstg_tmp_2_reg_248_pp0_iter6;
        ap_reg_ppstg_tmp_2_reg_248_pp0_iter8 <= ap_reg_ppstg_tmp_2_reg_248_pp0_iter7;
        ap_reg_ppstg_tmp_2_reg_248_pp0_iter9 <= ap_reg_ppstg_tmp_2_reg_248_pp0_iter8;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2)) begin
        ap_reg_ppstg_tmp_2_reg_248_pp0_iter1 <= tmp_2_reg_248;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(tmp_2_reg_248 == 1'b0))) begin
        output_addr_1_reg_277 <= tmp_6_fu_220_p1;
        val_load_reg_267 <= val_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it5) & ~(1'b0 == ap_reg_ppstg_tmp_2_reg_248_pp0_iter4))) begin
        output_load_reg_293 <= output_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_fu_187_p2 == 1'b0))) begin
        tmp_2_reg_248 <= tmp_2_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if (~(1'b0 == ap_reg_ppstg_tmp_2_reg_248_pp0_iter4)) begin
        tmp_5_reg_288 <= grp_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if (~(1'b0 == ap_reg_ppstg_tmp_2_reg_248_pp0_iter9)) begin
        tmp_7_reg_298 <= grp_fu_161_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st15_fsm_3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st15_fsm_3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_88) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_274) begin
        ap_sig_cseq_ST_st15_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_19) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_77) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it0))) begin
        col_ce0 = 1'b1;
    end else begin
        col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_r_address0 = tmp_fu_182_p1;
    end else if ((1'b1 == ap_reg_ppiten_pp0_it4)) begin
        output_r_address0 = ap_reg_ppstg_output_addr_1_reg_277_pp0_iter3;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_reg_ppiten_pp0_it4))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_reg_ppiten_pp0_it11)) begin
        output_r_ce1 = 1'b1;
    end else begin
        output_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_170_p2 == 1'b0))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it11) & ~(1'b0 == ap_reg_ppstg_tmp_2_reg_248_pp0_iter10))) begin
        output_r_we1 = 1'b1;
    end else begin
        output_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it0))) begin
        row_ce0 = 1'b1;
    end else begin
        row_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it0))) begin
        val_r_ce0 = 1'b1;
    end else begin
        val_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it1))) begin
        vector_ce0 = 1'b1;
    end else begin
        vector_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if ((exitcond1_fu_170_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end
        end
        ap_ST_pp0_stg0_fsm_2 : begin
            if ((~((1'b1 == ap_reg_ppiten_pp0_it11) & ~(1'b1 == ap_reg_ppiten_pp0_it10)) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_fu_187_p2 == 1'b0) & ~(1'b1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end else if (((1'b1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_fu_187_p2 == 1'b0) & ~(1'b1 == ap_reg_ppiten_pp0_it1))) begin
                ap_NS_fsm = ap_ST_st15_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st15_fsm_3;
            end
        end
        ap_ST_st15_fsm_3 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_19 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_274 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_77 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_88 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign col_address0 = tmp_3_fu_208_p1;

assign exitcond1_fu_170_p2 = ((i_reg_139 == ap_const_lv7_64) ? 1'b1 : 1'b0);

assign exitcond_fu_187_p2 = ((i1_reg_150 == ap_const_lv14_2710) ? 1'b1 : 1'b0);

assign i1_cast1_fu_199_p1 = i1_reg_150;

assign i_1_fu_176_p2 = (i_reg_139 + ap_const_lv7_1);

assign i_2_fu_193_p2 = (i1_reg_150 + ap_const_lv14_1);

assign output_r_address1 = ap_reg_ppstg_output_addr_1_reg_277_pp0_iter10;

assign output_r_d0 = ap_const_lv32_0;

assign output_r_d1 = tmp_7_reg_298;

assign row_address0 = tmp_3_fu_208_p1;

assign tmp_2_fu_203_p2 = (($signed(i1_cast1_fu_199_p1) < $signed(nnz)) ? 1'b1 : 1'b0);

assign tmp_3_fu_208_p1 = i1_reg_150;

assign tmp_4_fu_215_p1 = $signed(col_q0);

assign tmp_6_fu_220_p1 = $signed(row_q0);

assign tmp_fu_182_p1 = i_reg_139;

assign val_r_address0 = tmp_3_fu_208_p1;

assign vector_address0 = tmp_4_fu_215_p1;

endmodule //COO_SpMV
