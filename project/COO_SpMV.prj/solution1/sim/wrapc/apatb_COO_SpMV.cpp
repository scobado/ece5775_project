// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "row"
#define AUTOTB_TVIN_row  "../tv/cdatafile/c.COO_SpMV.autotvin_row.dat"
// wrapc file define: "col"
#define AUTOTB_TVIN_col  "../tv/cdatafile/c.COO_SpMV.autotvin_col.dat"
// wrapc file define: "val_r"
#define AUTOTB_TVIN_val_r  "../tv/cdatafile/c.COO_SpMV.autotvin_val_r.dat"
// wrapc file define: "vector"
#define AUTOTB_TVIN_vector  "../tv/cdatafile/c.COO_SpMV.autotvin_vector.dat"
// wrapc file define: "output_r"
#define AUTOTB_TVIN_output_r  "../tv/cdatafile/c.COO_SpMV.autotvin_output_r.dat"
#define AUTOTB_TVOUT_output_r  "../tv/cdatafile/c.COO_SpMV.autotvout_output_r.dat"
// wrapc file define: "nnz"
#define AUTOTB_TVIN_nnz  "../tv/cdatafile/c.COO_SpMV.autotvin_nnz.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "output_r"
#define AUTOTB_TVOUT_PC_output_r  "../tv/rtldatafile/rtl.COO_SpMV.autotvout_output_r.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			row_depth = 0;
			col_depth = 0;
			val_r_depth = 0;
			vector_depth = 0;
			output_r_depth = 0;
			nnz_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{row " << row_depth << "}\n";
			total_list << "{col " << col_depth << "}\n";
			total_list << "{val_r " << val_r_depth << "}\n";
			total_list << "{vector " << vector_depth << "}\n";
			total_list << "{output_r " << output_r_depth << "}\n";
			total_list << "{nnz " << nnz_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int row_depth;
		int col_depth;
		int val_r_depth;
		int vector_depth;
		int output_r_depth;
		int nnz_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};


#define COO_SpMV AESL_ORIG_DUT_COO_SpMV
extern void COO_SpMV (
int row[10000],
int col[10000],
float val[10000],
const float vector[100],
float output[100],
int nnz);
#undef COO_SpMV

void COO_SpMV (
int row[10000],
int col[10000],
float val[10000],
const float vector[100],
float output[100],
int nnz)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "output_r"
		aesl_fh.read(AUTOTB_TVOUT_PC_output_r, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_output_r, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_output_r, AESL_token); // data

			sc_bv<32> *output_r_pc_buffer = new sc_bv<32>[100];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'output_r', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'output_r', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					output_r_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_output_r, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_output_r))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: output_r
				{
					// bitslice(31, 0)
					// {
						// celement: output(31, 0)
						// {
							sc_lv<32>* output_lv0_0_99_1 = new sc_lv<32>[100];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: output(31, 0)
						{
							// carray: (0) => (99) @ (1)
							for (int i_0 = 0; i_0 <= 99; i_0 += 1)
							{
								if (&(output[0]) != NULL) // check the null address if the c port is array or others
								{
									output_lv0_0_99_1[hls_map_index++].range(31, 0) = sc_bv<32>(output_r_pc_buffer[hls_map_index].range(31, 0));
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: output(31, 0)
						{
							// carray: (0) => (99) @ (1)
							for (int i_0 = 0; i_0 <= 99; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : output[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : output[0]
								// output_left_conversion : *(int*)&output[i_0]
								// output_type_conversion : (output_lv0_0_99_1[hls_map_index++]).to_uint64()
								if (&(output[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&output[i_0] = (output_lv0_0_99_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] output_r_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "row"
		char* tvin_row = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_row);

		// "col"
		char* tvin_col = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_col);

		// "val_r"
		char* tvin_val_r = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_val_r);

		// "vector"
		char* tvin_vector = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_vector);

		// "output_r"
		char* tvin_output_r = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_output_r);
		char* tvout_output_r = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_output_r);

		// "nnz"
		char* tvin_nnz = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_nnz);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_row, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_row, tvin_row);

		sc_bv<32>* row_tvin_wrapc_buffer = new sc_bv<32>[10000];

		// RTL Name: row
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: row(31, 0)
				{
					// carray: (0) => (9999) @ (1)
					for (int i_0 = 0; i_0 <= 9999; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : row[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : row[0]
						// regulate_c_name       : row
						// input_type_conversion : row[i_0]
						if (&(row[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> row_tmp_mem;
							row_tmp_mem = row[i_0];
							row_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = row_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 10000; i++)
		{
			sprintf(tvin_row, "%s\n", (row_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_row, tvin_row);
		}

		tcl_file.set_num(10000, &tcl_file.row_depth);
		sprintf(tvin_row, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_row, tvin_row);

		// release memory allocation
		delete [] row_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_col, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_col, tvin_col);

		sc_bv<32>* col_tvin_wrapc_buffer = new sc_bv<32>[10000];

		// RTL Name: col
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: col(31, 0)
				{
					// carray: (0) => (9999) @ (1)
					for (int i_0 = 0; i_0 <= 9999; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : col[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : col[0]
						// regulate_c_name       : col
						// input_type_conversion : col[i_0]
						if (&(col[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> col_tmp_mem;
							col_tmp_mem = col[i_0];
							col_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = col_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 10000; i++)
		{
			sprintf(tvin_col, "%s\n", (col_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_col, tvin_col);
		}

		tcl_file.set_num(10000, &tcl_file.col_depth);
		sprintf(tvin_col, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_col, tvin_col);

		// release memory allocation
		delete [] col_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_val_r, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_val_r, tvin_val_r);

		sc_bv<32>* val_r_tvin_wrapc_buffer = new sc_bv<32>[10000];

		// RTL Name: val_r
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: val(31, 0)
				{
					// carray: (0) => (9999) @ (1)
					for (int i_0 = 0; i_0 <= 9999; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : val[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : val[0]
						// regulate_c_name       : val
						// input_type_conversion : *(int*)&val[i_0]
						if (&(val[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> val_tmp_mem;
							val_tmp_mem = *(int*)&val[i_0];
							val_r_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = val_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 10000; i++)
		{
			sprintf(tvin_val_r, "%s\n", (val_r_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_val_r, tvin_val_r);
		}

		tcl_file.set_num(10000, &tcl_file.val_r_depth);
		sprintf(tvin_val_r, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_val_r, tvin_val_r);

		// release memory allocation
		delete [] val_r_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_vector, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_vector, tvin_vector);

		sc_bv<32>* vector_tvin_wrapc_buffer = new sc_bv<32>[100];

		// RTL Name: vector
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: vector(31, 0)
				{
					// carray: (0) => (99) @ (1)
					for (int i_0 = 0; i_0 <= 99; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : vector[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : vector[0]
						// regulate_c_name       : vector
						// input_type_conversion : *(int*)&vector[i_0]
						if (&(vector[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> vector_tmp_mem;
							vector_tmp_mem = *(int*)&vector[i_0];
							vector_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = vector_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 100; i++)
		{
			sprintf(tvin_vector, "%s\n", (vector_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_vector, tvin_vector);
		}

		tcl_file.set_num(100, &tcl_file.vector_depth);
		sprintf(tvin_vector, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_vector, tvin_vector);

		// release memory allocation
		delete [] vector_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_output_r, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_output_r, tvin_output_r);

		sc_bv<32>* output_r_tvin_wrapc_buffer = new sc_bv<32>[100];

		// RTL Name: output_r
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: output(31, 0)
				{
					// carray: (0) => (99) @ (1)
					for (int i_0 = 0; i_0 <= 99; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : output[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : output[0]
						// regulate_c_name       : output
						// input_type_conversion : *(int*)&output[i_0]
						if (&(output[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> output_tmp_mem;
							output_tmp_mem = *(int*)&output[i_0];
							output_r_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = output_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 100; i++)
		{
			sprintf(tvin_output_r, "%s\n", (output_r_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_output_r, tvin_output_r);
		}

		tcl_file.set_num(100, &tcl_file.output_r_depth);
		sprintf(tvin_output_r, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_output_r, tvin_output_r);

		// release memory allocation
		delete [] output_r_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_nnz, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_nnz, tvin_nnz);

		sc_bv<32> nnz_tvin_wrapc_buffer;

		// RTL Name: nnz
		{
			// bitslice(31, 0)
			{
				// celement: nnz(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : nnz
						// sub_1st_elem          : 
						// ori_name_1st_elem     : nnz
						// regulate_c_name       : nnz
						// input_type_conversion : nnz
						if (&(nnz) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> nnz_tmp_mem;
							nnz_tmp_mem = nnz;
							nnz_tvin_wrapc_buffer.range(31, 0) = nnz_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_nnz, "%s\n", (nnz_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_nnz, tvin_nnz);
		}

		tcl_file.set_num(1, &tcl_file.nnz_depth);
		sprintf(tvin_nnz, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_nnz, tvin_nnz);

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		AESL_ORIG_DUT_COO_SpMV(row, col, val, vector, output, nnz);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_output_r, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_output_r, tvout_output_r);

		sc_bv<32>* output_r_tvout_wrapc_buffer = new sc_bv<32>[100];

		// RTL Name: output_r
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: output(31, 0)
				{
					// carray: (0) => (99) @ (1)
					for (int i_0 = 0; i_0 <= 99; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : output[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : output[0]
						// regulate_c_name       : output
						// input_type_conversion : *(int*)&output[i_0]
						if (&(output[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> output_tmp_mem;
							output_tmp_mem = *(int*)&output[i_0];
							output_r_tvout_wrapc_buffer[hls_map_index++].range(31, 0) = output_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 100; i++)
		{
			sprintf(tvout_output_r, "%s\n", (output_r_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_output_r, tvout_output_r);
		}

		tcl_file.set_num(100, &tcl_file.output_r_depth);
		sprintf(tvout_output_r, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_output_r, tvout_output_r);

		// release memory allocation
		delete [] output_r_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "row"
		delete [] tvin_row;
		// release memory allocation: "col"
		delete [] tvin_col;
		// release memory allocation: "val_r"
		delete [] tvin_val_r;
		// release memory allocation: "vector"
		delete [] tvin_vector;
		// release memory allocation: "output_r"
		delete [] tvin_output_r;
		delete [] tvout_output_r;
		// release memory allocation: "nnz"
		delete [] tvin_nnz;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

