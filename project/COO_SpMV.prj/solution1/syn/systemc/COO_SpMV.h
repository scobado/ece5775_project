// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _COO_SpMV_HH_
#define _COO_SpMV_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "COO_SpMV_fadd_32ns_32ns_32_5_full_dsp.h"
#include "COO_SpMV_fmul_32ns_32ns_32_4_max_dsp.h"

namespace ap_rtl {

struct COO_SpMV : public sc_module {
    // Port declarations 24
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<14> > row_address0;
    sc_out< sc_logic > row_ce0;
    sc_in< sc_lv<32> > row_q0;
    sc_out< sc_lv<14> > col_address0;
    sc_out< sc_logic > col_ce0;
    sc_in< sc_lv<32> > col_q0;
    sc_out< sc_lv<14> > val_r_address0;
    sc_out< sc_logic > val_r_ce0;
    sc_in< sc_lv<32> > val_r_q0;
    sc_out< sc_lv<7> > vector_address0;
    sc_out< sc_logic > vector_ce0;
    sc_in< sc_lv<32> > vector_q0;
    sc_out< sc_lv<7> > output_r_address0;
    sc_out< sc_logic > output_r_ce0;
    sc_out< sc_logic > output_r_we0;
    sc_out< sc_lv<32> > output_r_d0;
    sc_in< sc_lv<32> > output_r_q0;
    sc_in< sc_lv<32> > nnz;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    COO_SpMV(sc_module_name name);
    SC_HAS_PROCESS(COO_SpMV);

    ~COO_SpMV();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    COO_SpMV_fadd_32ns_32ns_32_5_full_dsp<1,5,32,32,32>* COO_SpMV_fadd_32ns_32ns_32_5_full_dsp_U1;
    COO_SpMV_fmul_32ns_32ns_32_4_max_dsp<1,4,32,32,32>* COO_SpMV_fmul_32ns_32ns_32_4_max_dsp_U2;
    sc_signal< sc_lv<14> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_29;
    sc_signal< sc_lv<7> > i_1_fu_159_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_81;
    sc_signal< sc_lv<14> > i_2_fu_180_p2;
    sc_signal< sc_lv<14> > i_2_reg_224;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_90;
    sc_signal< sc_lv<1> > tmp_2_fu_186_p2;
    sc_signal< sc_lv<1> > tmp_2_reg_229;
    sc_signal< sc_lv<1> > exitcond1_fu_174_p2;
    sc_signal< sc_lv<32> > val_load_reg_248;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_114;
    sc_signal< sc_lv<7> > output_addr_1_reg_258;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_126;
    sc_signal< sc_lv<32> > grp_fu_148_p2;
    sc_signal< sc_lv<32> > tmp_5_reg_268;
    sc_signal< sc_logic > ap_sig_cseq_ST_st8_fsm_7;
    sc_signal< bool > ap_sig_135;
    sc_signal< sc_lv<32> > output_load_reg_273;
    sc_signal< sc_lv<32> > grp_fu_144_p2;
    sc_signal< sc_lv<32> > tmp_7_reg_278;
    sc_signal< sc_logic > ap_sig_cseq_ST_st13_fsm_12;
    sc_signal< bool > ap_sig_145;
    sc_signal< sc_lv<7> > i_reg_122;
    sc_signal< sc_lv<1> > exitcond2_fu_153_p2;
    sc_signal< sc_lv<14> > i1_reg_133;
    sc_signal< sc_logic > ap_sig_cseq_ST_st14_fsm_13;
    sc_signal< bool > ap_sig_160;
    sc_signal< sc_lv<64> > tmp_fu_165_p1;
    sc_signal< sc_lv<64> > tmp_3_fu_191_p1;
    sc_signal< sc_lv<64> > tmp_4_fu_198_p1;
    sc_signal< sc_lv<64> > tmp_6_fu_203_p1;
    sc_signal< sc_logic > ap_sig_cseq_ST_st7_fsm_6;
    sc_signal< bool > ap_sig_175;
    sc_signal< sc_logic > ap_sig_cseq_ST_st9_fsm_8;
    sc_signal< bool > ap_sig_191;
    sc_signal< sc_lv<32> > i1_cast1_fu_170_p1;
    sc_signal< sc_lv<14> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<14> ap_ST_st1_fsm_0;
    static const sc_lv<14> ap_ST_st2_fsm_1;
    static const sc_lv<14> ap_ST_st3_fsm_2;
    static const sc_lv<14> ap_ST_st4_fsm_3;
    static const sc_lv<14> ap_ST_st5_fsm_4;
    static const sc_lv<14> ap_ST_st6_fsm_5;
    static const sc_lv<14> ap_ST_st7_fsm_6;
    static const sc_lv<14> ap_ST_st8_fsm_7;
    static const sc_lv<14> ap_ST_st9_fsm_8;
    static const sc_lv<14> ap_ST_st10_fsm_9;
    static const sc_lv<14> ap_ST_st11_fsm_10;
    static const sc_lv<14> ap_ST_st12_fsm_11;
    static const sc_lv<14> ap_ST_st13_fsm_12;
    static const sc_lv<14> ap_ST_st14_fsm_13;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<7> ap_const_lv7_64;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<14> ap_const_lv14_2710;
    static const sc_lv<14> ap_const_lv14_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_114();
    void thread_ap_sig_126();
    void thread_ap_sig_135();
    void thread_ap_sig_145();
    void thread_ap_sig_160();
    void thread_ap_sig_175();
    void thread_ap_sig_191();
    void thread_ap_sig_29();
    void thread_ap_sig_81();
    void thread_ap_sig_90();
    void thread_ap_sig_cseq_ST_st13_fsm_12();
    void thread_ap_sig_cseq_ST_st14_fsm_13();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st7_fsm_6();
    void thread_ap_sig_cseq_ST_st8_fsm_7();
    void thread_ap_sig_cseq_ST_st9_fsm_8();
    void thread_col_address0();
    void thread_col_ce0();
    void thread_exitcond1_fu_174_p2();
    void thread_exitcond2_fu_153_p2();
    void thread_i1_cast1_fu_170_p1();
    void thread_i_1_fu_159_p2();
    void thread_i_2_fu_180_p2();
    void thread_output_r_address0();
    void thread_output_r_ce0();
    void thread_output_r_d0();
    void thread_output_r_we0();
    void thread_row_address0();
    void thread_row_ce0();
    void thread_tmp_2_fu_186_p2();
    void thread_tmp_3_fu_191_p1();
    void thread_tmp_4_fu_198_p1();
    void thread_tmp_6_fu_203_p1();
    void thread_tmp_fu_165_p1();
    void thread_val_r_address0();
    void thread_val_r_ce0();
    void thread_vector_address0();
    void thread_vector_ce0();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
