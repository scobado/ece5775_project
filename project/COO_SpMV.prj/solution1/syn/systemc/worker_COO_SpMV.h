// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _worker_COO_SpMV_HH_
#define _worker_COO_SpMV_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "worker_fadd_32ns_32ns_32_5_full_dsp.h"
#include "worker_fmul_32ns_32ns_32_4_max_dsp.h"
#include "worker_COO_SpMV_vector.h"

namespace ap_rtl {

struct worker_COO_SpMV : public sc_module {
    // Port declarations 21
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<12> > row_address0;
    sc_out< sc_logic > row_ce0;
    sc_in< sc_lv<6> > row_q0;
    sc_out< sc_lv<12> > col_address0;
    sc_out< sc_logic > col_ce0;
    sc_in< sc_lv<8> > col_q0;
    sc_out< sc_lv<12> > val_r_address0;
    sc_out< sc_logic > val_r_ce0;
    sc_in< sc_lv<32> > val_r_q0;
    sc_out< sc_lv<5> > output_r_address0;
    sc_out< sc_logic > output_r_ce0;
    sc_out< sc_logic > output_r_we0;
    sc_out< sc_lv<32> > output_r_d0;
    sc_in< sc_lv<32> > output_r_q0;
    sc_in< sc_lv<32> > nnz;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    worker_COO_SpMV(sc_module_name name);
    SC_HAS_PROCESS(worker_COO_SpMV);

    ~worker_COO_SpMV();

    sc_trace_file* mVcdFile;

    worker_COO_SpMV_vector* vector_U;
    worker_fadd_32ns_32ns_32_5_full_dsp<1,5,32,32,32>* worker_fadd_32ns_32ns_32_5_full_dsp_U7;
    worker_fmul_32ns_32ns_32_4_max_dsp<1,4,32,32,32>* worker_fmul_32ns_32ns_32_4_max_dsp_U8;
    sc_signal< sc_lv<14> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_31;
    sc_signal< sc_lv<7> > vector_address0;
    sc_signal< sc_logic > vector_ce0;
    sc_signal< sc_lv<32> > vector_q0;
    sc_signal< sc_lv<12> > i_4_fu_125_p2;
    sc_signal< sc_lv<12> > i_4_reg_171;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_82;
    sc_signal< sc_lv<1> > tmp_fu_131_p2;
    sc_signal< sc_lv<1> > tmp_reg_176;
    sc_signal< sc_lv<1> > exitcond_fu_119_p2;
    sc_signal< sc_lv<64> > tmp_s_fu_136_p1;
    sc_signal< sc_lv<64> > tmp_s_reg_180;
    sc_signal< sc_lv<1> > tmp_12_fu_145_p3;
    sc_signal< sc_lv<1> > tmp_12_reg_191;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_105;
    sc_signal< sc_lv<5> > output_addr_reg_205;
    sc_signal< sc_lv<32> > val_load_reg_210;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_121;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_131;
    sc_signal< sc_lv<32> > grp_fu_110_p2;
    sc_signal< sc_lv<32> > tmp_7_reg_225;
    sc_signal< sc_logic > ap_sig_cseq_ST_st8_fsm_7;
    sc_signal< bool > ap_sig_140;
    sc_signal< sc_lv<32> > output_load_reg_230;
    sc_signal< sc_lv<32> > grp_fu_106_p2;
    sc_signal< sc_lv<32> > tmp_9_reg_235;
    sc_signal< sc_logic > ap_sig_cseq_ST_st13_fsm_12;
    sc_signal< bool > ap_sig_150;
    sc_signal< sc_lv<12> > i_reg_95;
    sc_signal< sc_logic > ap_sig_cseq_ST_st14_fsm_13;
    sc_signal< bool > ap_sig_160;
    sc_signal< sc_lv<64> > tmp_8_fu_153_p1;
    sc_signal< sc_lv<64> > tmp_6_fu_158_p1;
    sc_signal< sc_logic > ap_sig_cseq_ST_st7_fsm_6;
    sc_signal< bool > ap_sig_169;
    sc_signal< sc_logic > ap_sig_cseq_ST_st9_fsm_8;
    sc_signal< bool > ap_sig_185;
    sc_signal< sc_lv<32> > i_cast1_fu_115_p1;
    sc_signal< sc_lv<32> > extLd_fu_141_p1;
    sc_signal< sc_lv<14> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<14> ap_ST_st1_fsm_0;
    static const sc_lv<14> ap_ST_st2_fsm_1;
    static const sc_lv<14> ap_ST_st3_fsm_2;
    static const sc_lv<14> ap_ST_st4_fsm_3;
    static const sc_lv<14> ap_ST_st5_fsm_4;
    static const sc_lv<14> ap_ST_st6_fsm_5;
    static const sc_lv<14> ap_ST_st7_fsm_6;
    static const sc_lv<14> ap_ST_st8_fsm_7;
    static const sc_lv<14> ap_ST_st9_fsm_8;
    static const sc_lv<14> ap_ST_st10_fsm_9;
    static const sc_lv<14> ap_ST_st11_fsm_10;
    static const sc_lv<14> ap_ST_st12_fsm_11;
    static const sc_lv<14> ap_ST_st13_fsm_12;
    static const sc_lv<14> ap_ST_st14_fsm_13;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<12> ap_const_lv12_9C4;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<32> ap_const_lv32_5;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_105();
    void thread_ap_sig_121();
    void thread_ap_sig_131();
    void thread_ap_sig_140();
    void thread_ap_sig_150();
    void thread_ap_sig_160();
    void thread_ap_sig_169();
    void thread_ap_sig_185();
    void thread_ap_sig_31();
    void thread_ap_sig_82();
    void thread_ap_sig_cseq_ST_st13_fsm_12();
    void thread_ap_sig_cseq_ST_st14_fsm_13();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st7_fsm_6();
    void thread_ap_sig_cseq_ST_st8_fsm_7();
    void thread_ap_sig_cseq_ST_st9_fsm_8();
    void thread_col_address0();
    void thread_col_ce0();
    void thread_exitcond_fu_119_p2();
    void thread_extLd_fu_141_p1();
    void thread_i_4_fu_125_p2();
    void thread_i_cast1_fu_115_p1();
    void thread_output_r_address0();
    void thread_output_r_ce0();
    void thread_output_r_d0();
    void thread_output_r_we0();
    void thread_row_address0();
    void thread_row_ce0();
    void thread_tmp_12_fu_145_p3();
    void thread_tmp_6_fu_158_p1();
    void thread_tmp_8_fu_153_p1();
    void thread_tmp_fu_131_p2();
    void thread_tmp_s_fu_136_p1();
    void thread_val_r_address0();
    void thread_val_r_ce0();
    void thread_vector_address0();
    void thread_vector_ce0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
