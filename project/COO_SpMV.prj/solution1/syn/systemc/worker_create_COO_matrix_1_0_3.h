// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __worker_create_COO_matrix_1_0_3_H__
#define __worker_create_COO_matrix_1_0_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct worker_create_COO_matrix_1_0_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 625;
  static const unsigned AddressWidth = 10;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(worker_create_COO_matrix_1_0_3_ram) {
        for (unsigned i = 0; i < 47 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[47] = "0b11000000111110000111100101010001";
        for (unsigned i = 48; i < 153 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[153] = "0b11000000010110110010001010101010";
        for (unsigned i = 154; i < 189 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[189] = "0b11000000110000101110011111110100";
        for (unsigned i = 190; i < 480 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[480] = "0b00111111010000101001000111101100";
        for (unsigned i = 481; i < 492 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[492] = "0b11000000101011000001011110000110";
        for (unsigned i = 493; i < 521 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[521] = "0b01000000101111111100111100111010";
        ram[522] = "0b00111111001110110110001001110010";
        for (unsigned i = 523; i < 553 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[553] = "0b11000000110111110100010110001000";
        for (unsigned i = 554; i < 584 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[584] = "0b01000000110110110001110101010000";
        for (unsigned i = 585; i < 607 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[607] = "0b01000000101100010000010010101100";
        for (unsigned i = 608; i < 625 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(worker_create_COO_matrix_1_0_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 625;
static const unsigned AddressWidth = 10;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


worker_create_COO_matrix_1_0_3_ram* meminst;


SC_CTOR(worker_create_COO_matrix_1_0_3) {
meminst = new worker_create_COO_matrix_1_0_3_ram("worker_create_COO_matrix_1_0_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~worker_create_COO_matrix_1_0_3() {
    delete meminst;
}


};//endmodule
#endif
