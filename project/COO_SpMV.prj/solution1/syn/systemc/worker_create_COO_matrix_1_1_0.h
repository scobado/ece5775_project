// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __worker_create_COO_matrix_1_1_0_H__
#define __worker_create_COO_matrix_1_1_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct worker_create_COO_matrix_1_1_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 625;
  static const unsigned AddressWidth = 10;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(worker_create_COO_matrix_1_1_0_ram) {
        for (unsigned i = 0; i < 36 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[36] = "0b01000001000111101001101111001000";
        for (unsigned i = 37; i < 42 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[42] = "0b11000000110001110010100110001111";
        for (unsigned i = 43; i < 83 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[83] = "0b01000000011100010101100011000011";
        for (unsigned i = 84; i < 95 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[95] = "0b11000000001001011011111101010111";
        for (unsigned i = 96; i < 106 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[106] = "0b10111111001011100010100001001111";
        ram[107] = "0b10111111101001001001010001000001";
        for (unsigned i = 108; i < 173 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[173] = "0b11000000100100010111101111011000";
        for (unsigned i = 174; i < 248 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[248] = "0b00111111101111110110100111110111";
        for (unsigned i = 249; i < 587 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[587] = "0b11000000100100110100100110001000";
        for (unsigned i = 588; i < 610 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[610] = "0b01000000100000000001010100000011";
        for (unsigned i = 611; i < 625 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(worker_create_COO_matrix_1_1_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 625;
static const unsigned AddressWidth = 10;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


worker_create_COO_matrix_1_1_0_ram* meminst;


SC_CTOR(worker_create_COO_matrix_1_1_0) {
meminst = new worker_create_COO_matrix_1_1_0_ram("worker_create_COO_matrix_1_1_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~worker_create_COO_matrix_1_1_0() {
    delete meminst;
}


};//endmodule
#endif
