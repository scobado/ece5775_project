// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __worker_create_COO_matrix_1_1_1_H__
#define __worker_create_COO_matrix_1_1_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct worker_create_COO_matrix_1_1_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 625;
  static const unsigned AddressWidth = 10;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(worker_create_COO_matrix_1_1_1_ram) {
        for (unsigned i = 0; i < 7 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[7] = "0b01000000100111001000101101101110";
        for (unsigned i = 8; i < 27 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[27] = "0b11000001000101111111110111001101";
        for (unsigned i = 28; i < 51 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[51] = "0b01000000011001111111001001010110";
        for (unsigned i = 52; i < 77 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[77] = "0b11000000100111111011101000011010";
        for (unsigned i = 78; i < 137 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[137] = "0b11000000111010010000010000100010";
        for (unsigned i = 138; i < 171 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[171] = "0b01000001000010101100100000001000";
        for (unsigned i = 172; i < 204 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[204] = "0b01000000100011100010011000000000";
        for (unsigned i = 205; i < 232 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[232] = "0b11000001000001011101111010110011";
        for (unsigned i = 233; i < 239 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[239] = "0b00111111100010110110111000110011";
        for (unsigned i = 240; i < 319 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[319] = "0b10111111101000101000011100000010";
        for (unsigned i = 320; i < 359 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[359] = "0b11000000101111010100101100111001";
        for (unsigned i = 360; i < 547 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[547] = "0b01000000101101011110001101000111";
        for (unsigned i = 548; i < 581 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[581] = "0b11000000011100001000100111000010";
        for (unsigned i = 582; i < 625 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(worker_create_COO_matrix_1_1_1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 625;
static const unsigned AddressWidth = 10;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


worker_create_COO_matrix_1_1_1_ram* meminst;


SC_CTOR(worker_create_COO_matrix_1_1_1) {
meminst = new worker_create_COO_matrix_1_1_1_ram("worker_create_COO_matrix_1_1_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~worker_create_COO_matrix_1_1_1() {
    delete meminst;
}


};//endmodule
#endif
