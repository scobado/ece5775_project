// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __worker_create_COO_matrix_1_1_2_H__
#define __worker_create_COO_matrix_1_1_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct worker_create_COO_matrix_1_1_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 625;
  static const unsigned AddressWidth = 10;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(worker_create_COO_matrix_1_1_2_ram) {
        for (unsigned i = 0; i < 145 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[145] = "0b11000000000110110101000111101001";
        for (unsigned i = 146; i < 173 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[173] = "0b10111111101111000001001110011101";
        for (unsigned i = 174; i < 221 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[221] = "0b11000000111011100111011110000101";
        for (unsigned i = 222; i < 227 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[227] = "0b11000000101100100000100000011101";
        for (unsigned i = 228; i < 348 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[348] = "0b00111111010111011100110011010110";
        for (unsigned i = 349; i < 481 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[481] = "0b00111111011000010100101010100011";
        for (unsigned i = 482; i < 537 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[537] = "0b00111111101010111110010011001110";
        for (unsigned i = 538; i < 625 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(worker_create_COO_matrix_1_1_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 625;
static const unsigned AddressWidth = 10;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


worker_create_COO_matrix_1_1_2_ram* meminst;


SC_CTOR(worker_create_COO_matrix_1_1_2) {
meminst = new worker_create_COO_matrix_1_1_2_ram("worker_create_COO_matrix_1_1_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~worker_create_COO_matrix_1_1_2() {
    delete meminst;
}


};//endmodule
#endif
