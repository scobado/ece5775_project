// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __worker_matrix_1_0_H__
#define __worker_matrix_1_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct worker_matrix_1_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 2500;
  static const unsigned AddressWidth = 12;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(worker_matrix_1_0_ram) {
        for (unsigned i = 0; i < 102 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[102] = "0b01000000101100011111100101110110";
        for (unsigned i = 103; i < 174 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[174] = "0b11000001000011001011000010000010";
        for (unsigned i = 175; i < 197 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[197] = "0b11000000111110000111100101010001";
        for (unsigned i = 198; i < 473 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[473] = "0b00111110100101111001000000110001";
        for (unsigned i = 474; i < 678 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[678] = "0b11000000010110110010001010101010";
        for (unsigned i = 679; i < 789 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[789] = "0b11000000110000101110011111110100";
        for (unsigned i = 790; i < 949 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[949] = "0b01000001000010001010110001001111";
        for (unsigned i = 950; i < 1270 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1270] = "0b11000000001001110110111111000100";
        for (unsigned i = 1271; i < 1350 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1350] = "0b01000000110001101111001000011001";
        for (unsigned i = 1351; i < 1629 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1629] = "0b01000000001101000010011011000100";
        for (unsigned i = 1630; i < 1718 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1718] = "0b11000001000011011111000000011100";
        for (unsigned i = 1719; i < 1980 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1980] = "0b00111111010000101001000111101100";
        for (unsigned i = 1981; i < 1992 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1992] = "0b11000000101011000001011110000110";
        for (unsigned i = 1993; i < 2096 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[2096] = "0b01000000101111111100111100111010";
        ram[2097] = "0b00111111001110110110001001110010";
        for (unsigned i = 2098; i < 2114 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[2114] = "0b01000000110000010010010011000101";
        for (unsigned i = 2115; i < 2136 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[2136] = "0b11000000110010010010111000000100";
        for (unsigned i = 2137; i < 2267 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[2267] = "0b11000001000111101110001110101010";
        for (unsigned i = 2268; i < 2278 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[2278] = "0b11000000110111110100010110001000";
        for (unsigned i = 2279; i < 2384 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[2384] = "0b01000000110110110001110101010000";
        for (unsigned i = 2385; i < 2407 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[2407] = "0b11000001000100100000101000111101";
        for (unsigned i = 2408; i < 2417 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[2417] = "0b11000000111010001101000110100001";
        for (unsigned i = 2418; i < 2482 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[2482] = "0b01000000101100010000010010101100";
        for (unsigned i = 2483; i < 2500 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(worker_matrix_1_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 2500;
static const unsigned AddressWidth = 12;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


worker_matrix_1_0_ram* meminst;


SC_CTOR(worker_matrix_1_0) {
meminst = new worker_matrix_1_0_ram("worker_matrix_1_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);


meminst->reset(reset);
meminst->clk(clk);
}
~worker_matrix_1_0() {
    delete meminst;
}


};//endmodule
#endif
