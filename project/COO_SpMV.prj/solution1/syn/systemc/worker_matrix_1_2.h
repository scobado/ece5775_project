// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __worker_matrix_1_2_H__
#define __worker_matrix_1_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct worker_matrix_1_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 2500;
  static const unsigned AddressWidth = 12;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(worker_matrix_1_2_ram) {
        for (unsigned i = 0; i < 71 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[71] = "0b01000001000110111100000111011100";
        for (unsigned i = 72; i < 115 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[115] = "0b00111110100101000111011011111101";
        for (unsigned i = 116; i < 191 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[191] = "0b00111111101100101101110010101101";
        for (unsigned i = 192; i < 463 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[463] = "0b00111111111100000100110110110101";
        for (unsigned i = 464; i < 521 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[521] = "0b00111111101011011001100101011101";
        for (unsigned i = 522; i < 754 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[754] = "0b11000000100011101000100101000110";
        for (unsigned i = 755; i < 785 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[785] = "0b11000001000110100110100010001111";
        for (unsigned i = 786; i < 881 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[881] = "0b11000001000100010001110001001000";
        for (unsigned i = 882; i < 940 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[940] = "0b11000000110011110001000001001011";
        for (unsigned i = 941; i < 1030 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1030] = "0b01000001000010011111010001001000";
        for (unsigned i = 1031; i < 1061 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1061] = "0b11000000110100101001111111011111";
        for (unsigned i = 1062; i < 1080 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1080] = "0b11000000101100110101110011101000";
        for (unsigned i = 1081; i < 1113 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1113] = "0b11000001000011011010111000100100";
        for (unsigned i = 1114; i < 1516 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1516] = "0b01000000101111001011110010101010";
        for (unsigned i = 1517; i < 1542 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1542] = "0b01000000101101101100001100001001";
        ram[1543] = "0b00000000000000000000000000000000";
        ram[1544] = "0b11000000010000100110110011011101";
        for (unsigned i = 1545; i < 1562 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1562] = "0b11000000111010010001001000001000";
        for (unsigned i = 1563; i < 1765 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1765] = "0b10111111100011011011000011110110";
        for (unsigned i = 1766; i < 1830 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1830] = "0b01000000101000101010001100001001";
        for (unsigned i = 1831; i < 2269 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[2269] = "0b11000000111010100100111111110101";
        for (unsigned i = 2270; i < 2373 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[2373] = "0b10111111000100011100001011100110";
        for (unsigned i = 2374; i < 2389 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[2389] = "0b10111110010001111111001010001101";
        for (unsigned i = 2390; i < 2500 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(worker_matrix_1_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 2500;
static const unsigned AddressWidth = 12;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


worker_matrix_1_2_ram* meminst;


SC_CTOR(worker_matrix_1_2) {
meminst = new worker_matrix_1_2_ram("worker_matrix_1_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);


meminst->reset(reset);
meminst->clk(clk);
}
~worker_matrix_1_2() {
    delete meminst;
}


};//endmodule
#endif
