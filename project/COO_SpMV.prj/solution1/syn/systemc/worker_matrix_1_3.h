// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __worker_matrix_1_3_H__
#define __worker_matrix_1_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct worker_matrix_1_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 2500;
  static const unsigned AddressWidth = 12;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(worker_matrix_1_3_ram) {
        for (unsigned i = 0; i < 184 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[184] = "0b11000000010110101011100010010110";
        for (unsigned i = 185; i < 584 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[584] = "0b10111111010000110111100100011000";
        for (unsigned i = 585; i < 597 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[597] = "0b01000000110110110010101111101000";
        for (unsigned i = 598; i < 729 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[729] = "0b10111111111000101000101100111011";
        for (unsigned i = 730; i < 905 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[905] = "0b11000001000101110110101000110010";
        for (unsigned i = 906; i < 926 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[926] = "0b01000000100100010011000110010010";
        for (unsigned i = 927; i < 977 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[977] = "0b11000000111011101111001001011001";
        for (unsigned i = 978; i < 1040 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1040] = "0b01000001000101011001100010111111";
        for (unsigned i = 1041; i < 1346 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1346] = "0b01000001000000101011100111100011";
        for (unsigned i = 1347; i < 1369 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1369] = "0b11000000010110111011111111110101";
        for (unsigned i = 1370; i < 1397 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1397] = "0b01000000101100001110010111010110";
        for (unsigned i = 1398; i < 1420 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1420] = "0b01000001000110111001100100101010";
        for (unsigned i = 1421; i < 1458 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1458] = "0b00111111011110011011001010001010";
        for (unsigned i = 1459; i < 1570 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1570] = "0b10111111110100000010101110011101";
        for (unsigned i = 1571; i < 1652 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[1652] = "0b00111101100001010011011011010110";
        for (unsigned i = 1653; i < 2021 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[2021] = "0b11000000100100101111110001001100";
        for (unsigned i = 2022; i < 2034 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[2034] = "0b10111110010100101001101111011110";
        for (unsigned i = 2035; i < 2155 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[2155] = "0b11000000101100010111000100001100";
        for (unsigned i = 2156; i < 2254 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[2254] = "0b01000000110000011001000110111011";
        for (unsigned i = 2255; i < 2500 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(worker_matrix_1_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 2500;
static const unsigned AddressWidth = 12;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


worker_matrix_1_3_ram* meminst;


SC_CTOR(worker_matrix_1_3) {
meminst = new worker_matrix_1_3_ram("worker_matrix_1_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);


meminst->reset(reset);
meminst->clk(clk);
}
~worker_matrix_1_3() {
    delete meminst;
}


};//endmodule
#endif
