// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="COO_SpMV,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.412000,HLS_SYN_LAT=70102,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=533,HLS_SYN_LUT=817}" *)

module COO_SpMV (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        row_address0,
        row_ce0,
        row_q0,
        col_address0,
        col_ce0,
        col_q0,
        val_r_address0,
        val_r_ce0,
        val_r_q0,
        vector_address0,
        vector_ce0,
        vector_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        nnz
);

parameter    ap_ST_st1_fsm_0 = 14'b1;
parameter    ap_ST_st2_fsm_1 = 14'b10;
parameter    ap_ST_st3_fsm_2 = 14'b100;
parameter    ap_ST_st4_fsm_3 = 14'b1000;
parameter    ap_ST_st5_fsm_4 = 14'b10000;
parameter    ap_ST_st6_fsm_5 = 14'b100000;
parameter    ap_ST_st7_fsm_6 = 14'b1000000;
parameter    ap_ST_st8_fsm_7 = 14'b10000000;
parameter    ap_ST_st9_fsm_8 = 14'b100000000;
parameter    ap_ST_st10_fsm_9 = 14'b1000000000;
parameter    ap_ST_st11_fsm_10 = 14'b10000000000;
parameter    ap_ST_st12_fsm_11 = 14'b100000000000;
parameter    ap_ST_st13_fsm_12 = 14'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 14'b10000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv14_0 = 14'b00000000000000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv7_64 = 7'b1100100;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv14_2710 = 14'b10011100010000;
parameter    ap_const_lv14_1 = 14'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] row_address0;
output   row_ce0;
input  [31:0] row_q0;
output  [13:0] col_address0;
output   col_ce0;
input  [31:0] col_q0;
output  [13:0] val_r_address0;
output   val_r_ce0;
input  [31:0] val_r_q0;
output  [6:0] vector_address0;
output   vector_ce0;
input  [31:0] vector_q0;
output  [6:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
input  [31:0] nnz;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg row_ce0;
reg col_ce0;
reg val_r_ce0;
reg vector_ce0;
reg[6:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_29;
wire   [6:0] i_1_fu_159_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_81;
wire   [13:0] i_2_fu_180_p2;
reg   [13:0] i_2_reg_224;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_90;
wire   [0:0] tmp_2_fu_186_p2;
reg   [0:0] tmp_2_reg_229;
wire   [0:0] exitcond1_fu_174_p2;
reg   [31:0] val_load_reg_248;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_114;
reg   [6:0] output_addr_1_reg_258;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_126;
wire   [31:0] grp_fu_148_p2;
reg   [31:0] tmp_5_reg_268;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_135;
reg   [31:0] output_load_reg_273;
wire   [31:0] grp_fu_144_p2;
reg   [31:0] tmp_7_reg_278;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_145;
reg   [6:0] i_reg_122;
wire   [0:0] exitcond2_fu_153_p2;
reg   [13:0] i1_reg_133;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_160;
wire   [63:0] tmp_fu_165_p1;
wire   [63:0] tmp_3_fu_191_p1;
wire  signed [63:0] tmp_4_fu_198_p1;
wire  signed [63:0] tmp_6_fu_203_p1;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_175;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_191;
wire   [31:0] i1_cast1_fu_170_p1;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'b1;
end

COO_SpMV_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
COO_SpMV_fadd_32ns_32ns_32_5_full_dsp_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(output_load_reg_273),
    .din1(tmp_5_reg_268),
    .ce(1'b1),
    .dout(grp_fu_144_p2)
);

COO_SpMV_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
COO_SpMV_fmul_32ns_32ns_32_4_max_dsp_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(val_load_reg_248),
    .din1(vector_q0),
    .ce(1'b1),
    .dout(grp_fu_148_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond2_fu_153_p2))) begin
        i1_reg_133 <= ap_const_lv14_0;
    end else if ((1'b1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        i1_reg_133 <= i_2_reg_224;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond2_fu_153_p2))) begin
        i_reg_122 <= i_1_fu_159_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_122 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_2_reg_224 <= i_2_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        output_addr_1_reg_258 <= tmp_6_fu_203_p1;
        val_load_reg_248 <= val_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        output_load_reg_273 <= output_r_q0;
        tmp_5_reg_268 <= grp_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond1_fu_174_p2 == 1'b0))) begin
        tmp_2_reg_229 <= tmp_2_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        tmp_7_reg_278 <= grp_fu_144_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond1_fu_174_p2 == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond1_fu_174_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_145) begin
        ap_sig_cseq_ST_st13_fsm_12 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_160) begin
        ap_sig_cseq_ST_st14_fsm_13 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_29) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_81) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_90) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_114) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_126) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_175) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_135) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_191) begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        col_ce0 = 1'b1;
    end else begin
        col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_r_address0 = tmp_fu_165_p1;
    end else if (((1'b1 == ap_sig_cseq_ST_st14_fsm_13) | (1'b1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        output_r_address0 = output_addr_1_reg_258;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st14_fsm_13) | (1'b1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        output_r_d0 = tmp_7_reg_278;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_r_d0 = ap_const_lv32_0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond2_fu_153_p2)) | ((1'b1 == ap_sig_cseq_ST_st14_fsm_13) & ~(tmp_2_reg_229 == 1'b0)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        row_ce0 = 1'b1;
    end else begin
        row_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        val_r_ce0 = 1'b1;
    end else begin
        val_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        vector_ce0 = 1'b1;
    end else begin
        vector_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if ((1'b0 == exitcond2_fu_153_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if (~(exitcond1_fu_174_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if (((exitcond1_fu_174_p2 == 1'b0) & (tmp_2_fu_186_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_114 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_126 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_135 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_145 = (1'b1 == ap_CS_fsm[ap_const_lv32_C]);
end

always @ (*) begin
    ap_sig_160 = (1'b1 == ap_CS_fsm[ap_const_lv32_D]);
end

always @ (*) begin
    ap_sig_175 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_191 = (1'b1 == ap_CS_fsm[ap_const_lv32_8]);
end

always @ (*) begin
    ap_sig_29 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_81 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_90 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign col_address0 = tmp_3_fu_191_p1;

assign exitcond1_fu_174_p2 = ((i1_reg_133 == ap_const_lv14_2710) ? 1'b1 : 1'b0);

assign exitcond2_fu_153_p2 = ((i_reg_122 == ap_const_lv7_64) ? 1'b1 : 1'b0);

assign i1_cast1_fu_170_p1 = i1_reg_133;

assign i_1_fu_159_p2 = (i_reg_122 + ap_const_lv7_1);

assign i_2_fu_180_p2 = (i1_reg_133 + ap_const_lv14_1);

assign row_address0 = tmp_3_fu_191_p1;

assign tmp_2_fu_186_p2 = (($signed(i1_cast1_fu_170_p1) < $signed(nnz)) ? 1'b1 : 1'b0);

assign tmp_3_fu_191_p1 = i1_reg_133;

assign tmp_4_fu_198_p1 = $signed(col_q0);

assign tmp_6_fu_203_p1 = $signed(row_q0);

assign tmp_fu_165_p1 = i_reg_122;

assign val_r_address0 = tmp_3_fu_191_p1;

assign vector_address0 = tmp_4_fu_198_p1;

endmodule //COO_SpMV
