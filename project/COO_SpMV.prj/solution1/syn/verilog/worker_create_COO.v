// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module worker_create_COO (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        row_address0,
        row_ce0,
        row_we0,
        row_d0,
        col_address0,
        col_ce0,
        col_we0,
        col_d0,
        val_r_address0,
        val_r_ce0,
        val_r_we0,
        val_r_d0,
        ap_return
);

parameter    ap_ST_st1_fsm_0 = 7'b1;
parameter    ap_ST_st2_fsm_1 = 7'b10;
parameter    ap_ST_st3_fsm_2 = 7'b100;
parameter    ap_ST_st4_fsm_3 = 7'b1000;
parameter    ap_ST_st5_fsm_4 = 7'b10000;
parameter    ap_ST_st6_fsm_5 = 7'b100000;
parameter    ap_ST_st7_fsm_6 = 7'b1000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv12_64 = 12'b1100100;
parameter    ap_const_lv5_19 = 5'b11001;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv7_64 = 7'b1100100;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv12_9C4 = 12'b100111000100;
parameter    ap_const_lv12_1 = 12'b1;
parameter    ap_const_lv32_8 = 32'b1000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [11:0] row_address0;
output   row_ce0;
output   row_we0;
output  [4:0] row_d0;
output  [11:0] col_address0;
output   col_ce0;
output   col_we0;
output  [6:0] col_d0;
output  [11:0] val_r_address0;
output   val_r_ce0;
output   val_r_we0;
output  [31:0] val_r_d0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg row_ce0;
reg row_we0;
reg col_ce0;
reg col_we0;
reg val_r_ce0;
reg val_r_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_24;
wire   [11:0] next_mul_fu_249_p2;
reg   [11:0] next_mul_reg_455;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_64;
wire   [4:0] i_2_fu_261_p2;
reg   [4:0] i_2_reg_463;
wire   [6:0] j_1_fu_283_p2;
reg   [6:0] j_1_reg_485;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_75;
wire   [0:0] exitcond1_fu_277_p2;
reg   [31:0] input_load_reg_495;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_89;
wire   [11:0] i_1_fu_373_p2;
reg   [11:0] i_1_reg_508;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_98;
reg   [31:0] counter_load_reg_513;
wire   [0:0] exitcond_fu_367_p2;
wire   [0:0] tmp_s_fu_379_p2;
reg   [0:0] tmp_s_reg_518;
reg   [11:0] temp_row_address0;
reg    temp_row_ce0;
reg    temp_row_we0;
wire   [4:0] temp_row_q0;
reg   [11:0] temp_col_address0;
reg    temp_col_ce0;
reg    temp_col_we0;
wire   [6:0] temp_col_q0;
reg   [11:0] temp_val_address0;
reg    temp_val_ce0;
reg    temp_val_we0;
wire   [31:0] temp_val_q0;
reg   [4:0] i_reg_187;
reg   [11:0] phi_mul_reg_200;
reg   [6:0] j_reg_212;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_165;
wire   [0:0] exitcond2_fu_255_p2;
reg   [11:0] i1_reg_225;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_180;
wire   [63:0] tmp_11_cast_fu_299_p1;
wire  signed [63:0] tmp_6_fu_345_p1;
wire   [0:0] tmp_9_fu_339_p2;
wire   [63:0] tmp_3_fu_385_p1;
wire  signed [63:0] tmp_4_fu_398_p1;
reg   [31:0] counter_fu_58;
wire   [31:0] counter_1_fu_352_p2;
reg   [31:0] cur_ind_1_fu_74;
wire   [31:0] start_0_s_fu_430_p3;
reg   [31:0] cur_ind_fu_78;
wire   [31:0] p_start_fu_422_p3;
wire   [11:0] tmp_1_cast_fu_289_p1;
wire   [11:0] tmp_1_fu_293_p2;
wire   [31:0] input_load_to_int_fu_304_p1;
wire   [7:0] tmp_fu_307_p4;
wire   [22:0] tmp_10_fu_317_p1;
wire   [0:0] notrhs_fu_327_p2;
wire   [0:0] notlhs_fu_321_p2;
wire   [0:0] tmp_7_fu_333_p2;
wire   [0:0] tmp_8_fu_236_p2;
wire   [31:0] i1_cast1_fu_363_p1;
wire   [31:0] cur_ind_2_fu_405_p2;
wire   [0:0] tmp_5_fu_411_p2;
wire   [31:0] start_fu_416_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'b1;
end

worker_create_COO_temp_row #(
    .DataWidth( 5 ),
    .AddressRange( 2500 ),
    .AddressWidth( 12 ))
temp_row_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_row_address0),
    .ce0(temp_row_ce0),
    .we0(temp_row_we0),
    .d0(i_reg_187),
    .q0(temp_row_q0)
);

worker_create_COO_temp_col #(
    .DataWidth( 7 ),
    .AddressRange( 2500 ),
    .AddressWidth( 12 ))
temp_col_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_col_address0),
    .ce0(temp_col_ce0),
    .we0(temp_col_we0),
    .d0(j_reg_212),
    .q0(temp_col_q0)
);

worker_create_COO_temp_val #(
    .DataWidth( 32 ),
    .AddressRange( 2500 ),
    .AddressWidth( 12 ))
temp_val_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_val_address0),
    .ce0(temp_val_ce0),
    .we0(temp_val_we0),
    .d0(input_load_reg_495),
    .q0(temp_val_q0)
);

worker_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
worker_fcmp_32ns_32ns_1_1_U1(
    .din0(input_load_reg_495),
    .din1(ap_const_lv32_0),
    .opcode(ap_const_lv5_1),
    .dout(tmp_8_fu_236_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (1'b0 == tmp_9_fu_339_p2))) begin
        counter_fu_58 <= counter_1_fu_352_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        counter_fu_58 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == tmp_s_reg_518))) begin
        cur_ind_1_fu_74 <= start_0_s_fu_430_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond2_fu_255_p2))) begin
        cur_ind_1_fu_74 <= ap_const_lv32_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == tmp_s_reg_518))) begin
        cur_ind_fu_78 <= p_start_fu_422_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond2_fu_255_p2))) begin
        cur_ind_fu_78 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        i1_reg_225 <= i_1_reg_508;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond2_fu_255_p2))) begin
        i1_reg_225 <= ap_const_lv12_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond1_fu_277_p2 == 1'b0))) begin
        i_reg_187 <= i_2_reg_463;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_187 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond2_fu_255_p2))) begin
        j_reg_212 <= ap_const_lv7_0;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        j_reg_212 <= j_1_reg_485;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond1_fu_277_p2 == 1'b0))) begin
        phi_mul_reg_200 <= next_mul_reg_455;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        phi_mul_reg_200 <= ap_const_lv12_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond_fu_367_p2))) begin
        counter_load_reg_513 <= counter_fu_58;
        tmp_s_reg_518 <= tmp_s_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        i_1_reg_508 <= i_1_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_2_reg_463 <= i_2_fu_261_p2;
        next_mul_reg_455 <= next_mul_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        input_load_reg_495 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_1_reg_485 <= j_1_fu_283_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == exitcond_fu_367_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == exitcond_fu_367_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_24) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_64) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_75) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_89) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_165) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_98) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_180) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        col_ce0 = 1'b1;
    end else begin
        col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == tmp_s_reg_518))) begin
        col_we0 = 1'b1;
    end else begin
        col_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        row_ce0 = 1'b1;
    end else begin
        row_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == tmp_s_reg_518))) begin
        row_we0 = 1'b1;
    end else begin
        row_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        temp_col_address0 = tmp_6_fu_345_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        temp_col_address0 = tmp_3_fu_385_p1;
    end else begin
        temp_col_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        temp_col_ce0 = 1'b1;
    end else begin
        temp_col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (1'b0 == tmp_9_fu_339_p2))) begin
        temp_col_we0 = 1'b1;
    end else begin
        temp_col_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        temp_row_address0 = tmp_6_fu_345_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        temp_row_address0 = tmp_3_fu_385_p1;
    end else begin
        temp_row_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        temp_row_ce0 = 1'b1;
    end else begin
        temp_row_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (1'b0 == tmp_9_fu_339_p2))) begin
        temp_row_we0 = 1'b1;
    end else begin
        temp_row_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        temp_val_address0 = tmp_6_fu_345_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        temp_val_address0 = tmp_3_fu_385_p1;
    end else begin
        temp_val_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        temp_val_ce0 = 1'b1;
    end else begin
        temp_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (1'b0 == tmp_9_fu_339_p2))) begin
        temp_val_we0 = 1'b1;
    end else begin
        temp_val_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        val_r_ce0 = 1'b1;
    end else begin
        val_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == tmp_s_reg_518))) begin
        val_r_we0 = 1'b1;
    end else begin
        val_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(1'b0 == exitcond2_fu_255_p2)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if ((exitcond1_fu_277_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st6_fsm_5 : begin
            if (~(1'b0 == exitcond_fu_367_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_return = counter_fu_58;

always @ (*) begin
    ap_sig_165 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_180 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_24 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_64 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_75 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_89 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_98 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

assign col_address0 = tmp_4_fu_398_p1;

assign col_d0 = temp_col_q0;

assign counter_1_fu_352_p2 = (counter_fu_58 + ap_const_lv32_1);

assign cur_ind_2_fu_405_p2 = (cur_ind_fu_78 + ap_const_lv32_8);

assign exitcond1_fu_277_p2 = ((j_reg_212 == ap_const_lv7_64) ? 1'b1 : 1'b0);

assign exitcond2_fu_255_p2 = ((i_reg_187 == ap_const_lv5_19) ? 1'b1 : 1'b0);

assign exitcond_fu_367_p2 = ((i1_reg_225 == ap_const_lv12_9C4) ? 1'b1 : 1'b0);

assign i1_cast1_fu_363_p1 = i1_reg_225;

assign i_1_fu_373_p2 = (i1_reg_225 + ap_const_lv12_1);

assign i_2_fu_261_p2 = (i_reg_187 + ap_const_lv5_1);

assign input_load_to_int_fu_304_p1 = input_load_reg_495;

assign input_r_address0 = tmp_11_cast_fu_299_p1;

assign j_1_fu_283_p2 = (j_reg_212 + ap_const_lv7_1);

assign next_mul_fu_249_p2 = (phi_mul_reg_200 + ap_const_lv12_64);

assign notlhs_fu_321_p2 = ((tmp_fu_307_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notrhs_fu_327_p2 = ((tmp_10_fu_317_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign p_start_fu_422_p3 = ((tmp_5_fu_411_p2[0:0] === 1'b1) ? cur_ind_2_fu_405_p2 : cur_ind_1_fu_74);

assign row_address0 = tmp_4_fu_398_p1;

assign row_d0 = temp_row_q0;

assign start_0_s_fu_430_p3 = ((tmp_5_fu_411_p2[0:0] === 1'b1) ? cur_ind_1_fu_74 : start_fu_416_p2);

assign start_fu_416_p2 = (cur_ind_1_fu_74 + ap_const_lv32_1);

assign tmp_10_fu_317_p1 = input_load_to_int_fu_304_p1[22:0];

assign tmp_11_cast_fu_299_p1 = tmp_1_fu_293_p2;

assign tmp_1_cast_fu_289_p1 = j_reg_212;

assign tmp_1_fu_293_p2 = (phi_mul_reg_200 + tmp_1_cast_fu_289_p1);

assign tmp_3_fu_385_p1 = i1_reg_225;

assign tmp_4_fu_398_p1 = $signed(cur_ind_fu_78);

assign tmp_5_fu_411_p2 = (($signed(cur_ind_2_fu_405_p2) < $signed(counter_load_reg_513)) ? 1'b1 : 1'b0);

assign tmp_6_fu_345_p1 = $signed(counter_fu_58);

assign tmp_7_fu_333_p2 = (notrhs_fu_327_p2 | notlhs_fu_321_p2);

assign tmp_9_fu_339_p2 = (tmp_7_fu_333_p2 & tmp_8_fu_236_p2);

assign tmp_fu_307_p4 = {{input_load_to_int_fu_304_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_s_fu_379_p2 = (($signed(i1_cast1_fu_363_p1) < $signed(counter_fu_58)) ? 1'b1 : 1'b0);

assign val_r_address0 = tmp_4_fu_398_p1;

assign val_r_d0 = temp_val_q0;

endmodule //worker_create_COO
