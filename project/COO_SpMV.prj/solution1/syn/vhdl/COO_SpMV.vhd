-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity COO_SpMV is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    row_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    row_ce0 : OUT STD_LOGIC;
    row_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    col_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    col_ce0 : OUT STD_LOGIC;
    col_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    val_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    val_r_ce0 : OUT STD_LOGIC;
    val_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    vector_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    vector_ce0 : OUT STD_LOGIC;
    vector_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_r_ce1 : OUT STD_LOGIC;
    output_r_we1 : OUT STD_LOGIC;
    output_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    nnz : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of COO_SpMV is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "COO_SpMV,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.412000,HLS_SYN_LAT=10113,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=521,HLS_SYN_LUT=789}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st15_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv14_2710 : STD_LOGIC_VECTOR (13 downto 0) := "10011100010000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_19 : BOOLEAN;
    signal i1_reg_150 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond1_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_77 : BOOLEAN;
    signal i_1_fu_176_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_88 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal i_2_fu_193_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_2_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_248 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_248_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_248_pp0_iter2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_248_pp0_iter3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_248_pp0_iter4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_248_pp0_iter5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_248_pp0_iter6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_248_pp0_iter7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_248_pp0_iter8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_248_pp0_iter9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_248_pp0_iter10 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_load_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_addr_1_reg_277 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_output_addr_1_reg_277_pp0_iter2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_output_addr_1_reg_277_pp0_iter3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_output_addr_1_reg_277_pp0_iter4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_output_addr_1_reg_277_pp0_iter5 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_output_addr_1_reg_277_pp0_iter6 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_output_addr_1_reg_277_pp0_iter7 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_output_addr_1_reg_277_pp0_iter8 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_output_addr_1_reg_277_pp0_iter9 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_output_addr_1_reg_277_pp0_iter10 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_165_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_load_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_139 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_182_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i1_cast1_fu_199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_3 : STD_LOGIC;
    signal ap_sig_274 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component COO_SpMV_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component COO_SpMV_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    COO_SpMV_fadd_32ns_32ns_32_5_full_dsp_U1 : component COO_SpMV_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => output_load_reg_293,
        din1 => tmp_5_reg_288,
        ce => ap_const_logic_1,
        dout => grp_fu_161_p2);

    COO_SpMV_fmul_32ns_32ns_32_4_max_dsp_U2 : component COO_SpMV_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => val_load_reg_267,
        din1 => vector_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_165_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((exitcond_fu_187_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_170_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond_fu_187_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_170_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((exitcond_fu_187_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
            end if;
        end if;
    end process;


    i1_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_170_p2 = ap_const_lv1_0)))) then 
                i1_reg_150 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_fu_187_p2 = ap_const_lv1_0))) then 
                i1_reg_150 <= i_2_fu_193_p2;
            end if; 
        end if;
    end process;

    i_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_170_p2 = ap_const_lv1_0))) then 
                i_reg_139 <= i_1_fu_176_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_139 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_output_addr_1_reg_277_pp0_iter10 <= ap_reg_ppstg_output_addr_1_reg_277_pp0_iter9;
                ap_reg_ppstg_output_addr_1_reg_277_pp0_iter2 <= output_addr_1_reg_277;
                ap_reg_ppstg_output_addr_1_reg_277_pp0_iter3 <= ap_reg_ppstg_output_addr_1_reg_277_pp0_iter2;
                ap_reg_ppstg_output_addr_1_reg_277_pp0_iter4 <= ap_reg_ppstg_output_addr_1_reg_277_pp0_iter3;
                ap_reg_ppstg_output_addr_1_reg_277_pp0_iter5 <= ap_reg_ppstg_output_addr_1_reg_277_pp0_iter4;
                ap_reg_ppstg_output_addr_1_reg_277_pp0_iter6 <= ap_reg_ppstg_output_addr_1_reg_277_pp0_iter5;
                ap_reg_ppstg_output_addr_1_reg_277_pp0_iter7 <= ap_reg_ppstg_output_addr_1_reg_277_pp0_iter6;
                ap_reg_ppstg_output_addr_1_reg_277_pp0_iter8 <= ap_reg_ppstg_output_addr_1_reg_277_pp0_iter7;
                ap_reg_ppstg_output_addr_1_reg_277_pp0_iter9 <= ap_reg_ppstg_output_addr_1_reg_277_pp0_iter8;
                ap_reg_ppstg_tmp_2_reg_248_pp0_iter10 <= ap_reg_ppstg_tmp_2_reg_248_pp0_iter9;
                ap_reg_ppstg_tmp_2_reg_248_pp0_iter2 <= ap_reg_ppstg_tmp_2_reg_248_pp0_iter1;
                ap_reg_ppstg_tmp_2_reg_248_pp0_iter3 <= ap_reg_ppstg_tmp_2_reg_248_pp0_iter2;
                ap_reg_ppstg_tmp_2_reg_248_pp0_iter4 <= ap_reg_ppstg_tmp_2_reg_248_pp0_iter3;
                ap_reg_ppstg_tmp_2_reg_248_pp0_iter5 <= ap_reg_ppstg_tmp_2_reg_248_pp0_iter4;
                ap_reg_ppstg_tmp_2_reg_248_pp0_iter6 <= ap_reg_ppstg_tmp_2_reg_248_pp0_iter5;
                ap_reg_ppstg_tmp_2_reg_248_pp0_iter7 <= ap_reg_ppstg_tmp_2_reg_248_pp0_iter6;
                ap_reg_ppstg_tmp_2_reg_248_pp0_iter8 <= ap_reg_ppstg_tmp_2_reg_248_pp0_iter7;
                ap_reg_ppstg_tmp_2_reg_248_pp0_iter9 <= ap_reg_ppstg_tmp_2_reg_248_pp0_iter8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2)) then
                ap_reg_ppstg_tmp_2_reg_248_pp0_iter1 <= tmp_2_reg_248;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((tmp_2_reg_248 = ap_const_lv1_0)))) then
                output_addr_1_reg_277 <= tmp_6_fu_220_p1(7 - 1 downto 0);
                val_load_reg_267 <= val_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_2_reg_248_pp0_iter4)))) then
                output_load_reg_293 <= output_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond_fu_187_p2 = ap_const_lv1_0))) then
                tmp_2_reg_248 <= tmp_2_fu_203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_2_reg_248_pp0_iter4))) then
                tmp_5_reg_288 <= grp_fu_165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_2_reg_248_pp0_iter9))) then
                tmp_7_reg_298 <= grp_fu_161_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_170_p2, exitcond_fu_187_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it10, ap_reg_ppiten_pp0_it11)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((exitcond1_fu_170_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it11) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_fu_187_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_fu_187_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_3;
                end if;
            when ap_ST_st15_fsm_3 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_sig_cseq_ST_st15_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st15_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_19_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_19 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_274_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_274 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_77_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_77 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_88_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_88 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_2_assign_proc : process(ap_sig_88)
    begin
        if (ap_sig_88) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_3_assign_proc : process(ap_sig_274)
    begin
        if (ap_sig_274) then 
            ap_sig_cseq_ST_st15_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_19)
    begin
        if (ap_sig_19) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_77)
    begin
        if (ap_sig_77) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    col_address0 <= tmp_3_fu_208_p1(14 - 1 downto 0);

    col_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            col_ce0 <= ap_const_logic_1;
        else 
            col_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_170_p2 <= "1" when (i_reg_139 = ap_const_lv7_64) else "0";
    exitcond_fu_187_p2 <= "1" when (i1_reg_150 = ap_const_lv14_2710) else "0";
    i1_cast1_fu_199_p1 <= std_logic_vector(resize(unsigned(i1_reg_150),32));
    i_1_fu_176_p2 <= std_logic_vector(unsigned(i_reg_139) + unsigned(ap_const_lv7_1));
    i_2_fu_193_p2 <= std_logic_vector(unsigned(i1_reg_150) + unsigned(ap_const_lv14_1));

    output_r_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_reg_ppiten_pp0_it4, ap_reg_ppstg_output_addr_1_reg_277_pp0_iter3, tmp_fu_182_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_r_address0 <= tmp_fu_182_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4)) then 
            output_r_address0 <= ap_reg_ppstg_output_addr_1_reg_277_pp0_iter3;
        else 
            output_r_address0 <= "XXXXXXX";
        end if; 
    end process;

    output_r_address1 <= ap_reg_ppstg_output_addr_1_reg_277_pp0_iter10;

    output_r_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_reg_ppiten_pp0_it4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it4))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_ce1_assign_proc : process(ap_reg_ppiten_pp0_it11)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it11)) then 
            output_r_ce1 <= ap_const_logic_1;
        else 
            output_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= ap_const_lv32_0;
    output_r_d1 <= tmp_7_reg_298;

    output_r_we0_assign_proc : process(exitcond1_fu_170_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_170_p2 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_we1_assign_proc : process(ap_reg_ppiten_pp0_it11, ap_reg_ppstg_tmp_2_reg_248_pp0_iter10)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it11) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_2_reg_248_pp0_iter10))))) then 
            output_r_we1 <= ap_const_logic_1;
        else 
            output_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    row_address0 <= tmp_3_fu_208_p1(14 - 1 downto 0);

    row_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            row_ce0 <= ap_const_logic_1;
        else 
            row_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_203_p2 <= "1" when (signed(i1_cast1_fu_199_p1) < signed(nnz)) else "0";
    tmp_3_fu_208_p1 <= std_logic_vector(resize(unsigned(i1_reg_150),64));
        tmp_4_fu_215_p1 <= std_logic_vector(resize(signed(col_q0),64));

        tmp_6_fu_220_p1 <= std_logic_vector(resize(signed(row_q0),64));

    tmp_fu_182_p1 <= std_logic_vector(resize(unsigned(i_reg_139),64));
    val_r_address0 <= tmp_3_fu_208_p1(14 - 1 downto 0);

    val_r_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            val_r_ce0 <= ap_const_logic_1;
        else 
            val_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    vector_address0 <= tmp_4_fu_215_p1(7 - 1 downto 0);

    vector_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            vector_ce0 <= ap_const_logic_1;
        else 
            vector_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
