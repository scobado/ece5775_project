-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity worker_COO_SpMV is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    row_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    row_ce0 : OUT STD_LOGIC;
    row_q0 : IN STD_LOGIC_VECTOR (6 downto 0);
    col_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    col_ce0 : OUT STD_LOGIC;
    col_q0 : IN STD_LOGIC_VECTOR (6 downto 0);
    val_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    val_r_ce0 : OUT STD_LOGIC;
    val_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_0_ce1 : OUT STD_LOGIC;
    output_0_we1 : OUT STD_LOGIC;
    output_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_1_ce0 : OUT STD_LOGIC;
    output_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_1_ce1 : OUT STD_LOGIC;
    output_1_we1 : OUT STD_LOGIC;
    output_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_2_ce0 : OUT STD_LOGIC;
    output_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_2_ce1 : OUT STD_LOGIC;
    output_2_we1 : OUT STD_LOGIC;
    output_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_3_ce0 : OUT STD_LOGIC;
    output_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_3_ce1 : OUT STD_LOGIC;
    output_3_we1 : OUT STD_LOGIC;
    output_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    nnz : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of worker_COO_SpMV is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st21_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv28_2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_const_lv12_9C4 : STD_LOGIC_VECTOR (11 downto 0) := "100111000100";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv7_19 : STD_LOGIC_VECTOR (6 downto 0) := "0011001";
    constant ap_const_lv65_147AE147B : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101000111101011100001010001111011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_20 : BOOLEAN;
    signal vector_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal vector_ce0 : STD_LOGIC;
    signal vector_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_180 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_105 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it18 : STD_LOGIC := '0';
    signal i_4_fu_206_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_298 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_298_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_298_pp0_iter2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_298_pp0_iter3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_298_pp0_iter4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_298_pp0_iter5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_298_pp0_iter6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_298_pp0_iter7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_298_pp0_iter8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_298_pp0_iter9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_298_pp0_iter10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_298_pp0_iter11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_298_pp0_iter12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_298_pp0_iter13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_298_pp0_iter14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_298_pp0_iter15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_298_pp0_iter16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_298_pp0_iter17 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_load_reg_317 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_load_reg_327 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_row_load_reg_327_pp0_iter2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_row_load_reg_327_pp0_iter3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_row_load_reg_327_pp0_iter4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_row_load_reg_327_pp0_iter5 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_row_load_reg_327_pp0_iter6 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_row_load_reg_327_pp0_iter7 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_row_load_reg_327_pp0_iter8 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_row_load_reg_327_pp0_iter9 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_338_pp0_iter6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_338_pp0_iter7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_338_pp0_iter8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_338_pp0_iter9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_338_pp0_iter10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_338_pp0_iter11 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_338_pp0_iter12 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_0_addr_reg_348 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_0_addr_reg_348_pp0_iter12 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_0_addr_reg_348_pp0_iter13 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_0_addr_reg_348_pp0_iter14 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_0_addr_reg_348_pp0_iter15 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_0_addr_reg_348_pp0_iter16 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_0_addr_reg_348_pp0_iter17 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_1_addr_reg_354 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_1_addr_reg_354_pp0_iter12 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_1_addr_reg_354_pp0_iter13 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_1_addr_reg_354_pp0_iter14 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_1_addr_reg_354_pp0_iter15 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_1_addr_reg_354_pp0_iter16 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_1_addr_reg_354_pp0_iter17 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_2_addr_reg_360 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_2_addr_reg_360_pp0_iter12 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_2_addr_reg_360_pp0_iter13 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_2_addr_reg_360_pp0_iter14 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_2_addr_reg_360_pp0_iter15 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_2_addr_reg_360_pp0_iter16 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_2_addr_reg_360_pp0_iter17 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_3_addr_reg_366 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_3_addr_reg_366_pp0_iter12 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_3_addr_reg_366_pp0_iter13 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_3_addr_reg_366_pp0_iter14 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_3_addr_reg_366_pp0_iter15 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_3_addr_reg_366_pp0_iter16 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_output_3_addr_reg_366_pp0_iter17 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_fu_256_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_19_reg_372 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_reg_ppstg_tmp_19_reg_372_pp0_iter13 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_reg_ppstg_tmp_19_reg_372_pp0_iter14 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_reg_ppstg_tmp_19_reg_372_pp0_iter15 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_reg_ppstg_tmp_19_reg_372_pp0_iter16 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_reg_ppstg_tmp_19_reg_372_pp0_iter17 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_13_fu_270_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_191_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex4_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast1_fu_212_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_233_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_242_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_242_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_233_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_242_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_13_fu_270_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_2 : STD_LOGIC;
    signal ap_sig_412 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_242_p00 : STD_LOGIC_VECTOR (64 downto 0);

    component worker_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component worker_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component worker_urem_7ns_6ns_7_11 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component worker_mul_7ns_34ns_65_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component worker_mux_4to1_sel32_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component worker_COO_SpMV_vector IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    vector_U : component worker_COO_SpMV_vector
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => vector_address0,
        ce0 => vector_ce0,
        q0 => vector_q0);

    worker_fadd_32ns_32ns_32_5_full_dsp_U26 : component worker_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_13_reg_376,
        din1 => ap_reg_ppstg_tmp_4_reg_338_pp0_iter12,
        ce => ap_const_logic_1,
        dout => grp_fu_191_p2);

    worker_fmul_32ns_32ns_32_4_max_dsp_U27 : component worker_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => val_load_reg_317,
        din1 => vector_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_195_p2);

    worker_urem_7ns_6ns_7_11_U28 : component worker_urem_7ns_6ns_7_11
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 6,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => row_q0,
        din1 => grp_fu_233_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_233_p2);

    worker_mul_7ns_34ns_65_3_U29 : component worker_mul_7ns_34ns_65_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 7,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_242_p0,
        din1 => grp_fu_242_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_242_p2);

    worker_mux_4to1_sel32_32_1_U30 : component worker_mux_4to1_sel32_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din1 => output_0_q0,
        din2 => output_1_q0,
        din3 => output_2_q0,
        din4 => output_3_q0,
        din5 => tmp_13_fu_270_p5,
        dout => tmp_13_fu_270_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_fu_200_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_fu_200_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_fu_200_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it12 <= ap_reg_ppiten_pp0_it11;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it13 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it13 <= ap_reg_ppiten_pp0_it12;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it14 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it14 <= ap_reg_ppiten_pp0_it13;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it15 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it15 <= ap_reg_ppiten_pp0_it14;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it16 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it16 <= ap_reg_ppiten_pp0_it15;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it17 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it17 <= ap_reg_ppiten_pp0_it16;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it18 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it18 <= ap_reg_ppiten_pp0_it17;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
            end if;
        end if;
    end process;


    i_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_fu_200_p2 = ap_const_lv1_0))) then 
                i_reg_180 <= i_4_fu_206_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_180 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_output_0_addr_reg_348_pp0_iter12 <= output_0_addr_reg_348;
                ap_reg_ppstg_output_0_addr_reg_348_pp0_iter13 <= ap_reg_ppstg_output_0_addr_reg_348_pp0_iter12;
                ap_reg_ppstg_output_0_addr_reg_348_pp0_iter14 <= ap_reg_ppstg_output_0_addr_reg_348_pp0_iter13;
                ap_reg_ppstg_output_0_addr_reg_348_pp0_iter15 <= ap_reg_ppstg_output_0_addr_reg_348_pp0_iter14;
                ap_reg_ppstg_output_0_addr_reg_348_pp0_iter16 <= ap_reg_ppstg_output_0_addr_reg_348_pp0_iter15;
                ap_reg_ppstg_output_0_addr_reg_348_pp0_iter17 <= ap_reg_ppstg_output_0_addr_reg_348_pp0_iter16;
                ap_reg_ppstg_output_1_addr_reg_354_pp0_iter12 <= output_1_addr_reg_354;
                ap_reg_ppstg_output_1_addr_reg_354_pp0_iter13 <= ap_reg_ppstg_output_1_addr_reg_354_pp0_iter12;
                ap_reg_ppstg_output_1_addr_reg_354_pp0_iter14 <= ap_reg_ppstg_output_1_addr_reg_354_pp0_iter13;
                ap_reg_ppstg_output_1_addr_reg_354_pp0_iter15 <= ap_reg_ppstg_output_1_addr_reg_354_pp0_iter14;
                ap_reg_ppstg_output_1_addr_reg_354_pp0_iter16 <= ap_reg_ppstg_output_1_addr_reg_354_pp0_iter15;
                ap_reg_ppstg_output_1_addr_reg_354_pp0_iter17 <= ap_reg_ppstg_output_1_addr_reg_354_pp0_iter16;
                ap_reg_ppstg_output_2_addr_reg_360_pp0_iter12 <= output_2_addr_reg_360;
                ap_reg_ppstg_output_2_addr_reg_360_pp0_iter13 <= ap_reg_ppstg_output_2_addr_reg_360_pp0_iter12;
                ap_reg_ppstg_output_2_addr_reg_360_pp0_iter14 <= ap_reg_ppstg_output_2_addr_reg_360_pp0_iter13;
                ap_reg_ppstg_output_2_addr_reg_360_pp0_iter15 <= ap_reg_ppstg_output_2_addr_reg_360_pp0_iter14;
                ap_reg_ppstg_output_2_addr_reg_360_pp0_iter16 <= ap_reg_ppstg_output_2_addr_reg_360_pp0_iter15;
                ap_reg_ppstg_output_2_addr_reg_360_pp0_iter17 <= ap_reg_ppstg_output_2_addr_reg_360_pp0_iter16;
                ap_reg_ppstg_output_3_addr_reg_366_pp0_iter12 <= output_3_addr_reg_366;
                ap_reg_ppstg_output_3_addr_reg_366_pp0_iter13 <= ap_reg_ppstg_output_3_addr_reg_366_pp0_iter12;
                ap_reg_ppstg_output_3_addr_reg_366_pp0_iter14 <= ap_reg_ppstg_output_3_addr_reg_366_pp0_iter13;
                ap_reg_ppstg_output_3_addr_reg_366_pp0_iter15 <= ap_reg_ppstg_output_3_addr_reg_366_pp0_iter14;
                ap_reg_ppstg_output_3_addr_reg_366_pp0_iter16 <= ap_reg_ppstg_output_3_addr_reg_366_pp0_iter15;
                ap_reg_ppstg_output_3_addr_reg_366_pp0_iter17 <= ap_reg_ppstg_output_3_addr_reg_366_pp0_iter16;
                ap_reg_ppstg_row_load_reg_327_pp0_iter2 <= row_load_reg_327;
                ap_reg_ppstg_row_load_reg_327_pp0_iter3 <= ap_reg_ppstg_row_load_reg_327_pp0_iter2;
                ap_reg_ppstg_row_load_reg_327_pp0_iter4 <= ap_reg_ppstg_row_load_reg_327_pp0_iter3;
                ap_reg_ppstg_row_load_reg_327_pp0_iter5 <= ap_reg_ppstg_row_load_reg_327_pp0_iter4;
                ap_reg_ppstg_row_load_reg_327_pp0_iter6 <= ap_reg_ppstg_row_load_reg_327_pp0_iter5;
                ap_reg_ppstg_row_load_reg_327_pp0_iter7 <= ap_reg_ppstg_row_load_reg_327_pp0_iter6;
                ap_reg_ppstg_row_load_reg_327_pp0_iter8 <= ap_reg_ppstg_row_load_reg_327_pp0_iter7;
                ap_reg_ppstg_row_load_reg_327_pp0_iter9 <= ap_reg_ppstg_row_load_reg_327_pp0_iter8;
                ap_reg_ppstg_tmp_19_reg_372_pp0_iter13 <= tmp_19_reg_372;
                ap_reg_ppstg_tmp_19_reg_372_pp0_iter14 <= ap_reg_ppstg_tmp_19_reg_372_pp0_iter13;
                ap_reg_ppstg_tmp_19_reg_372_pp0_iter15 <= ap_reg_ppstg_tmp_19_reg_372_pp0_iter14;
                ap_reg_ppstg_tmp_19_reg_372_pp0_iter16 <= ap_reg_ppstg_tmp_19_reg_372_pp0_iter15;
                ap_reg_ppstg_tmp_19_reg_372_pp0_iter17 <= ap_reg_ppstg_tmp_19_reg_372_pp0_iter16;
                ap_reg_ppstg_tmp_4_reg_338_pp0_iter10 <= ap_reg_ppstg_tmp_4_reg_338_pp0_iter9;
                ap_reg_ppstg_tmp_4_reg_338_pp0_iter11 <= ap_reg_ppstg_tmp_4_reg_338_pp0_iter10;
                ap_reg_ppstg_tmp_4_reg_338_pp0_iter12 <= ap_reg_ppstg_tmp_4_reg_338_pp0_iter11;
                ap_reg_ppstg_tmp_4_reg_338_pp0_iter6 <= tmp_4_reg_338;
                ap_reg_ppstg_tmp_4_reg_338_pp0_iter7 <= ap_reg_ppstg_tmp_4_reg_338_pp0_iter6;
                ap_reg_ppstg_tmp_4_reg_338_pp0_iter8 <= ap_reg_ppstg_tmp_4_reg_338_pp0_iter7;
                ap_reg_ppstg_tmp_4_reg_338_pp0_iter9 <= ap_reg_ppstg_tmp_4_reg_338_pp0_iter8;
                ap_reg_ppstg_tmp_reg_298_pp0_iter10 <= ap_reg_ppstg_tmp_reg_298_pp0_iter9;
                ap_reg_ppstg_tmp_reg_298_pp0_iter11 <= ap_reg_ppstg_tmp_reg_298_pp0_iter10;
                ap_reg_ppstg_tmp_reg_298_pp0_iter12 <= ap_reg_ppstg_tmp_reg_298_pp0_iter11;
                ap_reg_ppstg_tmp_reg_298_pp0_iter13 <= ap_reg_ppstg_tmp_reg_298_pp0_iter12;
                ap_reg_ppstg_tmp_reg_298_pp0_iter14 <= ap_reg_ppstg_tmp_reg_298_pp0_iter13;
                ap_reg_ppstg_tmp_reg_298_pp0_iter15 <= ap_reg_ppstg_tmp_reg_298_pp0_iter14;
                ap_reg_ppstg_tmp_reg_298_pp0_iter16 <= ap_reg_ppstg_tmp_reg_298_pp0_iter15;
                ap_reg_ppstg_tmp_reg_298_pp0_iter17 <= ap_reg_ppstg_tmp_reg_298_pp0_iter16;
                ap_reg_ppstg_tmp_reg_298_pp0_iter2 <= ap_reg_ppstg_tmp_reg_298_pp0_iter1;
                ap_reg_ppstg_tmp_reg_298_pp0_iter3 <= ap_reg_ppstg_tmp_reg_298_pp0_iter2;
                ap_reg_ppstg_tmp_reg_298_pp0_iter4 <= ap_reg_ppstg_tmp_reg_298_pp0_iter3;
                ap_reg_ppstg_tmp_reg_298_pp0_iter5 <= ap_reg_ppstg_tmp_reg_298_pp0_iter4;
                ap_reg_ppstg_tmp_reg_298_pp0_iter6 <= ap_reg_ppstg_tmp_reg_298_pp0_iter5;
                ap_reg_ppstg_tmp_reg_298_pp0_iter7 <= ap_reg_ppstg_tmp_reg_298_pp0_iter6;
                ap_reg_ppstg_tmp_reg_298_pp0_iter8 <= ap_reg_ppstg_tmp_reg_298_pp0_iter7;
                ap_reg_ppstg_tmp_reg_298_pp0_iter9 <= ap_reg_ppstg_tmp_reg_298_pp0_iter8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_tmp_reg_298_pp0_iter1 <= tmp_reg_298;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_298_pp0_iter10))) then
                output_0_addr_reg_348 <= newIndex4_fu_248_p1(5 - 1 downto 0);
                output_1_addr_reg_354 <= newIndex4_fu_248_p1(5 - 1 downto 0);
                output_2_addr_reg_360 <= newIndex4_fu_248_p1(5 - 1 downto 0);
                output_3_addr_reg_366 <= newIndex4_fu_248_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((tmp_reg_298 = ap_const_lv1_0)))) then
                row_load_reg_327 <= row_q0;
                val_load_reg_317 <= val_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_298_pp0_iter11))) then
                tmp_13_reg_376 <= tmp_13_fu_270_p6;
                tmp_19_reg_372 <= grp_fu_242_p2(64 downto 37);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_298_pp0_iter4))) then
                tmp_4_reg_338 <= grp_fu_195_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_298_pp0_iter16))) then
                tmp_6_reg_381 <= grp_fu_191_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_fu_200_p2 = ap_const_lv1_0))) then
                tmp_reg_298 <= tmp_fu_216_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_200_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it17, ap_reg_ppiten_pp0_it18)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it18) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it17)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_fu_200_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_fu_200_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_2;
                end if;
            when ap_ST_st21_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st21_fsm_2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st21_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_105_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_105 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_412_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_412 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_105)
    begin
        if (ap_sig_105) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_20)
    begin
        if (ap_sig_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_2_assign_proc : process(ap_sig_412)
    begin
        if (ap_sig_412) then 
            ap_sig_cseq_ST_st21_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    col_address0 <= tmp_s_fu_221_p1(12 - 1 downto 0);

    col_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            col_ce0 <= ap_const_logic_1;
        else 
            col_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_200_p2 <= "1" when (i_reg_180 = ap_const_lv12_9C4) else "0";
    grp_fu_233_p1 <= ap_const_lv7_19(6 - 1 downto 0);
    grp_fu_242_p0 <= grp_fu_242_p00(7 - 1 downto 0);
    grp_fu_242_p00 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_row_load_reg_327_pp0_iter9),65));
    grp_fu_242_p1 <= ap_const_lv65_147AE147B(34 - 1 downto 0);
    i_4_fu_206_p2 <= std_logic_vector(unsigned(i_reg_180) + unsigned(ap_const_lv12_1));
    i_cast1_fu_212_p1 <= std_logic_vector(resize(unsigned(i_reg_180),32));
    newIndex4_fu_248_p1 <= std_logic_vector(resize(unsigned(grp_fu_233_p2),64));
    output_0_address0 <= newIndex4_fu_248_p1(5 - 1 downto 0);
    output_0_address1 <= ap_reg_ppstg_output_0_addr_reg_348_pp0_iter17;

    output_0_ce0_assign_proc : process(ap_reg_ppiten_pp0_it11)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it11)) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_ce1_assign_proc : process(ap_reg_ppiten_pp0_it18)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it18)) then 
            output_0_ce1 <= ap_const_logic_1;
        else 
            output_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_d1 <= tmp_6_reg_381;

    output_0_we1_assign_proc : process(ap_reg_ppiten_pp0_it18, ap_reg_ppstg_tmp_reg_298_pp0_iter17, ap_reg_ppstg_tmp_19_reg_372_pp0_iter17)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it18) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_298_pp0_iter17)) and (ap_reg_ppstg_tmp_19_reg_372_pp0_iter17 = ap_const_lv28_0)))) then 
            output_0_we1 <= ap_const_logic_1;
        else 
            output_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_address0 <= newIndex4_fu_248_p1(5 - 1 downto 0);
    output_1_address1 <= ap_reg_ppstg_output_1_addr_reg_354_pp0_iter17;

    output_1_ce0_assign_proc : process(ap_reg_ppiten_pp0_it11)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it11)) then 
            output_1_ce0 <= ap_const_logic_1;
        else 
            output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_ce1_assign_proc : process(ap_reg_ppiten_pp0_it18)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it18)) then 
            output_1_ce1 <= ap_const_logic_1;
        else 
            output_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_d1 <= tmp_6_reg_381;

    output_1_we1_assign_proc : process(ap_reg_ppiten_pp0_it18, ap_reg_ppstg_tmp_reg_298_pp0_iter17, ap_reg_ppstg_tmp_19_reg_372_pp0_iter17)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it18) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_298_pp0_iter17)) and (ap_reg_ppstg_tmp_19_reg_372_pp0_iter17 = ap_const_lv28_1)))) then 
            output_1_we1 <= ap_const_logic_1;
        else 
            output_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_address0 <= newIndex4_fu_248_p1(5 - 1 downto 0);
    output_2_address1 <= ap_reg_ppstg_output_2_addr_reg_360_pp0_iter17;

    output_2_ce0_assign_proc : process(ap_reg_ppiten_pp0_it11)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it11)) then 
            output_2_ce0 <= ap_const_logic_1;
        else 
            output_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_ce1_assign_proc : process(ap_reg_ppiten_pp0_it18)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it18)) then 
            output_2_ce1 <= ap_const_logic_1;
        else 
            output_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_d1 <= tmp_6_reg_381;

    output_2_we1_assign_proc : process(ap_reg_ppiten_pp0_it18, ap_reg_ppstg_tmp_reg_298_pp0_iter17, ap_reg_ppstg_tmp_19_reg_372_pp0_iter17)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it18) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_298_pp0_iter17)) and (ap_reg_ppstg_tmp_19_reg_372_pp0_iter17 = ap_const_lv28_2)))) then 
            output_2_we1 <= ap_const_logic_1;
        else 
            output_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_address0 <= newIndex4_fu_248_p1(5 - 1 downto 0);
    output_3_address1 <= ap_reg_ppstg_output_3_addr_reg_366_pp0_iter17;

    output_3_ce0_assign_proc : process(ap_reg_ppiten_pp0_it11)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it11)) then 
            output_3_ce0 <= ap_const_logic_1;
        else 
            output_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_ce1_assign_proc : process(ap_reg_ppiten_pp0_it18)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it18)) then 
            output_3_ce1 <= ap_const_logic_1;
        else 
            output_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_d1 <= tmp_6_reg_381;

    output_3_we1_assign_proc : process(ap_reg_ppiten_pp0_it18, ap_reg_ppstg_tmp_reg_298_pp0_iter17, ap_reg_ppstg_tmp_19_reg_372_pp0_iter17)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it18) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_298_pp0_iter17)) and not((ap_reg_ppstg_tmp_19_reg_372_pp0_iter17 = ap_const_lv28_0)) and not((ap_reg_ppstg_tmp_19_reg_372_pp0_iter17 = ap_const_lv28_1)) and not((ap_reg_ppstg_tmp_19_reg_372_pp0_iter17 = ap_const_lv28_2))))) then 
            output_3_we1 <= ap_const_logic_1;
        else 
            output_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    row_address0 <= tmp_s_fu_221_p1(12 - 1 downto 0);

    row_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            row_ce0 <= ap_const_logic_1;
        else 
            row_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_13_fu_270_p5 <= std_logic_vector(resize(unsigned(tmp_19_fu_256_p4),32));
    tmp_19_fu_256_p4 <= grp_fu_242_p2(64 downto 37);
    tmp_3_fu_228_p1 <= std_logic_vector(resize(unsigned(col_q0),64));
    tmp_fu_216_p2 <= "1" when (signed(i_cast1_fu_212_p1) < signed(nnz)) else "0";
    tmp_s_fu_221_p1 <= std_logic_vector(resize(unsigned(i_reg_180),64));
    val_r_address0 <= tmp_s_fu_221_p1(12 - 1 downto 0);

    val_r_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            val_r_ce0 <= ap_const_logic_1;
        else 
            val_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    vector_address0 <= tmp_3_fu_228_p1(7 - 1 downto 0);

    vector_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            vector_ce0 <= ap_const_logic_1;
        else 
            vector_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
