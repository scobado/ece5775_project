-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity worker_COO_SpMV_0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_r_ce1 : OUT STD_LOGIC;
    output_r_we1 : OUT STD_LOGIC;
    output_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of worker_COO_SpMV_0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st15_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_D05 : STD_LOGIC_VECTOR (11 downto 0) := "110100000101";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_20 : BOOLEAN;
    signal row10_1_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal row10_1_0_ce0 : STD_LOGIC;
    signal row10_1_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal val10_1_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal val10_1_0_ce0 : STD_LOGIC;
    signal val10_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal col10_1_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal col10_1_0_ce0 : STD_LOGIC;
    signal col10_1_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal vector_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal vector_ce0 : STD_LOGIC;
    signal vector_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_104 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_72 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it12 : STD_LOGIC := '0';
    signal i_1_fu_130_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_136_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_172 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_145_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_183 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_183_pp0_iter2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_183_pp0_iter3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_183_pp0_iter4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_183_pp0_iter5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_183_pp0_iter6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_183_pp0_iter7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_183_pp0_iter8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_183_pp0_iter9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_183_pp0_iter10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_183_pp0_iter11 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_reg_197 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_output_addr_reg_197_pp0_iter2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_output_addr_reg_197_pp0_iter3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_output_addr_reg_197_pp0_iter4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_output_addr_reg_197_pp0_iter5 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_output_addr_reg_197_pp0_iter6 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_output_addr_reg_197_pp0_iter7 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_output_addr_reg_197_pp0_iter8 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_output_addr_reg_197_pp0_iter9 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_output_addr_reg_197_pp0_iter10 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_output_addr_reg_197_pp0_iter11 : STD_LOGIC_VECTOR (6 downto 0);
    signal val10_1_0_load_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_119_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_218 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_load_reg_223 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_115_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_153_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal row10_1_0_load_cast_fu_141_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_2 : STD_LOGIC;
    signal ap_sig_238 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component worker_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component worker_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component worker_COO_SpMV_0_row10_1_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component worker_COO_SpMV_0_val10_1_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component worker_COO_SpMV_0_col10_1_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component worker_COO_SpMV_0_vector IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    row10_1_0_U : component worker_COO_SpMV_0_row10_1_0
    generic map (
        DataWidth => 8,
        AddressRange => 3333,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row10_1_0_address0,
        ce0 => row10_1_0_ce0,
        q0 => row10_1_0_q0);

    val10_1_0_U : component worker_COO_SpMV_0_val10_1_0
    generic map (
        DataWidth => 32,
        AddressRange => 3333,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => val10_1_0_address0,
        ce0 => val10_1_0_ce0,
        q0 => val10_1_0_q0);

    col10_1_0_U : component worker_COO_SpMV_0_col10_1_0
    generic map (
        DataWidth => 8,
        AddressRange => 3333,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col10_1_0_address0,
        ce0 => col10_1_0_ce0,
        q0 => col10_1_0_q0);

    vector_U : component worker_COO_SpMV_0_vector
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => vector_address0,
        ce0 => vector_ce0,
        q0 => vector_q0);

    worker_fadd_32ns_32ns_32_5_full_dsp_U1 : component worker_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => output_load_reg_223,
        din1 => tmp_s_reg_218,
        ce => ap_const_logic_1,
        dout => grp_fu_115_p2);

    worker_fmul_32ns_32ns_32_4_max_dsp_U2 : component worker_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => val10_1_0_load_reg_203,
        din1 => vector_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_119_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_fu_124_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_fu_124_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_fu_124_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it12 <= ap_reg_ppiten_pp0_it11;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
            end if;
        end if;
    end process;


    i_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_fu_124_p2 = ap_const_lv1_0))) then 
                i_reg_104 <= i_1_fu_130_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_104 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_output_addr_reg_197_pp0_iter10 <= ap_reg_ppstg_output_addr_reg_197_pp0_iter9;
                ap_reg_ppstg_output_addr_reg_197_pp0_iter11 <= ap_reg_ppstg_output_addr_reg_197_pp0_iter10;
                ap_reg_ppstg_output_addr_reg_197_pp0_iter2 <= output_addr_reg_197;
                ap_reg_ppstg_output_addr_reg_197_pp0_iter3 <= ap_reg_ppstg_output_addr_reg_197_pp0_iter2;
                ap_reg_ppstg_output_addr_reg_197_pp0_iter4 <= ap_reg_ppstg_output_addr_reg_197_pp0_iter3;
                ap_reg_ppstg_output_addr_reg_197_pp0_iter5 <= ap_reg_ppstg_output_addr_reg_197_pp0_iter4;
                ap_reg_ppstg_output_addr_reg_197_pp0_iter6 <= ap_reg_ppstg_output_addr_reg_197_pp0_iter5;
                ap_reg_ppstg_output_addr_reg_197_pp0_iter7 <= ap_reg_ppstg_output_addr_reg_197_pp0_iter6;
                ap_reg_ppstg_output_addr_reg_197_pp0_iter8 <= ap_reg_ppstg_output_addr_reg_197_pp0_iter7;
                ap_reg_ppstg_output_addr_reg_197_pp0_iter9 <= ap_reg_ppstg_output_addr_reg_197_pp0_iter8;
                ap_reg_ppstg_tmp_4_reg_183_pp0_iter10 <= ap_reg_ppstg_tmp_4_reg_183_pp0_iter9;
                ap_reg_ppstg_tmp_4_reg_183_pp0_iter11 <= ap_reg_ppstg_tmp_4_reg_183_pp0_iter10;
                ap_reg_ppstg_tmp_4_reg_183_pp0_iter2 <= tmp_4_reg_183;
                ap_reg_ppstg_tmp_4_reg_183_pp0_iter3 <= ap_reg_ppstg_tmp_4_reg_183_pp0_iter2;
                ap_reg_ppstg_tmp_4_reg_183_pp0_iter4 <= ap_reg_ppstg_tmp_4_reg_183_pp0_iter3;
                ap_reg_ppstg_tmp_4_reg_183_pp0_iter5 <= ap_reg_ppstg_tmp_4_reg_183_pp0_iter4;
                ap_reg_ppstg_tmp_4_reg_183_pp0_iter6 <= ap_reg_ppstg_tmp_4_reg_183_pp0_iter5;
                ap_reg_ppstg_tmp_4_reg_183_pp0_iter7 <= ap_reg_ppstg_tmp_4_reg_183_pp0_iter6;
                ap_reg_ppstg_tmp_4_reg_183_pp0_iter8 <= ap_reg_ppstg_tmp_4_reg_183_pp0_iter7;
                ap_reg_ppstg_tmp_4_reg_183_pp0_iter9 <= ap_reg_ppstg_tmp_4_reg_183_pp0_iter8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = tmp_4_fu_145_p3))) then
                output_addr_reg_197 <= tmp_1_fu_153_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_4_reg_183_pp0_iter5))) then
                output_load_reg_223 <= output_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_tmp_4_reg_183_pp0_iter10)) then
                tmp_2_reg_228 <= grp_fu_115_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                tmp_4_reg_183 <= row10_1_0_q0(7 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_fu_124_p2 = ap_const_lv1_0))) then
                    tmp_reg_172(11 downto 0) <= tmp_fu_136_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_tmp_4_reg_183_pp0_iter5)) then
                tmp_s_reg_218 <= grp_fu_119_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = tmp_4_reg_183)) then
                val10_1_0_load_reg_203 <= val10_1_0_q0;
            end if;
        end if;
    end process;
    tmp_reg_172(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_124_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it11, ap_reg_ppiten_pp0_it12)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it12) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_fu_124_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_fu_124_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_2;
                end if;
            when ap_ST_st15_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st15_fsm_2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st15_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_238_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_238 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_72_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_72 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_72)
    begin
        if (ap_sig_72) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_2_assign_proc : process(ap_sig_238)
    begin
        if (ap_sig_238) then 
            ap_sig_cseq_ST_st15_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_20)
    begin
        if (ap_sig_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;

    col10_1_0_address0 <= tmp_reg_172(12 - 1 downto 0);

    col10_1_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            col10_1_0_ce0 <= ap_const_logic_1;
        else 
            col10_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_124_p2 <= "1" when (i_reg_104 = ap_const_lv12_D05) else "0";
    i_1_fu_130_p2 <= std_logic_vector(unsigned(i_reg_104) + unsigned(ap_const_lv12_1));
    output_r_address0 <= ap_reg_ppstg_output_addr_reg_197_pp0_iter4;
    output_r_address1 <= ap_reg_ppstg_output_addr_reg_197_pp0_iter11;

    output_r_ce0_assign_proc : process(ap_reg_ppiten_pp0_it5)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it5)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_ce1_assign_proc : process(ap_reg_ppiten_pp0_it12)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it12)) then 
            output_r_ce1 <= ap_const_logic_1;
        else 
            output_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d1 <= tmp_2_reg_228;

    output_r_we1_assign_proc : process(ap_reg_ppiten_pp0_it12, ap_reg_ppstg_tmp_4_reg_183_pp0_iter11)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it12) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_4_reg_183_pp0_iter11)))) then 
            output_r_we1 <= ap_const_logic_1;
        else 
            output_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    row10_1_0_address0 <= tmp_fu_136_p1(12 - 1 downto 0);

    row10_1_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            row10_1_0_ce0 <= ap_const_logic_1;
        else 
            row10_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        row10_1_0_load_cast_fu_141_p1 <= std_logic_vector(resize(signed(row10_1_0_q0),32));

    tmp_1_fu_153_p1 <= std_logic_vector(resize(unsigned(row10_1_0_load_cast_fu_141_p1),64));
    tmp_4_fu_145_p3 <= row10_1_0_q0(7 downto 7);
        tmp_9_fu_158_p1 <= std_logic_vector(resize(signed(col10_1_0_q0),64));

    tmp_fu_136_p1 <= std_logic_vector(resize(unsigned(i_reg_104),64));
    val10_1_0_address0 <= tmp_reg_172(12 - 1 downto 0);

    val10_1_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            val10_1_0_ce0 <= ap_const_logic_1;
        else 
            val10_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    vector_address0 <= tmp_9_fu_158_p1(7 - 1 downto 0);

    vector_ce0_assign_proc : process(ap_reg_ppiten_pp0_it2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            vector_ce0 <= ap_const_logic_1;
        else 
            vector_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
