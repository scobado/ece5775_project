-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity worker_COO_SpMV_vector_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of worker_COO_SpMV_vector_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "01000001000111110101101000000110", 
    1 => "11000000001100101011100100111110", 
    2 => "11000000101001000001001000111100", 
    3 => "01000000011111110011100011101110", 
    4 => "00111101011100011100001100000111", 
    5 => "11000001000011000110010000100011", 
    6 => "11000000101001000111010111011101", 
    7 => "01000000100001001010011110011101", 
    8 => "01000000101001111101011111101101", 
    9 => "00111111001000100000011110111010", 
    10 => "11000000000001000111111010101100", 
    11 => "11000000101111111111100000011111", 
    12 => "01000000100101111100010000110001", 
    13 => "00111111011111010101000010110111", 
    14 => "11000000111000010100110011000011", 
    15 => "11000000101001001101001000001111", 
    16 => "11000000110010001010000001000111", 
    17 => "11000001000111010011110001011011", 
    18 => "11000000011100001111011100110111", 
    19 => "01000000010100101100111001000000", 
    20 => "01000001000110101101111001110001", 
    21 => "01000000111101101011101001001000", 
    22 => "01000000100001110011110000000100", 
    23 => "11000000111000011101011010010101", 
    24 => "01000001000000101001011011001011", 
    25 => "01000001000100110000111000101011", 
    26 => "01000000101110100010011101110101", 
    27 => "11000001000110010100100010000010", 
    28 => "11000000001100010101010000110011", 
    29 => "10111111101101000110011011000111", 
    30 => "10111111111011011000001101101011", 
    31 => "01000000100100110000011100110011", 
    32 => "11000000110111100111110011111101", 
    33 => "01000000100001111011111110101100", 
    34 => "10111111101010100011001111010110", 
    35 => "11000000100000101110010110110011", 
    36 => "11000001000111010010111100011011", 
    37 => "01000000111110010111110100001010", 
    38 => "11000001000110010100100100110011", 
    39 => "00111110100111101110000010110010", 
    40 => "11000000101111000111110100001001", 
    41 => "11000001000011110100111101001000", 
    42 => "01000000110111001111100101011000", 
    43 => "01000000010100010110110010110011", 
    44 => "11000001000101101011100111101100", 
    45 => "01000000111111010101101001011100", 
    46 => "00111111110111110000100111011000", 
    47 => "11000000001010101100101100011000", 
    48 => "11000000000101101111000000100001", 
    49 => "01000001000101011011011111010111", 
    50 => "11000000100010111111000100011010", 
    51 => "10111110110000011110010000110000", 
    52 => "00111111100000011100000011010100", 
    53 => "11000000010110001011000010101111", 
    54 => "11000001000111011101100000001011", 
    55 => "11000001000011100010100001111001", 
    56 => "01000000111110100101000000011000", 
    57 => "01000000110011111001100000011000", 
    58 => "10111101111110000010010110100100", 
    59 => "11000000000101010100000111100101", 
    60 => "00111101001111010000100101011010", 
    61 => "11000000101100110010110010110000", 
    62 => "01000000000100011001101111111101", 
    63 => "11000000101111111101110100010110", 
    64 => "01000000011010010011111111011101", 
    65 => "11000000100110011110110111111011", 
    66 => "00111111100110100011011011111110", 
    67 => "11000000101000000111011101001110", 
    68 => "10111111110100100001011000011000", 
    69 => "11000000010101000111001101101111", 
    70 => "00111111001101000101110110000101", 
    71 => "00111110100101110011011101000001", 
    72 => "11000000111001001011001111001100", 
    73 => "01000000000100100101111001010011", 
    74 => "10111111111010110111100001000000", 
    75 => "00111111100001001100010101011010", 
    76 => "11000001000011111101110100111101", 
    77 => "01000000001010011100000101101010", 
    78 => "00111111101100000100100110110101", 
    79 => "11000001000001100101101001100101", 
    80 => "01000001000011101100000100111010", 
    81 => "01000000100010111111111000110010", 
    82 => "11000000110110111011011100111000", 
    83 => "00111110100111000111011100111010", 
    84 => "11000000000100100110010100101000", 
    85 => "01000000101110001000100010000011", 
    86 => "11000000001000111010101111101000", 
    87 => "11000000010111101010001010010111", 
    88 => "01000000101011100011000111101100", 
    89 => "01000000010011101101111001101011", 
    90 => "00111111000101110100100010101101", 
    91 => "11000001000001011111000010001111", 
    92 => "01000000011101000000100100111111", 
    93 => "10111110100011011011001010100111", 
    94 => "11000000101011011001000000110100", 
    95 => "01000000000110010100000000000101", 
    96 => "01000000101011011000000101101110", 
    97 => "01000001000110111011010101000011", 
    98 => "11000001000010100010010100101111", 
    99 => "11000000000010100000011000010100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity worker_COO_SpMV_vector is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of worker_COO_SpMV_vector is
    component worker_COO_SpMV_vector_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    worker_COO_SpMV_vector_rom_U :  component worker_COO_SpMV_vector_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


