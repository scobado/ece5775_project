-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity worker_create_COO is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    row_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    row_ce0 : OUT STD_LOGIC;
    row_we0 : OUT STD_LOGIC;
    row_d0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    col_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    col_ce0 : OUT STD_LOGIC;
    col_we0 : OUT STD_LOGIC;
    col_d0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    val_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    val_r_ce0 : OUT STD_LOGIC;
    val_r_we0 : OUT STD_LOGIC;
    val_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of worker_create_COO is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv12_64 : STD_LOGIC_VECTOR (11 downto 0) := "000001100100";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv12_9C4 : STD_LOGIC_VECTOR (11 downto 0) := "100111000100";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_24 : BOOLEAN;
    signal next_mul_fu_249_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul_reg_455 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_64 : BOOLEAN;
    signal i_4_fu_261_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_463 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_fu_283_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_485 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_75 : BOOLEAN;
    signal exitcond1_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_89 : BOOLEAN;
    signal i_3_fu_373_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_3_reg_508 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_98 : BOOLEAN;
    signal counter_load_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_518 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_row_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal temp_row_ce0 : STD_LOGIC;
    signal temp_row_we0 : STD_LOGIC;
    signal temp_row_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_col_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal temp_col_ce0 : STD_LOGIC;
    signal temp_col_we0 : STD_LOGIC;
    signal temp_col_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_val_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal temp_val_ce0 : STD_LOGIC;
    signal temp_val_we0 : STD_LOGIC;
    signal temp_val_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_187 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_200 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_reg_212 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_165 : BOOLEAN;
    signal exitcond2_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_reg_225 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_180 : BOOLEAN;
    signal tmp_12_cast_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal counter_fu_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal counter_1_fu_352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cur_ind_1_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_0_s_fu_430_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cur_ind_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_start_fu_422_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_cast_fu_289_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_293_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal input_load_to_int_fu_304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_307_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_317_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_cast1_fu_363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cur_ind_2_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal start_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component worker_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component worker_create_COO_temp_row IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component worker_create_COO_temp_col IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (6 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component worker_create_COO_temp_val IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    temp_row_U : component worker_create_COO_temp_row
    generic map (
        DataWidth => 5,
        AddressRange => 2500,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_row_address0,
        ce0 => temp_row_ce0,
        we0 => temp_row_we0,
        d0 => i_reg_187,
        q0 => temp_row_q0);

    temp_col_U : component worker_create_COO_temp_col
    generic map (
        DataWidth => 7,
        AddressRange => 2500,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_col_address0,
        ce0 => temp_col_ce0,
        we0 => temp_col_we0,
        d0 => j_reg_212,
        q0 => temp_col_q0);

    temp_val_U : component worker_create_COO_temp_val
    generic map (
        DataWidth => 32,
        AddressRange => 2500,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_val_address0,
        ce0 => temp_val_ce0,
        we0 => temp_val_we0,
        d0 => input_load_reg_495,
        q0 => temp_val_q0);

    worker_fcmp_32ns_32ns_1_1_U1 : component worker_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => input_load_reg_495,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_1,
        dout => tmp_2_fu_236_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    counter_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = tmp_8_fu_339_p2))) then 
                counter_fu_58 <= counter_1_fu_352_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                counter_fu_58 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    cur_ind_1_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_s_reg_518)))) then 
                cur_ind_1_fu_74 <= start_0_s_fu_430_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_255_p2)))) then 
                cur_ind_1_fu_74 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    cur_ind_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_s_reg_518)))) then 
                cur_ind_fu_78 <= p_start_fu_422_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_255_p2)))) then 
                cur_ind_fu_78 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i1_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                i1_reg_225 <= i_3_reg_508;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_255_p2)))) then 
                i1_reg_225 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    i_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_277_p2 = ap_const_lv1_0)))) then 
                i_reg_187 <= i_4_reg_463;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_187 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond2_fu_255_p2))) then 
                j_reg_212 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                j_reg_212 <= j_1_reg_485;
            end if; 
        end if;
    end process;

    phi_mul_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_277_p2 = ap_const_lv1_0)))) then 
                phi_mul_reg_200 <= next_mul_reg_455;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                phi_mul_reg_200 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond_fu_367_p2))) then
                counter_load_reg_513 <= counter_fu_58;
                tmp_s_reg_518 <= tmp_s_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                i_3_reg_508 <= i_3_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_4_reg_463 <= i_4_fu_261_p2;
                next_mul_reg_455 <= next_mul_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                input_load_reg_495 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_1_reg_485 <= j_1_fu_283_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_277_p2, exitcond_fu_367_p2, exitcond2_fu_255_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_255_p2))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((exitcond1_fu_277_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_lv1_0 = exitcond_fu_367_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st6_fsm_5, exitcond_fu_367_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond_fu_367_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, exitcond_fu_367_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond_fu_367_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= counter_fu_58;

    ap_sig_165_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_165 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_180_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_180 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_24_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_24 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_64_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_64 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_75_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_75 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_89_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_89 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_98_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_98 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_24)
    begin
        if (ap_sig_24) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_64)
    begin
        if (ap_sig_64) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_75)
    begin
        if (ap_sig_75) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_89)
    begin
        if (ap_sig_89) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_165)
    begin
        if (ap_sig_165) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_98)
    begin
        if (ap_sig_98) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_180)
    begin
        if (ap_sig_180) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    col_address0 <= tmp_4_fu_398_p1(12 - 1 downto 0);

    col_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            col_ce0 <= ap_const_logic_1;
        else 
            col_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_d0 <= temp_col_q0;

    col_we0_assign_proc : process(tmp_s_reg_518, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_s_reg_518))))) then 
            col_we0 <= ap_const_logic_1;
        else 
            col_we0 <= ap_const_logic_0;
        end if; 
    end process;

    counter_1_fu_352_p2 <= std_logic_vector(unsigned(counter_fu_58) + unsigned(ap_const_lv32_1));
    cur_ind_2_fu_405_p2 <= std_logic_vector(unsigned(cur_ind_fu_78) + unsigned(ap_const_lv32_8));
    exitcond1_fu_277_p2 <= "1" when (j_reg_212 = ap_const_lv7_64) else "0";
    exitcond2_fu_255_p2 <= "1" when (i_reg_187 = ap_const_lv5_19) else "0";
    exitcond_fu_367_p2 <= "1" when (i1_reg_225 = ap_const_lv12_9C4) else "0";
    i1_cast1_fu_363_p1 <= std_logic_vector(resize(unsigned(i1_reg_225),32));
    i_3_fu_373_p2 <= std_logic_vector(unsigned(i1_reg_225) + unsigned(ap_const_lv12_1));
    i_4_fu_261_p2 <= std_logic_vector(unsigned(i_reg_187) + unsigned(ap_const_lv5_1));
    input_load_to_int_fu_304_p1 <= input_load_reg_495;
    input_r_address0 <= tmp_12_cast_fu_299_p1(12 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_283_p2 <= std_logic_vector(unsigned(j_reg_212) + unsigned(ap_const_lv7_1));
    next_mul_fu_249_p2 <= std_logic_vector(unsigned(phi_mul_reg_200) + unsigned(ap_const_lv12_64));
    notlhs_fu_321_p2 <= "0" when (tmp_7_fu_307_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_327_p2 <= "1" when (tmp_fu_317_p1 = ap_const_lv23_0) else "0";
    p_start_fu_422_p3 <= 
        cur_ind_2_fu_405_p2 when (tmp_5_fu_411_p2(0) = '1') else 
        cur_ind_1_fu_74;
    row_address0 <= tmp_4_fu_398_p1(12 - 1 downto 0);

    row_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            row_ce0 <= ap_const_logic_1;
        else 
            row_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_d0 <= temp_row_q0;

    row_we0_assign_proc : process(tmp_s_reg_518, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_s_reg_518))))) then 
            row_we0 <= ap_const_logic_1;
        else 
            row_we0 <= ap_const_logic_0;
        end if; 
    end process;

    start_0_s_fu_430_p3 <= 
        cur_ind_1_fu_74 when (tmp_5_fu_411_p2(0) = '1') else 
        start_fu_416_p2;
    start_fu_416_p2 <= std_logic_vector(unsigned(cur_ind_1_fu_74) + unsigned(ap_const_lv32_1));

    temp_col_address0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st5_fsm_4, tmp_6_fu_345_p1, tmp_3_fu_385_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            temp_col_address0 <= tmp_6_fu_345_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            temp_col_address0 <= tmp_3_fu_385_p1(12 - 1 downto 0);
        else 
            temp_col_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    temp_col_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            temp_col_ce0 <= ap_const_logic_1;
        else 
            temp_col_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_col_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, tmp_8_fu_339_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = tmp_8_fu_339_p2)))) then 
            temp_col_we0 <= ap_const_logic_1;
        else 
            temp_col_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_row_address0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st5_fsm_4, tmp_6_fu_345_p1, tmp_3_fu_385_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            temp_row_address0 <= tmp_6_fu_345_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            temp_row_address0 <= tmp_3_fu_385_p1(12 - 1 downto 0);
        else 
            temp_row_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    temp_row_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            temp_row_ce0 <= ap_const_logic_1;
        else 
            temp_row_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_row_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, tmp_8_fu_339_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = tmp_8_fu_339_p2)))) then 
            temp_row_we0 <= ap_const_logic_1;
        else 
            temp_row_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_val_address0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st5_fsm_4, tmp_6_fu_345_p1, tmp_3_fu_385_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            temp_val_address0 <= tmp_6_fu_345_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            temp_val_address0 <= tmp_3_fu_385_p1(12 - 1 downto 0);
        else 
            temp_val_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    temp_val_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            temp_val_ce0 <= ap_const_logic_1;
        else 
            temp_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_val_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, tmp_8_fu_339_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = tmp_8_fu_339_p2)))) then 
            temp_val_we0 <= ap_const_logic_1;
        else 
            temp_val_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_12_cast_fu_299_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_293_p2),64));
    tmp_1_cast_fu_289_p1 <= std_logic_vector(resize(unsigned(j_reg_212),12));
    tmp_1_fu_293_p2 <= std_logic_vector(unsigned(phi_mul_reg_200) + unsigned(tmp_1_cast_fu_289_p1));
    tmp_3_fu_385_p1 <= std_logic_vector(resize(unsigned(i1_reg_225),64));
        tmp_4_fu_398_p1 <= std_logic_vector(resize(signed(cur_ind_fu_78),64));

    tmp_5_fu_411_p2 <= "1" when (signed(cur_ind_2_fu_405_p2) < signed(counter_load_reg_513)) else "0";
        tmp_6_fu_345_p1 <= std_logic_vector(resize(signed(counter_fu_58),64));

    tmp_7_fu_307_p4 <= input_load_to_int_fu_304_p1(30 downto 23);
    tmp_8_fu_339_p2 <= (tmp_9_fu_333_p2 and tmp_2_fu_236_p2);
    tmp_9_fu_333_p2 <= (notrhs_fu_327_p2 or notlhs_fu_321_p2);
    tmp_fu_317_p1 <= input_load_to_int_fu_304_p1(23 - 1 downto 0);
    tmp_s_fu_379_p2 <= "1" when (signed(i1_cast1_fu_363_p1) < signed(counter_fu_58)) else "0";
    val_r_address0 <= tmp_4_fu_398_p1(12 - 1 downto 0);

    val_r_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            val_r_ce0 <= ap_const_logic_1;
        else 
            val_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    val_r_d0 <= temp_val_q0;

    val_r_we0_assign_proc : process(tmp_s_reg_518, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_s_reg_518))))) then 
            val_r_we0 <= ap_const_logic_1;
        else 
            val_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
