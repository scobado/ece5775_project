-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity worker_matrix_1_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 12; 
             mem_size    : integer := 2500
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of worker_matrix_1_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 to 101=> "00000000000000000000000000000000", 
    102 => "01000000101100011111100101110110", 
    103 to 173=> "00000000000000000000000000000000", 
    174 => "11000001000011001011000010000010", 
    175 to 196=> "00000000000000000000000000000000", 
    197 => "11000000111110000111100101010001", 
    198 to 472=> "00000000000000000000000000000000", 
    473 => "00111110100101111001000000110001", 
    474 to 677=> "00000000000000000000000000000000", 
    678 => "11000000010110110010001010101010", 
    679 to 788=> "00000000000000000000000000000000", 
    789 => "11000000110000101110011111110100", 
    790 to 948=> "00000000000000000000000000000000", 
    949 => "01000001000010001010110001001111", 
    950 to 1269=> "00000000000000000000000000000000", 
    1270 => "11000000001001110110111111000100", 
    1271 to 1349=> "00000000000000000000000000000000", 
    1350 => "01000000110001101111001000011001", 
    1351 to 1628=> "00000000000000000000000000000000", 
    1629 => "01000000001101000010011011000100", 
    1630 to 1717=> "00000000000000000000000000000000", 
    1718 => "11000001000011011111000000011100", 
    1719 to 1979=> "00000000000000000000000000000000", 
    1980 => "00111111010000101001000111101100", 
    1981 to 1991=> "00000000000000000000000000000000", 
    1992 => "11000000101011000001011110000110", 
    1993 to 2095=> "00000000000000000000000000000000", 
    2096 => "01000000101111111100111100111010", 
    2097 => "00111111001110110110001001110010", 
    2098 to 2113=> "00000000000000000000000000000000", 
    2114 => "01000000110000010010010011000101", 
    2115 to 2135=> "00000000000000000000000000000000", 
    2136 => "11000000110010010010111000000100", 
    2137 to 2266=> "00000000000000000000000000000000", 
    2267 => "11000001000111101110001110101010", 
    2268 to 2277=> "00000000000000000000000000000000", 
    2278 => "11000000110111110100010110001000", 
    2279 to 2383=> "00000000000000000000000000000000", 
    2384 => "01000000110110110001110101010000", 
    2385 to 2406=> "00000000000000000000000000000000", 
    2407 => "11000001000100100000101000111101", 
    2408 to 2416=> "00000000000000000000000000000000", 
    2417 => "11000000111010001101000110100001", 
    2418 to 2481=> "00000000000000000000000000000000", 
    2482 => "01000000101100010000010010101100", 
    2483 to 2499=> "00000000000000000000000000000000" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity worker_matrix_1_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 2500;
        AddressWidth : INTEGER := 12);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of worker_matrix_1_0 is
    component worker_matrix_1_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    worker_matrix_1_0_rom_U :  component worker_matrix_1_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


