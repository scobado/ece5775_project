-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity worker_matrix_1_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 12; 
             mem_size    : integer := 2500
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of worker_matrix_1_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 to 31=> "00000000000000000000000000000000", 
    32 => "01000000100111001000101101101110", 
    33 to 110=> "00000000000000000000000000000000", 
    111 => "01000001000111101001101111001000", 
    112 to 116=> "00000000000000000000000000000000", 
    117 => "11000000110001110010100110001111", 
    118 to 126=> "00000000000000000000000000000000", 
    127 => "11000001000101111111110111001101", 
    128 to 225=> "00000000000000000000000000000000", 
    226 => "01000000011001111111001001010110", 
    227 to 307=> "00000000000000000000000000000000", 
    308 => "01000000011100010101100011000011", 
    309 to 319=> "00000000000000000000000000000000", 
    320 => "11000000001001011011111101010111", 
    321 to 326=> "00000000000000000000000000000000", 
    327 => "11000000100111111011101000011010", 
    328 to 380=> "00000000000000000000000000000000", 
    381 => "10111111000101100101000101001101", 
    382 to 405=> "00000000000000000000000000000000", 
    406 => "10111111001011100010100001001111", 
    407 => "10111111101001001001010001000001", 
    408 to 536=> "00000000000000000000000000000000", 
    537 => "11000000111010010000010000100010", 
    538 to 569=> "00000000000000000000000000000000", 
    570 => "11000000000110110101000111101001", 
    571 to 622=> "00000000000000000000000000000000", 
    623 => "11000000100100010111101111011000", 
    624 to 645=> "00000000000000000000000000000000", 
    646 => "01000001000010101100100000001000", 
    647 to 672=> "00000000000000000000000000000000", 
    673 => "10111111101111000001001110011101", 
    674 to 828=> "00000000000000000000000000000000", 
    829 => "01000000100011100010011000000000", 
    830 to 870=> "00000000000000000000000000000000", 
    871 => "11000000111011100111011110000101", 
    872 to 922=> "00000000000000000000000000000000", 
    923 => "00111111101111110110100111110111", 
    924 to 931=> "00000000000000000000000000000000", 
    932 => "11000001000001011101111010110011", 
    933 to 938=> "00000000000000000000000000000000", 
    939 => "00111111100010110110111000110011", 
    940 to 951=> "00000000000000000000000000000000", 
    952 => "11000000101100100000100000011101", 
    953 to 1243=> "00000000000000000000000000000000", 
    1244 => "10111111101000101000011100000010", 
    1245 to 1372=> "00000000000000000000000000000000", 
    1373 => "00111111010111011100110011010110", 
    1374 to 1433=> "00000000000000000000000000000000", 
    1434 => "11000000101111010100101100111001", 
    1435 to 1477=> "00000000000000000000000000000000", 
    1478 => "01000000101110100001100000010000", 
    1479 to 1481=> "00000000000000000000000000000000", 
    1482 => "01000000000001001100110101110100", 
    1483 to 1955=> "00000000000000000000000000000000", 
    1956 => "00111111011000010100101010100011", 
    1957 to 2146=> "00000000000000000000000000000000", 
    2147 => "01000000101101011110001101000111", 
    2148 to 2161=> "00000000000000000000000000000000", 
    2162 => "00111111101010111110010011001110", 
    2163 to 2293=> "00000000000000000000000000000000", 
    2294 => "01000000001111011110101011010010", 
    2295 to 2311=> "00000000000000000000000000000000", 
    2312 => "11000000100100110100100110001000", 
    2313 to 2330=> "00000000000000000000000000000000", 
    2331 => "11000000011100001000100111000010", 
    2332 to 2409=> "00000000000000000000000000000000", 
    2410 => "01000000100000000001010100000011", 
    2411 to 2499=> "00000000000000000000000000000000" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity worker_matrix_1_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 2500;
        AddressWidth : INTEGER := 12);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of worker_matrix_1_1 is
    component worker_matrix_1_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    worker_matrix_1_1_rom_U :  component worker_matrix_1_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


