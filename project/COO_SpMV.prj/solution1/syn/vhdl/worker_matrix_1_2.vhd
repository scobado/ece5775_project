-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity worker_matrix_1_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 12; 
             mem_size    : integer := 2500
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of worker_matrix_1_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 to 70=> "00000000000000000000000000000000", 
    71 => "01000001000110111100000111011100", 
    72 to 114=> "00000000000000000000000000000000", 
    115 => "00111110100101000111011011111101", 
    116 to 190=> "00000000000000000000000000000000", 
    191 => "00111111101100101101110010101101", 
    192 to 462=> "00000000000000000000000000000000", 
    463 => "00111111111100000100110110110101", 
    464 to 520=> "00000000000000000000000000000000", 
    521 => "00111111101011011001100101011101", 
    522 to 753=> "00000000000000000000000000000000", 
    754 => "11000000100011101000100101000110", 
    755 to 784=> "00000000000000000000000000000000", 
    785 => "11000001000110100110100010001111", 
    786 to 880=> "00000000000000000000000000000000", 
    881 => "11000001000100010001110001001000", 
    882 to 939=> "00000000000000000000000000000000", 
    940 => "11000000110011110001000001001011", 
    941 to 1029=> "00000000000000000000000000000000", 
    1030 => "01000001000010011111010001001000", 
    1031 to 1060=> "00000000000000000000000000000000", 
    1061 => "11000000110100101001111111011111", 
    1062 to 1079=> "00000000000000000000000000000000", 
    1080 => "11000000101100110101110011101000", 
    1081 to 1112=> "00000000000000000000000000000000", 
    1113 => "11000001000011011010111000100100", 
    1114 to 1515=> "00000000000000000000000000000000", 
    1516 => "01000000101111001011110010101010", 
    1517 to 1541=> "00000000000000000000000000000000", 
    1542 => "01000000101101101100001100001001", 
    1543 => "00000000000000000000000000000000", 
    1544 => "11000000010000100110110011011101", 
    1545 to 1561=> "00000000000000000000000000000000", 
    1562 => "11000000111010010001001000001000", 
    1563 to 1764=> "00000000000000000000000000000000", 
    1765 => "10111111100011011011000011110110", 
    1766 to 1829=> "00000000000000000000000000000000", 
    1830 => "01000000101000101010001100001001", 
    1831 to 2268=> "00000000000000000000000000000000", 
    2269 => "11000000111010100100111111110101", 
    2270 to 2372=> "00000000000000000000000000000000", 
    2373 => "10111111000100011100001011100110", 
    2374 to 2388=> "00000000000000000000000000000000", 
    2389 => "10111110010001111111001010001101", 
    2390 to 2499=> "00000000000000000000000000000000" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity worker_matrix_1_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 2500;
        AddressWidth : INTEGER := 12);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of worker_matrix_1_2 is
    component worker_matrix_1_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    worker_matrix_1_2_rom_U :  component worker_matrix_1_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


