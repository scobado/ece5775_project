// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_create_COO (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        row_address0,
        row_ce0,
        row_we0,
        row_d0,
        col_address0,
        col_ce0,
        col_we0,
        col_d0,
        val_r_address0,
        val_r_ce0,
        val_r_we0,
        val_r_d0
);

parameter    ap_ST_st1_fsm_0 = 5'b1;
parameter    ap_ST_st2_fsm_1 = 5'b10;
parameter    ap_ST_st3_fsm_2 = 5'b100;
parameter    ap_ST_st4_fsm_3 = 5'b1000;
parameter    ap_ST_st5_fsm_4 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv14_0 = 14'b00000000000000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv14_64 = 14'b1100100;
parameter    ap_const_lv7_64 = 7'b1100100;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv5_1 = 5'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] row_address0;
output   row_ce0;
output   row_we0;
output  [6:0] row_d0;
output  [13:0] col_address0;
output   col_ce0;
output   col_we0;
output  [6:0] col_d0;
output  [13:0] val_r_address0;
output   val_r_ce0;
output   val_r_we0;
output  [31:0] val_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg row_ce0;
reg row_we0;
reg col_ce0;
reg col_we0;
reg val_r_ce0;
reg val_r_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_22;
wire   [13:0] matrix_10_dense_address0;
reg    matrix_10_dense_ce0;
wire   [31:0] matrix_10_dense_q0;
wire   [13:0] next_mul_fu_140_p2;
reg   [13:0] next_mul_reg_254;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_62;
wire   [6:0] i_3_fu_152_p2;
reg   [6:0] i_3_reg_262;
wire   [6:0] j_1_fu_164_p2;
reg   [6:0] j_1_reg_270;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_73;
wire   [0:0] exitcond_fu_158_p2;
reg   [31:0] matrix_10_dense_load_reg_280;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_87;
reg   [6:0] i_reg_92;
reg   [13:0] phi_mul_reg_105;
reg   [6:0] j_reg_117;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_107;
wire   [0:0] exitcond1_fu_146_p2;
wire   [63:0] tmp_7_cast_fu_180_p1;
wire  signed [63:0] tmp_s_fu_229_p1;
wire   [0:0] tmp_5_fu_220_p2;
reg   [31:0] counter_fu_40;
wire   [31:0] counter_1_fu_236_p2;
wire   [13:0] tmp_8_cast_fu_170_p1;
wire   [13:0] tmp_7_fu_174_p2;
wire   [31:0] matrix_10_dense_load_to_int_fu_185_p1;
wire   [7:0] tmp_1_fu_188_p4;
wire   [22:0] tmp_fu_198_p1;
wire   [0:0] notrhs_fu_208_p2;
wire   [0:0] notlhs_fu_202_p2;
wire   [0:0] tmp_3_fu_214_p2;
wire   [0:0] tmp_4_fu_130_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'b1;
end

dut_create_COO_matrix_10_dense #(
    .DataWidth( 32 ),
    .AddressRange( 10000 ),
    .AddressWidth( 14 ))
matrix_10_dense_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(matrix_10_dense_address0),
    .ce0(matrix_10_dense_ce0),
    .q0(matrix_10_dense_q0)
);

dut_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
dut_fcmp_32ns_32ns_1_1_U3(
    .din0(matrix_10_dense_load_reg_280),
    .din1(ap_const_lv32_0),
    .opcode(ap_const_lv5_1),
    .dout(tmp_4_fu_130_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (1'b0 == tmp_5_fu_220_p2))) begin
        counter_fu_40 <= counter_1_fu_236_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        counter_fu_40 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond_fu_158_p2 == 1'b0))) begin
        i_reg_92 <= i_3_reg_262;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_92 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond1_fu_146_p2))) begin
        j_reg_117 <= ap_const_lv7_0;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        j_reg_117 <= j_1_reg_270;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond_fu_158_p2 == 1'b0))) begin
        phi_mul_reg_105 <= next_mul_reg_254;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        phi_mul_reg_105 <= ap_const_lv14_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_3_reg_262 <= i_3_fu_152_p2;
        next_mul_reg_254 <= next_mul_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_1_reg_270 <= j_1_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        matrix_10_dense_load_reg_280 <= matrix_10_dense_q0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond1_fu_146_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond1_fu_146_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_62) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_73) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_87) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_107) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        col_ce0 = 1'b1;
    end else begin
        col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (1'b0 == tmp_5_fu_220_p2))) begin
        col_we0 = 1'b1;
    end else begin
        col_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        matrix_10_dense_ce0 = 1'b1;
    end else begin
        matrix_10_dense_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        row_ce0 = 1'b1;
    end else begin
        row_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (1'b0 == tmp_5_fu_220_p2))) begin
        row_we0 = 1'b1;
    end else begin
        row_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        val_r_ce0 = 1'b1;
    end else begin
        val_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (1'b0 == tmp_5_fu_220_p2))) begin
        val_r_we0 = 1'b1;
    end else begin
        val_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(1'b0 == exitcond1_fu_146_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if ((exitcond_fu_158_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_107 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_22 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_62 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_73 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_87 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

assign col_address0 = tmp_s_fu_229_p1;

assign col_d0 = j_reg_117;

assign counter_1_fu_236_p2 = (counter_fu_40 + ap_const_lv32_1);

assign exitcond1_fu_146_p2 = ((i_reg_92 == ap_const_lv7_64) ? 1'b1 : 1'b0);

assign exitcond_fu_158_p2 = ((j_reg_117 == ap_const_lv7_64) ? 1'b1 : 1'b0);

assign i_3_fu_152_p2 = (i_reg_92 + ap_const_lv7_1);

assign j_1_fu_164_p2 = (j_reg_117 + ap_const_lv7_1);

assign matrix_10_dense_address0 = tmp_7_cast_fu_180_p1;

assign matrix_10_dense_load_to_int_fu_185_p1 = matrix_10_dense_load_reg_280;

assign next_mul_fu_140_p2 = (phi_mul_reg_105 + ap_const_lv14_64);

assign notlhs_fu_202_p2 = ((tmp_1_fu_188_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notrhs_fu_208_p2 = ((tmp_fu_198_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign row_address0 = tmp_s_fu_229_p1;

assign row_d0 = i_reg_92;

assign tmp_1_fu_188_p4 = {{matrix_10_dense_load_to_int_fu_185_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_3_fu_214_p2 = (notrhs_fu_208_p2 | notlhs_fu_202_p2);

assign tmp_5_fu_220_p2 = (tmp_3_fu_214_p2 & tmp_4_fu_130_p2);

assign tmp_7_cast_fu_180_p1 = tmp_7_fu_174_p2;

assign tmp_7_fu_174_p2 = (phi_mul_reg_105 + tmp_8_cast_fu_170_p1);

assign tmp_8_cast_fu_170_p1 = j_reg_117;

assign tmp_fu_198_p1 = matrix_10_dense_load_to_int_fu_185_p1[22:0];

assign tmp_s_fu_229_p1 = $signed(counter_fu_40);

assign val_r_address0 = tmp_s_fu_229_p1;

assign val_r_d0 = matrix_10_dense_load_reg_280;

endmodule //dut_create_COO
